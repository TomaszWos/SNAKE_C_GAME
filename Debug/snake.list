
snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb0  08007fb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb0  08007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb8  08007fb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000074  08008034  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08008034  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001616c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032eb  00000000  00000000  00036210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00039500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d3e  00000000  00000000  0003b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001809d  00000000  00000000  00065666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff34d  00000000  00000000  0007d703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ca50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f44  00000000  00000000  0017caa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a34 	.word	0x08007a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08007a34 	.word	0x08007a34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4604      	mov	r4, r0
 80004d4:	4608      	mov	r0, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	461a      	mov	r2, r3
 80004da:	4623      	mov	r3, r4
 80004dc:	80fb      	strh	r3, [r7, #6]
 80004de:	4603      	mov	r3, r0
 80004e0:	80bb      	strh	r3, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	70fb      	strb	r3, [r7, #3]
 80004e6:	4613      	mov	r3, r2
 80004e8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80004ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ee:	2b7f      	cmp	r3, #127	; 0x7f
 80004f0:	f300 8100 	bgt.w	80006f4 <GFX_draw_char+0x228>
 80004f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004f8:	2b3f      	cmp	r3, #63	; 0x3f
 80004fa:	f300 80fb 	bgt.w	80006f4 <GFX_draw_char+0x228>
 80004fe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000502:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000506:	4613      	mov	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4413      	add	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	440b      	add	r3, r1
 8000510:	2b00      	cmp	r3, #0
 8000512:	f340 80ef 	ble.w	80006f4 <GFX_draw_char+0x228>
 8000516:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800051a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	4413      	add	r3, r2
 8000522:	2b00      	cmp	r3, #0
 8000524:	f340 80e6 	ble.w	80006f4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e0aa      	b.n	8000684 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800052e:	78fa      	ldrb	r2, [r7, #3]
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	441a      	add	r2, r3
 8000536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800053a:	4413      	add	r3, r2
 800053c:	4a6f      	ldr	r2, [pc, #444]	; (80006fc <GFX_draw_char+0x230>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000542:	2307      	movs	r3, #7
 8000544:	73bb      	strb	r3, [r7, #14]
 8000546:	e092      	b.n	800066e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000548:	7b7b      	ldrb	r3, [r7, #13]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d040      	beq.n	80005d4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000556:	2b01      	cmp	r3, #1
 8000558:	d116      	bne.n	8000588 <GFX_draw_char+0xbc>
 800055a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800055e:	2b01      	cmp	r3, #1
 8000560:	d112      	bne.n	8000588 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	b29a      	uxth	r2, r3
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4413      	add	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	b218      	sxth	r0, r3
 8000570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000574:	b29a      	uxth	r2, r3
 8000576:	88bb      	ldrh	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	b29b      	uxth	r3, r3
 800057c:	b21b      	sxth	r3, r3
 800057e:	883a      	ldrh	r2, [r7, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f000 f9f7 	bl	8000974 <SSD1306_draw_pixel>
 8000586:	e069      	b.n	800065c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058c:	b29a      	uxth	r2, r3
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	b29b      	uxth	r3, r3
 8000594:	fb12 f303 	smulbb	r3, r2, r3
 8000598:	b29a      	uxth	r2, r3
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	4413      	add	r3, r2
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b218      	sxth	r0, r3
 80005a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	fb12 f303 	smulbb	r3, r2, r3
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b219      	sxth	r1, r3
 80005bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005c6:	b21c      	sxth	r4, r3
 80005c8:	883b      	ldrh	r3, [r7, #0]
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4623      	mov	r3, r4
 80005ce:	f000 f8d0 	bl	8000772 <GFX_draw_fill_rect>
 80005d2:	e043      	b.n	800065c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80005d4:	8c3a      	ldrh	r2, [r7, #32]
 80005d6:	883b      	ldrh	r3, [r7, #0]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d03f      	beq.n	800065c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80005dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d116      	bne.n	8000612 <GFX_draw_char+0x146>
 80005e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d112      	bne.n	8000612 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80005ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	4413      	add	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	b218      	sxth	r0, r3
 80005fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	b21b      	sxth	r3, r3
 8000608:	8c3a      	ldrh	r2, [r7, #32]
 800060a:	4619      	mov	r1, r3
 800060c:	f000 f9b2 	bl	8000974 <SSD1306_draw_pixel>
 8000610:	e024      	b.n	800065c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	b29a      	uxth	r2, r3
 8000618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800061c:	b29b      	uxth	r3, r3
 800061e:	fb12 f303 	smulbb	r3, r2, r3
 8000622:	b29a      	uxth	r2, r3
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	4413      	add	r3, r2
 8000628:	b29b      	uxth	r3, r3
 800062a:	b218      	sxth	r0, r3
 800062c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000636:	b29b      	uxth	r3, r3
 8000638:	fb12 f303 	smulbb	r3, r2, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	b219      	sxth	r1, r3
 8000646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800064a:	b21a      	sxth	r2, r3
 800064c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000650:	b21c      	sxth	r4, r3
 8000652:	8c3b      	ldrh	r3, [r7, #32]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4623      	mov	r3, r4
 8000658:	f000 f88b 	bl	8000772 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	73bb      	strb	r3, [r7, #14]
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	085b      	lsrs	r3, r3, #1
 800066c:	737b      	strb	r3, [r7, #13]
 800066e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000672:	2b00      	cmp	r3, #0
 8000674:	f6bf af68 	bge.w	8000548 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3301      	adds	r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000688:	2b04      	cmp	r3, #4
 800068a:	f77f af50 	ble.w	800052e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800068e:	8c3a      	ldrh	r2, [r7, #32]
 8000690:	883b      	ldrh	r3, [r7, #0]
 8000692:	429a      	cmp	r2, r3
 8000694:	d02f      	beq.n	80006f6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000696:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800069a:	2b01      	cmp	r3, #1
 800069c:	d10e      	bne.n	80006bc <GFX_draw_char+0x1f0>
 800069e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d10a      	bne.n	80006bc <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	3305      	adds	r3, #5
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	b218      	sxth	r0, r3
 80006ae:	8c3b      	ldrh	r3, [r7, #32]
 80006b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006b4:	2208      	movs	r2, #8
 80006b6:	f000 fad7 	bl	8000c68 <SSD1306_draw_fast_vline>
 80006ba:	e01c      	b.n	80006f6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80006bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	4413      	add	r3, r2
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	b218      	sxth	r0, r3
 80006d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006dc:	b29b      	uxth	r3, r3
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b21c      	sxth	r4, r3
 80006e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006e8:	8c3b      	ldrh	r3, [r7, #32]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4623      	mov	r3, r4
 80006ee:	f000 f840 	bl	8000772 <GFX_draw_fill_rect>
 80006f2:	e000      	b.n	80006f6 <GFX_draw_char+0x22a>
		return;
 80006f4:	bf00      	nop
		}
	}
}
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	08007a58 	.word	0x08007a58

08000700 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af04      	add	r7, sp, #16
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	461a      	mov	r2, r3
 800070a:	4603      	mov	r3, r0
 800070c:	81fb      	strh	r3, [r7, #14]
 800070e:	460b      	mov	r3, r1
 8000710:	81bb      	strh	r3, [r7, #12]
 8000712:	4613      	mov	r3, r2
 8000714:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	75fb      	strb	r3, [r7, #23]
	while(*c)
 800071a:	e021      	b.n	8000760 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	b29a      	uxth	r2, r3
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	4413      	add	r3, r2
 8000724:	b29b      	uxth	r3, r3
 8000726:	b218      	sxth	r0, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	88fc      	ldrh	r4, [r7, #6]
 800072e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000732:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	4623      	mov	r3, r4
 8000744:	f7ff fec2 	bl	80004cc <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000748:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800074c:	461a      	mov	r2, r3
 800074e:	00d2      	lsls	r2, r2, #3
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	b2da      	uxtb	r2, r3
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	4413      	add	r3, r2
 8000758:	75fb      	strb	r3, [r7, #23]
		c++;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	3301      	adds	r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1d9      	bne.n	800071c <GFX_draw_string+0x1c>
	}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd90      	pop	{r4, r7, pc}

08000772 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000772:	b590      	push	{r4, r7, lr}
 8000774:	b085      	sub	sp, #20
 8000776:	af00      	add	r7, sp, #0
 8000778:	4604      	mov	r4, r0
 800077a:	4608      	mov	r0, r1
 800077c:	4611      	mov	r1, r2
 800077e:	461a      	mov	r2, r3
 8000780:	4623      	mov	r3, r4
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4603      	mov	r3, r0
 8000786:	80bb      	strh	r3, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
 800078c:	4613      	mov	r3, r2
 800078e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	81fb      	strh	r3, [r7, #14]
 8000794:	e00e      	b.n	80007b4 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000796:	8c3b      	ldrh	r3, [r7, #32]
 8000798:	f9b7 2000 	ldrsh.w	r2, [r7]
 800079c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007a0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80007a4:	f000 fa60 	bl	8000c68 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 80007a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	3301      	adds	r3, #1
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	81fb      	strh	r3, [r7, #14]
 80007b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007b8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80007bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007c0:	440b      	add	r3, r1
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbe7      	blt.n	8000796 <GFX_draw_fill_rect+0x24>
	}
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd90      	pop	{r4, r7, pc}

080007d0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af04      	add	r7, sp, #16
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	4613      	mov	r3, r2
 80007de:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	9302      	str	r3, [sp, #8]
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2178      	movs	r1, #120	; 0x78
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <platform_write+0x34>)
 80007f6:	f003 f8b5 	bl	8003964 <HAL_I2C_Mem_Write>
	return 0;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000144 	.word	0x20000144

08000808 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af02      	add	r7, sp, #8
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	b29a      	uxth	r2, r3
 800081c:	88bb      	ldrh	r3, [r7, #4]
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2301      	movs	r3, #1
 8000826:	2178      	movs	r1, #120	; 0x78
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <platform_write_dma+0x30>)
 800082a:	f003 f9af 	bl	8003b8c <HAL_I2C_Mem_Write_DMA>
	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000144 	.word	0x20000144

0800083c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff ffbf 	bl	80007d0 <platform_write>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <SSD1306_init>:

bool SSD1306_init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000862:	2302      	movs	r3, #2
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	238f      	movs	r3, #143	; 0x8f
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	2302      	movs	r3, #2
 800086c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <SSD1306_init+0x114>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10d      	bne.n	8000892 <SSD1306_init+0x36>
 8000876:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800087a:	f007 f819 	bl	80078b0 <malloc>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <SSD1306_init+0x114>)
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <SSD1306_init+0x114>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <SSD1306_init+0x36>
  {
    return false;
 800088e:	2300      	movs	r3, #0
 8000890:	e06a      	b.n	8000968 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8000892:	f000 f949 	bl	8000b28 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000896:	20ae      	movs	r0, #174	; 0xae
 8000898:	f7ff ffd0 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800089c:	20d5      	movs	r0, #213	; 0xd5
 800089e:	f7ff ffcd 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 80008a2:	20e0      	movs	r0, #224	; 0xe0
 80008a4:	f7ff ffca 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80008a8:	20a8      	movs	r0, #168	; 0xa8
 80008aa:	f7ff ffc7 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80008ae:	203f      	movs	r0, #63	; 0x3f
 80008b0:	f7ff ffc4 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80008b4:	20d3      	movs	r0, #211	; 0xd3
 80008b6:	f7ff ffc1 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ffbe 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80008c0:	2040      	movs	r0, #64	; 0x40
 80008c2:	f7ff ffbb 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80008c6:	208d      	movs	r0, #141	; 0x8d
 80008c8:	f7ff ffb8 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d101      	bne.n	80008d6 <SSD1306_init+0x7a>
 80008d2:	2310      	movs	r3, #16
 80008d4:	e000      	b.n	80008d8 <SSD1306_init+0x7c>
 80008d6:	2314      	movs	r3, #20
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffaf 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80008de:	2020      	movs	r0, #32
 80008e0:	f7ff ffac 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ffa9 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80008ea:	20b0      	movs	r0, #176	; 0xb0
 80008ec:	f7ff ffa6 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80008f0:	20c8      	movs	r0, #200	; 0xc8
 80008f2:	f7ff ffa3 	bl	800083c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80008f6:	2312      	movs	r3, #18
 80008f8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80008fa:	797b      	ldrb	r3, [r7, #5]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d101      	bne.n	8000904 <SSD1306_init+0xa8>
 8000900:	239f      	movs	r3, #159	; 0x9f
 8000902:	e000      	b.n	8000906 <SSD1306_init+0xaa>
 8000904:	23cf      	movs	r3, #207	; 0xcf
 8000906:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8000908:	20da      	movs	r0, #218	; 0xda
 800090a:	f7ff ff97 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff93 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8000916:	2081      	movs	r0, #129	; 0x81
 8000918:	f7ff ff90 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff8c 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000924:	20d9      	movs	r0, #217	; 0xd9
 8000926:	f7ff ff89 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d101      	bne.n	8000934 <SSD1306_init+0xd8>
 8000930:	2322      	movs	r3, #34	; 0x22
 8000932:	e000      	b.n	8000936 <SSD1306_init+0xda>
 8000934:	23f1      	movs	r3, #241	; 0xf1
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff80 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 800093c:	20db      	movs	r0, #219	; 0xdb
 800093e:	f7ff ff7d 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000942:	2040      	movs	r0, #64	; 0x40
 8000944:	f7ff ff7a 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000948:	20a4      	movs	r0, #164	; 0xa4
 800094a:	f7ff ff77 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800094e:	20a6      	movs	r0, #166	; 0xa6
 8000950:	f7ff ff74 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000954:	202e      	movs	r0, #46	; 0x2e
 8000956:	f7ff ff71 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 800095a:	20af      	movs	r0, #175	; 0xaf
 800095c:	f7ff ff6e 	bl	800083c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000960:	2002      	movs	r0, #2
 8000962:	f000 fb19 	bl	8000f98 <SSD1306_set_rotation>
  return true;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000090 	.word	0x20000090

08000974 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	460b      	mov	r3, r1
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f2c0 80c4 	blt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 8000990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000994:	2b7f      	cmp	r3, #127	; 0x7f
 8000996:	f300 80bf 	bgt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f2c0 80ba 	blt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 80009a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009a8:	2b3f      	cmp	r3, #63	; 0x3f
 80009aa:	f300 80b5 	bgt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 80009ae:	f000 fb03 	bl	8000fb8 <SSD1306_get_rotation>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d023      	beq.n	8000a00 <SSD1306_draw_pixel+0x8c>
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	dc33      	bgt.n	8000a24 <SSD1306_draw_pixel+0xb0>
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d002      	beq.n	80009c6 <SSD1306_draw_pixel+0x52>
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d012      	beq.n	80009ea <SSD1306_draw_pixel+0x76>
 80009c4:	e02e      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4053      	eors	r3, r2
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	88ba      	ldrh	r2, [r7, #4]
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	4053      	eors	r3, r2
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	4053      	eors	r3, r2
 80009dc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	80fb      	strh	r3, [r7, #6]
				break;
 80009e8:	e01c      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	80bb      	strh	r3, [r7, #4]
				break;
 80009fe:	e011      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	4053      	eors	r3, r2
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	88ba      	ldrh	r2, [r7, #4]
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	80bb      	strh	r3, [r7, #4]
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	4053      	eors	r3, r2
 8000a16:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000a18:	88bb      	ldrh	r3, [r7, #4]
 8000a1a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	80bb      	strh	r3, [r7, #4]
				break;
 8000a22:	bf00      	nop
		}

		switch (color)
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d051      	beq.n	8000ace <SSD1306_draw_pixel+0x15a>
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	dc75      	bgt.n	8000b1a <SSD1306_draw_pixel+0x1a6>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d026      	beq.n	8000a80 <SSD1306_draw_pixel+0x10c>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d171      	bne.n	8000b1a <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da00      	bge.n	8000a48 <SSD1306_draw_pixel+0xd4>
 8000a46:	3307      	adds	r3, #7
 8000a48:	10db      	asrs	r3, r3, #3
 8000a4a:	b218      	sxth	r0, r3
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	01db      	lsls	r3, r3, #7
 8000a50:	440b      	add	r3, r1
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25a      	sxtb	r2, r3
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b25c      	sxtb	r4, r3
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a72:	4602      	mov	r2, r0
 8000a74:	01d2      	lsls	r2, r2, #7
 8000a76:	440a      	add	r2, r1
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2e2      	uxtb	r2, r4
 8000a7c:	701a      	strb	r2, [r3, #0]
				break;
 8000a7e:	e04c      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da00      	bge.n	8000a92 <SSD1306_draw_pixel+0x11e>
 8000a90:	3307      	adds	r3, #7
 8000a92:	10db      	asrs	r3, r3, #3
 8000a94:	b218      	sxth	r0, r3
 8000a96:	4603      	mov	r3, r0
 8000a98:	01db      	lsls	r3, r3, #7
 8000a9a:	440b      	add	r3, r1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b25c      	sxtb	r4, r3
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	01d2      	lsls	r2, r2, #7
 8000ac4:	440a      	add	r2, r1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b2e2      	uxtb	r2, r4
 8000aca:	701a      	strb	r2, [r3, #0]
				break;
 8000acc:	e025      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ad6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da00      	bge.n	8000ae0 <SSD1306_draw_pixel+0x16c>
 8000ade:	3307      	adds	r3, #7
 8000ae0:	10db      	asrs	r3, r3, #3
 8000ae2:	b218      	sxth	r0, r3
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	01db      	lsls	r3, r3, #7
 8000ae8:	440b      	add	r3, r1
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	4053      	eors	r3, r2
 8000b00:	b25c      	sxtb	r4, r3
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	01d2      	lsls	r2, r2, #7
 8000b0e:	440a      	add	r2, r1
 8000b10:	4413      	add	r3, r2
 8000b12:	b2e2      	uxtb	r2, r4
 8000b14:	701a      	strb	r2, [r3, #0]
				break;
 8000b16:	e000      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
		}
	}
 8000b18:	bf00      	nop
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000090 	.word	0x20000090

08000b28 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SSD1306_display_clear+0x18>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 fec2 	bl	80078c0 <memset>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000090 	.word	0x20000090

08000b44 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000b44:	b490      	push	{r4, r7}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4623      	mov	r3, r4
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	4603      	mov	r3, r0
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	807b      	strh	r3, [r7, #2]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000b62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db75      	blt.n	8000c56 <SSD1306_draw_fast_hline_internal+0x112>
 8000b6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b70:	dc71      	bgt.n	8000c56 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da06      	bge.n	8000b88 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000b88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b90:	4413      	add	r3, r2
 8000b92:	2b80      	cmp	r3, #128	; 0x80
 8000b94:	dd04      	ble.n	8000ba0 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000ba0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	dd56      	ble.n	8000c56 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <SSD1306_draw_fast_hline_internal+0x120>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da00      	bge.n	8000bb6 <SSD1306_draw_fast_hline_internal+0x72>
 8000bb4:	3307      	adds	r3, #7
 8000bb6:	10db      	asrs	r3, r3, #3
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	01d9      	lsls	r1, r3, #7
 8000bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	2201      	movs	r2, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000bd4:	883b      	ldrh	r3, [r7, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d034      	beq.n	8000c44 <SSD1306_draw_fast_hline_internal+0x100>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	dc3c      	bgt.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d013      	beq.n	8000c0a <SSD1306_draw_fast_hline_internal+0xc6>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d138      	bne.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 8000be6:	e007      	b.n	8000bf8 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	60fa      	str	r2, [r7, #12]
 8000bee:	7819      	ldrb	r1, [r3, #0]
 8000bf0:	7afa      	ldrb	r2, [r7, #11]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000bf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	3a01      	subs	r2, #1
 8000c00:	b292      	uxth	r2, r2
 8000c02:	807a      	strh	r2, [r7, #2]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ef      	bne.n	8000be8 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000c08:	e026      	b.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 8000c0a:	7afb      	ldrb	r3, [r7, #11]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000c10:	e007      	b.n	8000c22 <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60fa      	str	r2, [r7, #12]
 8000c18:	7819      	ldrb	r1, [r3, #0]
 8000c1a:	7afa      	ldrb	r2, [r7, #11]
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000c22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	3a01      	subs	r2, #1
 8000c2a:	b292      	uxth	r2, r2
 8000c2c:	807a      	strh	r2, [r7, #2]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1ef      	bne.n	8000c12 <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000c32:	e011      	b.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60fa      	str	r2, [r7, #12]
 8000c3a:	7819      	ldrb	r1, [r3, #0]
 8000c3c:	7afa      	ldrb	r2, [r7, #11]
 8000c3e:	404a      	eors	r2, r1
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000c44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	3a01      	subs	r2, #1
 8000c4c:	b292      	uxth	r2, r2
 8000c4e:	807a      	strh	r2, [r7, #2]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1ef      	bne.n	8000c34 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000c54:	e000      	b.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 8000c56:	bf00      	nop
	}
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc90      	pop	{r4, r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000090 	.word	0x20000090

08000c68 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4623      	mov	r3, r4
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80bb      	strh	r3, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	807b      	strh	r3, [r7, #2]
 8000c82:	4613      	mov	r3, r2
 8000c84:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000c8a:	f000 f995 	bl	8000fb8 <SSD1306_get_rotation>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d033      	beq.n	8000cfc <SSD1306_draw_fast_vline+0x94>
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	dc45      	bgt.n	8000d24 <SSD1306_draw_fast_vline+0xbc>
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d002      	beq.n	8000ca2 <SSD1306_draw_fast_vline+0x3a>
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d01b      	beq.n	8000cd8 <SSD1306_draw_fast_vline+0x70>
 8000ca0:	e040      	b.n	8000d24 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	4053      	eors	r3, r2
 8000cac:	80fb      	strh	r3, [r7, #6]
 8000cae:	88ba      	ldrh	r2, [r7, #4]
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4053      	eors	r3, r2
 8000cb4:	80bb      	strh	r3, [r7, #4]
 8000cb6:	88fa      	ldrh	r2, [r7, #6]
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	4053      	eors	r3, r2
 8000cbc:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8000cc8:	88fa      	ldrh	r2, [r7, #6]
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	80fb      	strh	r3, [r7, #6]
  			break;
 8000cd6:	e025      	b.n	8000d24 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000cec:	88ba      	ldrh	r2, [r7, #4]
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000cfa:	e013      	b.n	8000d24 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000d00:	88fa      	ldrh	r2, [r7, #6]
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	4053      	eors	r3, r2
 8000d06:	80fb      	strh	r3, [r7, #6]
 8000d08:	88ba      	ldrh	r2, [r7, #4]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	4053      	eors	r3, r2
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	88bb      	ldrh	r3, [r7, #4]
 8000d14:	4053      	eors	r3, r2
 8000d16:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000d22:	bf00      	nop
	}

	if (bSwap)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d009      	beq.n	8000d3e <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000d2a:	883b      	ldrh	r3, [r7, #0]
 8000d2c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d30:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d34:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d38:	f7ff ff04 	bl	8000b44 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000d3c:	e008      	b.n	8000d50 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000d3e:	883b      	ldrh	r3, [r7, #0]
 8000d40:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d44:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d48:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d4c:	f000 f804 	bl	8000d58 <SSD1306_draw_fast_vline_internal>
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}

08000d58 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000d58:	b490      	push	{r4, r7}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80bb      	strh	r3, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f2c0 80da 	blt.w	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
 8000d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d84:	2b7f      	cmp	r3, #127	; 0x7f
 8000d86:	f300 80d5 	bgt.w	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 8000d8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da06      	bge.n	8000da0 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000da0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000da4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000da8:	4413      	add	r3, r2
 8000daa:	2b40      	cmp	r3, #64	; 0x40
 8000dac:	dd04      	ble.n	8000db8 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f340 80b9 	ble.w	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	737b      	strb	r3, [r7, #13]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	7b7a      	ldrb	r2, [r7, #13]
 8000dd0:	08d2      	lsrs	r2, r2, #3
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	01d1      	lsls	r1, r2, #7
 8000dd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dda:	440a      	add	r2, r1
 8000ddc:	4413      	add	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d040      	beq.n	8000e70 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	f1c3 0308 	rsb	r3, r3, #8
 8000df4:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000dfe:	7dfa      	ldrb	r2, [r7, #23]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d20b      	bcs.n	8000e1e <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	fa42 f303 	asr.w	r3, r2, r3
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d01a      	beq.n	8000e5a <SSD1306_draw_fast_vline_internal+0x102>
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	dc20      	bgt.n	8000e6a <SSD1306_draw_fast_vline_internal+0x112>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <SSD1306_draw_fast_vline_internal+0xe8>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d11c      	bne.n	8000e6a <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	701a      	strb	r2, [r3, #0]
						break;
 8000e3e:	e014      	b.n	8000e6a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b25a      	sxtb	r2, r3
 8000e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	701a      	strb	r2, [r3, #0]
						break;
 8000e58:	e007      	b.n	8000e6a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	4053      	eors	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	701a      	strb	r2, [r3, #0]
						break;
 8000e68:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	3380      	adds	r3, #128	; 0x80
 8000e6e:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000e70:	7dfa      	ldrb	r2, [r7, #23]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d35d      	bcc.n	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 8000e78:	7dfa      	ldrb	r2, [r7, #23]
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	2b07      	cmp	r3, #7
 8000e84:	d925      	bls.n	8000ed2 <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 8000e86:	883b      	ldrh	r3, [r7, #0]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d10f      	bne.n	8000eac <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	3380      	adds	r3, #128	; 0x80
 8000e9c:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	d8f0      	bhi.n	8000e8c <SSD1306_draw_fast_vline_internal+0x134>
 8000eaa:	e012      	b.n	8000ed2 <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000eac:	883b      	ldrh	r3, [r7, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SSD1306_draw_fast_vline_internal+0x15e>
 8000eb2:	23ff      	movs	r3, #255	; 0xff
 8000eb4:	e000      	b.n	8000eb8 <SSD1306_draw_fast_vline_internal+0x160>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	7b3a      	ldrb	r2, [r7, #12]
 8000ebe:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3380      	adds	r3, #128	; 0x80
 8000ec4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
 8000ec8:	3b08      	subs	r3, #8
 8000eca:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d8f3      	bhi.n	8000eba <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d02d      	beq.n	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000ee8:	883b      	ldrh	r3, [r7, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d01a      	beq.n	8000f24 <SSD1306_draw_fast_vline_internal+0x1cc>
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	dc21      	bgt.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d009      	beq.n	8000f0a <SSD1306_draw_fast_vline_internal+0x1b2>
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d11d      	bne.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	701a      	strb	r2, [r3, #0]
							break;
 8000f08:	e015      	b.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b25a      	sxtb	r2, r3
 8000f10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	701a      	strb	r2, [r3, #0]
							break;
 8000f22:	e008      	b.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	4053      	eors	r3, r2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	701a      	strb	r2, [r3, #0]
							break;
 8000f32:	e000      	b.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 8000f34:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc90      	pop	{r4, r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000090 	.word	0x20000090
 8000f44:	08007f58 	.word	0x08007f58
 8000f48:	08007f60 	.word	0x08007f60

08000f4c <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8000f58:	2022      	movs	r0, #34	; 0x22
 8000f5a:	f7ff fc6f 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff fc6c 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8000f64:	20ff      	movs	r0, #255	; 0xff
 8000f66:	f7ff fc69 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8000f6a:	2021      	movs	r0, #33	; 0x21
 8000f6c:	f7ff fc66 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fc63 	bl	800083c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8000f76:	207f      	movs	r0, #127	; 0x7f
 8000f78:	f7ff fc60 	bl	800083c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SSD1306_display_repaint+0x48>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	4619      	mov	r1, r3
 8000f84:	2040      	movs	r0, #64	; 0x40
 8000f86:	f7ff fc3f 	bl	8000808 <platform_write_dma>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000090 	.word	0x20000090

08000f98 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <SSD1306_set_rotation+0x1c>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	7013      	strb	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000094 	.word	0x20000094

08000fb8 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	return rotation;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <SSD1306_get_rotation+0x14>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000094 	.word	0x20000094

08000fd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <MX_ADC1_Init+0xe4>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001012:	2204      	movs	r2, #4
 8001014:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800101e:	2201      	movs	r2, #1
 8001020:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001024:	2201      	movs	r2, #1
 8001026:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001046:	2200      	movs	r2, #0
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001054:	f001 f8a8 	bl	80021a8 <HAL_ADC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800105e:	f000 fccb 	bl	80019f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800106e:	f001 fe07 	bl	8002c80 <HAL_ADCEx_MultiModeConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001078:	f000 fcbe 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_ADC1_Init+0xe8>)
 800107e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001080:	2306      	movs	r3, #6
 8001082:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001088:	237f      	movs	r3, #127	; 0x7f
 800108a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108c:	2304      	movs	r3, #4
 800108e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800109a:	f001 f9db 	bl	8002454 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010a4:	f000 fca8 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000098 	.word	0x20000098
 80010b4:	50040000 	.word	0x50040000
 80010b8:	14f00020 	.word	0x14f00020

080010bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a2b      	ldr	r2, [pc, #172]	; (8001188 <HAL_ADC_MspInit+0xcc>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d14f      	bne.n	800117e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <HAL_ADC_MspInit+0xd0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <HAL_ADC_MspInit+0xd0>)
 80010e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_ADC_MspInit+0xd0>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <HAL_ADC_MspInit+0xd0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <HAL_ADC_MspInit+0xd0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <HAL_ADC_MspInit+0xd0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800110e:	2303      	movs	r3, #3
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001112:	230b      	movs	r3, #11
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f002 f9b4 	bl	8003490 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 800112a:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <HAL_ADC_MspInit+0xd8>)
 800112c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 8001148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 8001150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001154:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 8001158:	2220      	movs	r2, #32
 800115a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001162:	480b      	ldr	r0, [pc, #44]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 8001164:	f001 ff4e 	bl	8003004 <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800116e:	f000 fc43 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 8001176:	64da      	str	r2, [r3, #76]	; 0x4c
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_ADC_MspInit+0xd4>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	50040000 	.word	0x50040000
 800118c:	40021000 	.word	0x40021000
 8001190:	200000fc 	.word	0x200000fc
 8001194:	40020008 	.word	0x40020008

08001198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_DMA_Init+0x48>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <MX_DMA_Init+0x48>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6493      	str	r3, [r2, #72]	; 0x48
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_DMA_Init+0x48>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	200b      	movs	r0, #11
 80011bc:	f001 feeb 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c0:	200b      	movs	r0, #11
 80011c2:	f001 ff04 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2010      	movs	r0, #16
 80011cc:	f001 fee3 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011d0:	2010      	movs	r0, #16
 80011d2:	f001 fefc 	bl	8002fce <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000

080011e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <MX_GPIO_Init+0xd4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a2e      	ldr	r2, [pc, #184]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_GPIO_Init+0xd4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_GPIO_Init+0xd4>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2120      	movs	r1, #32
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f002 fabf 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	480f      	ldr	r0, [pc, #60]	; (80012bc <MX_GPIO_Init+0xd8>)
 800127e:	f002 f907 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001282:	2320      	movs	r3, #32
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f002 f8f8 	bl	8003490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2028      	movs	r0, #40	; 0x28
 80012a6:	f001 fe76 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012aa:	2028      	movs	r0, #40	; 0x28
 80012ac:	f001 fe8f 	bl	8002fce <HAL_NVIC_EnableIRQ>

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000800 	.word	0x48000800

080012c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_I2C1_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <MX_I2C1_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_I2C1_Init+0x74>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <MX_I2C1_Init+0x7c>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_I2C1_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <MX_I2C1_Init+0x74>)
 80012fc:	f002 faa2 	bl	8003844 <HAL_I2C_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001306:	f000 fb77 	bl	80019f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <MX_I2C1_Init+0x74>)
 800130e:	f004 f97b 	bl	8005608 <HAL_I2CEx_ConfigAnalogFilter>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001318:	f000 fb6e 	bl	80019f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_I2C1_Init+0x74>)
 8001320:	f004 f9bd 	bl	800569e <HAL_I2CEx_ConfigDigitalFilter>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 fb65 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000144 	.word	0x20000144
 8001338:	40005400 	.word	0x40005400
 800133c:	10909cec 	.word	0x10909cec

08001340 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ac      	sub	sp, #176	; 0xb0
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2288      	movs	r2, #136	; 0x88
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f006 faad 	bl	80078c0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a3a      	ldr	r2, [pc, #232]	; (8001454 <HAL_I2C_MspInit+0x114>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d16c      	bne.n	800144a <HAL_I2C_MspInit+0x10a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001370:	2340      	movs	r3, #64	; 0x40
 8001372:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001374:	2300      	movs	r3, #0
 8001376:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4618      	mov	r0, r3
 800137e:	f005 f83f 	bl	8006400 <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001388:	f000 fb36 	bl	80019f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_I2C_MspInit+0x118>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	4a31      	ldr	r2, [pc, #196]	; (8001458 <HAL_I2C_MspInit+0x118>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_I2C_MspInit+0x118>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a4:	23c0      	movs	r3, #192	; 0xc0
 80013a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	2312      	movs	r3, #18
 80013ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013bc:	2304      	movs	r3, #4
 80013be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c6:	4619      	mov	r1, r3
 80013c8:	4824      	ldr	r0, [pc, #144]	; (800145c <HAL_I2C_MspInit+0x11c>)
 80013ca:	f002 f861 	bl	8003490 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_I2C_MspInit+0x118>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <HAL_I2C_MspInit+0x118>)
 80013d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_I2C_MspInit+0x118>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_I2C_MspInit+0x120>)
 80013e8:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <HAL_I2C_MspInit+0x124>)
 80013ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_I2C_MspInit+0x120>)
 80013ee:	2203      	movs	r2, #3
 80013f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_I2C_MspInit+0x120>)
 80013f4:	2210      	movs	r2, #16
 80013f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_I2C_MspInit+0x120>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_I2C_MspInit+0x120>)
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_I2C_MspInit+0x120>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_I2C_MspInit+0x120>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_I2C_MspInit+0x120>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_I2C_MspInit+0x120>)
 8001418:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800141c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_I2C_MspInit+0x120>)
 8001420:	f001 fdf0 	bl	8003004 <HAL_DMA_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 800142a:	f000 fae5 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_I2C_MspInit+0x120>)
 8001432:	639a      	str	r2, [r3, #56]	; 0x38
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_I2C_MspInit+0x120>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	201f      	movs	r0, #31
 8001440:	f001 fda9 	bl	8002f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001444:	201f      	movs	r0, #31
 8001446:	f001 fdc2 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800144a:	bf00      	nop
 800144c:	37b0      	adds	r7, #176	; 0xb0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40005400 	.word	0x40005400
 8001458:	40021000 	.word	0x40021000
 800145c:	48000400 	.word	0x48000400
 8001460:	20000198 	.word	0x20000198
 8001464:	4002006c 	.word	0x4002006c

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	object.x=45;
 800146c:	4b40      	ldr	r3, [pc, #256]	; (8001570 <main+0x108>)
 800146e:	222d      	movs	r2, #45	; 0x2d
 8001470:	805a      	strh	r2, [r3, #2]
	object.y=0;
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <main+0x108>)
 8001474:	2200      	movs	r2, #0
 8001476:	809a      	strh	r2, [r3, #4]
	object.h=20;
 8001478:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <main+0x108>)
 800147a:	2214      	movs	r2, #20
 800147c:	80da      	strh	r2, [r3, #6]
	object1.x=0;
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <main+0x10c>)
 8001480:	2200      	movs	r2, #0
 8001482:	805a      	strh	r2, [r3, #2]
	object1.y=0;
 8001484:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <main+0x10c>)
 8001486:	2200      	movs	r2, #0
 8001488:	809a      	strh	r2, [r3, #4]
	object1.h=5;
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <main+0x10c>)
 800148c:	2205      	movs	r2, #5
 800148e:	80da      	strh	r2, [r3, #6]
	object2.x=90;
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <main+0x110>)
 8001492:	225a      	movs	r2, #90	; 0x5a
 8001494:	805a      	strh	r2, [r3, #2]
	object2.y=0;
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <main+0x110>)
 8001498:	2200      	movs	r2, #0
 800149a:	809a      	strh	r2, [r3, #4]
	object2.h=32;
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <main+0x110>)
 800149e:	2220      	movs	r2, #32
 80014a0:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a2:	f000 fc55 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a6:	f000 f86f 	bl	8001588 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014aa:	f000 f8be 	bl	800162a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f7ff fe99 	bl	80011e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b2:	f7ff fe71 	bl	8001198 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014b6:	f000 fb95 	bl	8001be4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014ba:	f7ff ff01 	bl	80012c0 <MX_I2C1_Init>
  MX_ADC1_Init();
 80014be:	f7ff fd87 	bl	8000fd0 <MX_ADC1_Init>
  MX_RNG_Init();
 80014c2:	f000 fa9f 	bl	8001a04 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_init();
 80014c6:	f7ff f9c9 	bl	800085c <SSD1306_init>
  HAL_RNG_Init(&hrng);
 80014ca:	482c      	ldr	r0, [pc, #176]	; (800157c <main+0x114>)
 80014cc:	f005 fc54 	bl	8006d78 <HAL_RNG_Init>

  //GFX_draw_string(3, 25, (unsigned char *)"***** ***", WHITE, BLACK, 2, 2);
  //SSD1306_draw_pixel(xp, yp, WHITE);

  //SSD1306_display_repaint();
  SSD1306_display_clear();
 80014d0:	f7ff fb2a 	bl	8000b28 <SSD1306_display_clear>
  Draw_Block(bird_x, bird_y);
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <main+0x118>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <main+0x11c>)
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4610      	mov	r0, r2
 80014e6:	f000 f8ce 	bl	8001686 <Draw_Block>
  SSD1306_display_repaint();
 80014ea:	f7ff fd2f 	bl	8000f4c <SSD1306_display_repaint>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Jump();
 80014ee:	f000 fa49 	bl	8001984 <Jump>
	  //Move_Wall();
	  Move_Wall2();
 80014f2:	f000 f8f7 	bl	80016e4 <Move_Wall2>
	  Move_Wall3();
 80014f6:	f000 f947 	bl	8001788 <Move_Wall3>
	  Move_Wall4();
 80014fa:	f000 f997 	bl	800182c <Move_Wall4>



      Bird_Colision(object.x,object.y,object.h,WALL_SIZE);
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <main+0x108>)
 8001500:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001504:	4618      	mov	r0, r3
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <main+0x108>)
 8001508:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800150c:	4619      	mov	r1, r3
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <main+0x108>)
 8001510:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001514:	461a      	mov	r2, r3
 8001516:	230a      	movs	r3, #10
 8001518:	f000 f9da 	bl	80018d0 <Bird_Colision>
      Bird_Colision(object1.x,object1.y,object1.h,WALL_SIZE);
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <main+0x10c>)
 800151e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001522:	4618      	mov	r0, r3
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <main+0x10c>)
 8001526:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800152a:	4619      	mov	r1, r3
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <main+0x10c>)
 800152e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001532:	461a      	mov	r2, r3
 8001534:	230a      	movs	r3, #10
 8001536:	f000 f9cb 	bl	80018d0 <Bird_Colision>
      Bird_Colision(object2.x,object2.y,object2.h,WALL_SIZE);
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <main+0x110>)
 800153c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001540:	4618      	mov	r0, r3
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <main+0x110>)
 8001544:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001548:	4619      	mov	r1, r3
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <main+0x110>)
 800154c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001550:	461a      	mov	r2, r3
 8001552:	230a      	movs	r3, #10
 8001554:	f000 f9bc 	bl	80018d0 <Bird_Colision>
      if(bird_y<1){
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <main+0x11c>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	2b00      	cmp	r3, #0
 8001560:	dc01      	bgt.n	8001566 <main+0xfe>
    	  Game_Over();
 8001562:	f000 f9f3 	bl	800194c <Game_Over>
      }

	   HAL_Delay(100);
 8001566:	2064      	movs	r0, #100	; 0x64
 8001568:	f000 fc6e 	bl	8001e48 <HAL_Delay>
  {
 800156c:	e7bf      	b.n	80014ee <main+0x86>
 800156e:	bf00      	nop
 8001570:	200001e0 	.word	0x200001e0
 8001574:	200001e8 	.word	0x200001e8
 8001578:	200001f0 	.word	0x200001f0
 800157c:	200001f8 	.word	0x200001f8
 8001580:	20000000 	.word	0x20000000
 8001584:	20000002 	.word	0x20000002

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b096      	sub	sp, #88	; 0x58
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2244      	movs	r2, #68	; 0x44
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f006 f992 	bl	80078c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ae:	f004 f8d1 	bl	8005754 <HAL_PWREx_ControlVoltageScaling>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015b8:	f000 fa1e 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015bc:	2302      	movs	r3, #2
 80015be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c6:	2310      	movs	r3, #16
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ca:	2302      	movs	r3, #2
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ce:	2302      	movs	r3, #2
 80015d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015d6:	230a      	movs	r3, #10
 80015d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015da:	2307      	movs	r3, #7
 80015dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015de:	2302      	movs	r3, #2
 80015e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 f908 	bl	8005800 <HAL_RCC_OscConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015f6:	f000 f9ff 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fa:	230f      	movs	r3, #15
 80015fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fe:	2303      	movs	r3, #3
 8001600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	2104      	movs	r1, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fcd0 	bl	8005fb8 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800161e:	f000 f9eb 	bl	80019f8 <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3758      	adds	r7, #88	; 0x58
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b0a2      	sub	sp, #136	; 0x88
 800162e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	463b      	mov	r3, r7
 8001632:	2288      	movs	r2, #136	; 0x88
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f006 f942 	bl	80078c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 800163c:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 8001640:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001642:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001646:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001648:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800164c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800164e:	2302      	movs	r3, #2
 8001650:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001656:	2308      	movs	r3, #8
 8001658:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800165a:	2307      	movs	r3, #7
 800165c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800165e:	2302      	movs	r3, #2
 8001660:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001666:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800166a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fec6 	bl	8006400 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800167a:	f000 f9bd 	bl	80019f8 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3788      	adds	r7, #136	; 0x88
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <Draw_Block>:
SSD1306_draw_fast_vline(x, y-size, size*2,  WHITE);
SSD1306_draw_fast_hline(x-size, y, size*2,  WHITE);
}

void Draw_Block(int16_t x, int16_t y,int16_t h, int16_t w)
{
 8001686:	b590      	push	{r4, r7, lr}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	4604      	mov	r4, r0
 800168e:	4608      	mov	r0, r1
 8001690:	4611      	mov	r1, r2
 8001692:	461a      	mov	r2, r3
 8001694:	4623      	mov	r3, r4
 8001696:	80fb      	strh	r3, [r7, #6]
 8001698:	4603      	mov	r3, r0
 800169a:	80bb      	strh	r3, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	803b      	strh	r3, [r7, #0]
for(int16_t i=x;i<x+w;i++){
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	81fb      	strh	r3, [r7, #14]
 80016a8:	e00e      	b.n	80016c8 <Draw_Block+0x42>
	SSD1306_draw_fast_vline(i, y, h,  WHITE);
 80016aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016b2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80016b6:	2301      	movs	r3, #1
 80016b8:	f7ff fad6 	bl	8000c68 <SSD1306_draw_fast_vline>
for(int16_t i=x;i<x+w;i++){
 80016bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	81fb      	strh	r3, [r7, #14]
 80016c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80016d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016d4:	440b      	add	r3, r1
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dbe7      	blt.n	80016aa <Draw_Block+0x24>
	}
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd90      	pop	{r4, r7, pc}

080016e4 <Move_Wall2>:
Draw_Block(wal_x, wal_y, wal_h, WALL_SIZE);
SSD1306_display_repaint();
}

void Move_Wall2()
{	uint8_t temp=0;
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	2300      	movs	r3, #0
 80016ec:	71fb      	strb	r3, [r7, #7]
	if(object.x>128){
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <Move_Wall2+0x9c>)
 80016f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	dd12      	ble.n	800171e <Move_Wall2+0x3a>
		object.x=0;
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <Move_Wall2+0x9c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	805a      	strh	r2, [r3, #2]
		temp=HAL_RNG_GetRandomNumber(&hrng);
 80016fe:	4821      	ldr	r0, [pc, #132]	; (8001784 <Move_Wall2+0xa0>)
 8001700:	f005 fbe0 	bl	8006ec4 <HAL_RNG_GetRandomNumber>
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
		while(temp>40)
 8001708:	e002      	b.n	8001710 <Move_Wall2+0x2c>
		{
			temp=temp/2;
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	71fb      	strb	r3, [r7, #7]
		while(temp>40)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b28      	cmp	r3, #40	; 0x28
 8001714:	d8f9      	bhi.n	800170a <Move_Wall2+0x26>
		}
		object.h=temp;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	b21a      	sxth	r2, r3
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <Move_Wall2+0x9c>)
 800171c:	80da      	strh	r2, [r3, #6]
	}
	object.x=object.x+1;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <Move_Wall2+0x9c>)
 8001720:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001724:	b29b      	uxth	r3, r3
 8001726:	3301      	adds	r3, #1
 8001728:	b29b      	uxth	r3, r3
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <Move_Wall2+0x9c>)
 800172e:	805a      	strh	r2, [r3, #2]
	Draw_Block(object.x, object.y, object.h, WALL_SIZE);
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <Move_Wall2+0x9c>)
 8001732:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <Move_Wall2+0x9c>)
 8001738:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <Move_Wall2+0x9c>)
 800173e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001742:	230a      	movs	r3, #10
 8001744:	f7ff ff9f 	bl	8001686 <Draw_Block>
	Draw_Block(object.x, object.h+GAP_SIZE, 64-GAP_SIZE-object.h, WALL_SIZE);
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <Move_Wall2+0x9c>)
 800174a:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <Move_Wall2+0x9c>)
 8001750:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001754:	b29b      	uxth	r3, r3
 8001756:	3319      	adds	r3, #25
 8001758:	b29b      	uxth	r3, r3
 800175a:	b219      	sxth	r1, r3
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <Move_Wall2+0x9c>)
 800175e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001762:	b29b      	uxth	r3, r3
 8001764:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001768:	b29b      	uxth	r3, r3
 800176a:	b21a      	sxth	r2, r3
 800176c:	230a      	movs	r3, #10
 800176e:	f7ff ff8a 	bl	8001686 <Draw_Block>
	SSD1306_display_repaint();
 8001772:	f7ff fbeb 	bl	8000f4c <SSD1306_display_repaint>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200001e0 	.word	0x200001e0
 8001784:	200001f8 	.word	0x200001f8

08001788 <Move_Wall3>:
void Move_Wall3()
{	uint8_t temp=0;
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
	if(object1.x>128){
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <Move_Wall3+0x9c>)
 8001794:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001798:	2b80      	cmp	r3, #128	; 0x80
 800179a:	dd12      	ble.n	80017c2 <Move_Wall3+0x3a>
	object1.x=0;
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <Move_Wall3+0x9c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	805a      	strh	r2, [r3, #2]
	temp=HAL_RNG_GetRandomNumber(&hrng);
 80017a2:	4821      	ldr	r0, [pc, #132]	; (8001828 <Move_Wall3+0xa0>)
 80017a4:	f005 fb8e 	bl	8006ec4 <HAL_RNG_GetRandomNumber>
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
			while(temp>40)
 80017ac:	e002      	b.n	80017b4 <Move_Wall3+0x2c>
			{
				temp=temp/2;
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	71fb      	strb	r3, [r7, #7]
			while(temp>40)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b28      	cmp	r3, #40	; 0x28
 80017b8:	d8f9      	bhi.n	80017ae <Move_Wall3+0x26>
			}
			object1.h=temp;
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	b21a      	sxth	r2, r3
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <Move_Wall3+0x9c>)
 80017c0:	80da      	strh	r2, [r3, #6]
}
	object1.x=object1.x+1;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <Move_Wall3+0x9c>)
 80017c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <Move_Wall3+0x9c>)
 80017d2:	805a      	strh	r2, [r3, #2]
	Draw_Block(object1.x, object1.y, object1.h, WALL_SIZE);
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <Move_Wall3+0x9c>)
 80017d6:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <Move_Wall3+0x9c>)
 80017dc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <Move_Wall3+0x9c>)
 80017e2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80017e6:	230a      	movs	r3, #10
 80017e8:	f7ff ff4d 	bl	8001686 <Draw_Block>
	Draw_Block(object1.x, object1.h+GAP_SIZE, 64-GAP_SIZE-object1.h, WALL_SIZE);
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <Move_Wall3+0x9c>)
 80017ee:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <Move_Wall3+0x9c>)
 80017f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3319      	adds	r3, #25
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b219      	sxth	r1, r3
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <Move_Wall3+0x9c>)
 8001802:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001806:	b29b      	uxth	r3, r3
 8001808:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 800180c:	b29b      	uxth	r3, r3
 800180e:	b21a      	sxth	r2, r3
 8001810:	230a      	movs	r3, #10
 8001812:	f7ff ff38 	bl	8001686 <Draw_Block>
	SSD1306_display_repaint();
 8001816:	f7ff fb99 	bl	8000f4c <SSD1306_display_repaint>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200001e8 	.word	0x200001e8
 8001828:	200001f8 	.word	0x200001f8

0800182c <Move_Wall4>:
void Move_Wall4()
{	uint8_t temp=0;
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]
	if(object2.x>128){
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <Move_Wall4+0x9c>)
 8001838:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800183c:	2b80      	cmp	r3, #128	; 0x80
 800183e:	dd12      	ble.n	8001866 <Move_Wall4+0x3a>
	object2.x=0;
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <Move_Wall4+0x9c>)
 8001842:	2200      	movs	r2, #0
 8001844:	805a      	strh	r2, [r3, #2]
	temp=HAL_RNG_GetRandomNumber(&hrng);
 8001846:	4821      	ldr	r0, [pc, #132]	; (80018cc <Move_Wall4+0xa0>)
 8001848:	f005 fb3c 	bl	8006ec4 <HAL_RNG_GetRandomNumber>
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
			while(temp>40)
 8001850:	e002      	b.n	8001858 <Move_Wall4+0x2c>
			{
				temp=temp/2;
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	71fb      	strb	r3, [r7, #7]
			while(temp>40)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b28      	cmp	r3, #40	; 0x28
 800185c:	d8f9      	bhi.n	8001852 <Move_Wall4+0x26>
			}
			object2.h=temp;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <Move_Wall4+0x9c>)
 8001864:	80da      	strh	r2, [r3, #6]
}
	object2.x=object2.x+1;
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <Move_Wall4+0x9c>)
 8001868:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800186c:	b29b      	uxth	r3, r3
 800186e:	3301      	adds	r3, #1
 8001870:	b29b      	uxth	r3, r3
 8001872:	b21a      	sxth	r2, r3
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <Move_Wall4+0x9c>)
 8001876:	805a      	strh	r2, [r3, #2]
	Draw_Block(object2.x, object2.y, object2.h, WALL_SIZE);
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <Move_Wall4+0x9c>)
 800187a:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <Move_Wall4+0x9c>)
 8001880:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <Move_Wall4+0x9c>)
 8001886:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800188a:	230a      	movs	r3, #10
 800188c:	f7ff fefb 	bl	8001686 <Draw_Block>
	Draw_Block(object2.x, object2.h+GAP_SIZE, 64-GAP_SIZE-object2.h, WALL_SIZE);
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <Move_Wall4+0x9c>)
 8001892:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <Move_Wall4+0x9c>)
 8001898:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800189c:	b29b      	uxth	r3, r3
 800189e:	3319      	adds	r3, #25
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b219      	sxth	r1, r3
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <Move_Wall4+0x9c>)
 80018a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	230a      	movs	r3, #10
 80018b6:	f7ff fee6 	bl	8001686 <Draw_Block>
	SSD1306_display_repaint();
 80018ba:	f7ff fb47 	bl	8000f4c <SSD1306_display_repaint>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001f0 	.word	0x200001f0
 80018cc:	200001f8 	.word	0x200001f8

080018d0 <Bird_Colision>:
				  if(yp==0){dir2=0;}
			  }

}
void Bird_Colision(int16_t x, int16_t y,int16_t h, int16_t w)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	80fb      	strh	r3, [r7, #6]
 80018e2:	4603      	mov	r3, r0
 80018e4:	80bb      	strh	r3, [r7, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	807b      	strh	r3, [r7, #2]
 80018ea:	4613      	mov	r3, r2
 80018ec:	803b      	strh	r3, [r7, #0]
	//if((x+w>=bird_x)&((y<=bird_y+BIRD_SIZE)|(y+h>=bird_y))){
	if((x+w>=bird_x)&&(x<=bird_x+BIRD_SIZE)&&((y+h>=bird_y)||(h+GAP_SIZE<=bird_y+BIRD_SIZE))){
 80018ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <Bird_Colision+0x74>)
 80018fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018fe:	4293      	cmp	r3, r2
 8001900:	db1b      	blt.n	800193a <Bird_Colision+0x6a>
 8001902:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <Bird_Colision+0x74>)
 8001908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190c:	330a      	adds	r3, #10
 800190e:	429a      	cmp	r2, r3
 8001910:	dc13      	bgt.n	800193a <Bird_Colision+0x6a>
 8001912:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001916:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800191a:	4413      	add	r3, r2
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <Bird_Colision+0x78>)
 800191e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001922:	4293      	cmp	r3, r2
 8001924:	da07      	bge.n	8001936 <Bird_Colision+0x66>
 8001926:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800192a:	330e      	adds	r3, #14
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <Bird_Colision+0x78>)
 800192e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001932:	4293      	cmp	r3, r2
 8001934:	da01      	bge.n	800193a <Bird_Colision+0x6a>
		Game_Over();
 8001936:	f000 f809 	bl	800194c <Game_Over>
	}
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bd90      	pop	{r4, r7, pc}
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000
 8001948:	20000002 	.word	0x20000002

0800194c <Game_Over>:
void Game_Over()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af04      	add	r7, sp, #16

  		SSD1306_display_clear();
 8001952:	f7ff f8e9 	bl	8000b28 <SSD1306_display_clear>
  		GFX_draw_string(3, 25, (unsigned char *)"GAME OVER", WHITE, BLACK, 2, 2);
 8001956:	2302      	movs	r3, #2
 8001958:	9302      	str	r3, [sp, #8]
 800195a:	2302      	movs	r3, #2
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <Game_Over+0x34>)
 8001966:	2119      	movs	r1, #25
 8001968:	2003      	movs	r0, #3
 800196a:	f7fe fec9 	bl	8000700 <GFX_draw_string>
  		SSD1306_display_repaint();
 800196e:	f7ff faed 	bl	8000f4c <SSD1306_display_repaint>
  		HAL_Delay(1000);
 8001972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001976:	f000 fa67 	bl	8001e48 <HAL_Delay>

}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	08007a4c 	.word	0x08007a4c

08001984 <Jump>:
		SSD1306_display_repaint();
	}
		   bird_x++;
}
void Jump()
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	SSD1306_display_clear();
 8001988:	f7ff f8ce 	bl	8000b28 <SSD1306_display_clear>

	Draw_Block(bird_x, bird_y,BIRD_SIZE,BIRD_SIZE);
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <Jump+0x38>)
 800198e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <Jump+0x3c>)
 8001994:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001998:	230a      	movs	r3, #10
 800199a:	220a      	movs	r2, #10
 800199c:	f7ff fe73 	bl	8001686 <Draw_Block>
	SSD1306_display_repaint();
 80019a0:	f7ff fad4 	bl	8000f4c <SSD1306_display_repaint>
	bird_y--;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <Jump+0x3c>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <Jump+0x3c>)
 80019b4:	801a      	strh	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000002 	.word	0x20000002

080019c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13){
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d4:	d108      	bne.n	80019e8 <HAL_GPIO_EXTI_Callback+0x24>

		bird_y=bird_y+5;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80019d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3305      	adds	r3, #5
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80019e6:	801a      	strh	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);



	}
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000002 	.word	0x20000002

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_RNG_Init+0x20>)
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <MX_RNG_Init+0x24>)
 8001a0c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_RNG_Init+0x20>)
 8001a10:	f005 f9b2 	bl	8006d78 <HAL_RNG_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001a1a:	f7ff ffed 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200001f8 	.word	0x200001f8
 8001a28:	50060800 	.word	0x50060800

08001a2c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_RNG_MspInit+0x38>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10b      	bne.n	8001a56 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RNG_MspInit+0x3c>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RNG_MspInit+0x3c>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_RNG_MspInit+0x3c>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	50060800 	.word	0x50060800
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6593      	str	r3, [r2, #88]	; 0x58
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_MspInit+0x44>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b00:	f000 f982 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <DMA1_Channel1_IRQHandler+0x10>)
 8001b0e:	f001 fbd2 	bl	80032b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200000fc 	.word	0x200000fc

08001b1c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <DMA1_Channel6_IRQHandler+0x10>)
 8001b22:	f001 fbc8 	bl	80032b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000198 	.word	0x20000198

08001b30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <I2C1_EV_IRQHandler+0x10>)
 8001b36:	f002 f90f 	bl	8003d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000144 	.word	0x20000144

08001b44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b4c:	f001 fe62 	bl	8003814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f005 fe6a 	bl	800785c <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20018000 	.word	0x20018000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	20000208 	.word	0x20000208
 8001bbc:	200002a8 	.word	0x200002a8

08001bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <MX_USART2_UART_Init+0x5c>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c28:	f005 f961 	bl	8006eee <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c32:	f7ff fee1 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000020c 	.word	0x2000020c
 8001c40:	40004400 	.word	0x40004400

08001c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ac      	sub	sp, #176	; 0xb0
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2288      	movs	r2, #136	; 0x88
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fe2b 	bl	80078c0 <memset>
  if(uartHandle->Instance==USART2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <HAL_UART_MspInit+0xb0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d13b      	bne.n	8001cec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 fbbd 	bl	8006400 <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c8c:	f7ff feb4 	bl	80019f8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_UART_MspInit+0xb4>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f001 fbd2 	bl	8003490 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cec:	bf00      	nop
 8001cee:	37b0      	adds	r7, #176	; 0xb0
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40004400 	.word	0x40004400
 8001cf8:	40021000 	.word	0x40021000

08001cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d00:	f7ff ff5e 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d06:	490d      	ldr	r1, [pc, #52]	; (8001d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <LoopForever+0xe>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	; (8001d48 <LoopForever+0x16>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f005 fd9d 	bl	8007868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2e:	f7ff fb9b 	bl	8001468 <main>

08001d32 <LoopForever>:

LoopForever:
    b LoopForever
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d40:	08007fc0 	.word	0x08007fc0
  ldr r2, =_sbss
 8001d44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d48:	200002a4 	.word	0x200002a4

08001d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_2_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_Init+0x3c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_Init+0x3c>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d66:	2003      	movs	r0, #3
 8001d68:	f001 f90a 	bl	8002f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 f80f 	bl	8001d90 <HAL_InitTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	e001      	b.n	8001d82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7e:	f7ff fe75 	bl	8001a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_InitTick+0x6c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_InitTick+0x70>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_InitTick+0x6c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 f915 	bl	8002fea <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d809      	bhi.n	8001de0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f001 f8df 	bl	8002f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_InitTick+0x74>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e007      	b.n	8001df0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e004      	b.n	8001df0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e001      	b.n	8001df0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	20000004 	.word	0x20000004
 8001e04:	20000008 	.word	0x20000008

08001e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x20>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x24>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_IncTick+0x24>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	2000000c 	.word	0x2000000c
 8001e2c:	20000290 	.word	0x20000290

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_GetTick+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000290 	.word	0x20000290

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ffee 	bl	8001e30 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6e:	bf00      	nop
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000000c 	.word	0x2000000c

08001e90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3360      	adds	r3, #96	; 0x60
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <LL_ADC_SetOffset+0x44>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f30:	bf00      	nop
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	03fff000 	.word	0x03fff000

08001f40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3360      	adds	r3, #96	; 0x60
 8001f4e:	461a      	mov	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3360      	adds	r3, #96	; 0x60
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3330      	adds	r3, #48	; 0x30
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	4413      	add	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	211f      	movs	r1, #31
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	f003 011f 	and.w	r1, r3, #31
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b087      	sub	sp, #28
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	3314      	adds	r3, #20
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0e5b      	lsrs	r3, r3, #25
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	4413      	add	r3, r2
 8002018:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	0d1b      	lsrs	r3, r3, #20
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2107      	movs	r1, #7
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	0d1b      	lsrs	r3, r3, #20
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	431a      	orrs	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0318 	and.w	r3, r3, #24
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002074:	40d9      	lsrs	r1, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	400b      	ands	r3, r1
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	0007ffff 	.word	0x0007ffff

08002098 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6093      	str	r3, [r2, #8]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d0:	d101      	bne.n	80020d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002120:	d101      	bne.n	8002126 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <LL_ADC_IsEnabled+0x18>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <LL_ADC_IsEnabled+0x1a>
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d101      	bne.n	8002172 <LL_ADC_REG_IsConversionOngoing+0x18>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b08      	cmp	r3, #8
 8002192:	d101      	bne.n	8002198 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e136      	b.n	8002430 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7fe ff73 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff67 	bl	80020bc <LL_ADC_IsDeepPowerDownEnabled>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff4d 	bl	8002098 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff82 	bl	800210c <LL_ADC_IsInternalRegulatorEnabled>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff66 	bl	80020e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002218:	4b87      	ldr	r3, [pc, #540]	; (8002438 <HAL_ADC_Init+0x290>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	4a87      	ldr	r2, [pc, #540]	; (800243c <HAL_ADC_Init+0x294>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	3301      	adds	r3, #1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800222c:	e002      	b.n	8002234 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3b01      	subs	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff64 	bl	800210c <LL_ADC_IsInternalRegulatorEnabled>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10d      	bne.n	8002266 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f043 0210 	orr.w	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff75 	bl	800215a <LL_ADC_REG_IsConversionOngoing>
 8002270:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 80cf 	bne.w	800241e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80cb 	bne.w	800241e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002290:	f043 0202 	orr.w	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff49 	bl	8002134 <LL_ADC_IsEnabled>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d115      	bne.n	80022d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a8:	4865      	ldr	r0, [pc, #404]	; (8002440 <HAL_ADC_Init+0x298>)
 80022aa:	f7ff ff43 	bl	8002134 <LL_ADC_IsEnabled>
 80022ae:	4604      	mov	r4, r0
 80022b0:	4864      	ldr	r0, [pc, #400]	; (8002444 <HAL_ADC_Init+0x29c>)
 80022b2:	f7ff ff3f 	bl	8002134 <LL_ADC_IsEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	431c      	orrs	r4, r3
 80022ba:	4863      	ldr	r0, [pc, #396]	; (8002448 <HAL_ADC_Init+0x2a0>)
 80022bc:	f7ff ff3a 	bl	8002134 <LL_ADC_IsEnabled>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4323      	orrs	r3, r4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4619      	mov	r1, r3
 80022ce:	485f      	ldr	r0, [pc, #380]	; (800244c <HAL_ADC_Init+0x2a4>)
 80022d0:	f7ff fdde 	bl	8001e90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e5b      	ldrb	r3, [r3, #25]
 80022d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d106      	bne.n	8002310 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	3b01      	subs	r3, #1
 8002308:	045b      	lsls	r3, r3, #17
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_ADC_Init+0x2a8>)
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	430b      	orrs	r3, r1
 800233e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff08 	bl	800215a <LL_ADC_REG_IsConversionOngoing>
 800234a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff15 	bl	8002180 <LL_ADC_INJ_IsConversionOngoing>
 8002356:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d13d      	bne.n	80023da <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d13a      	bne.n	80023da <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002368:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002370:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002380:	f023 0302 	bic.w	r3, r3, #2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	69b9      	ldr	r1, [r7, #24]
 800238a:	430b      	orrs	r3, r1
 800238c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002394:	2b01      	cmp	r3, #1
 8002396:	d118      	bne.n	80023ca <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ae:	4311      	orrs	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023b4:	4311      	orrs	r1, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ba:	430a      	orrs	r2, r1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	e007      	b.n	80023da <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10c      	bne.n	80023fc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f023 010f 	bic.w	r1, r3, #15
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
 80023fa:	e007      	b.n	800240c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 020f 	bic.w	r2, r2, #15
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f023 0303 	bic.w	r3, r3, #3
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
 800241c:	e007      	b.n	800242e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800242e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3724      	adds	r7, #36	; 0x24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	20000004 	.word	0x20000004
 800243c:	053e2d63 	.word	0x053e2d63
 8002440:	50040000 	.word	0x50040000
 8002444:	50040100 	.word	0x50040100
 8002448:	50040200 	.word	0x50040200
 800244c:	50040300 	.word	0x50040300
 8002450:	fff0c007 	.word	0xfff0c007

08002454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0b6      	sub	sp, #216	; 0xd8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x22>
 8002472:	2302      	movs	r3, #2
 8002474:	e3c7      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x7b2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fe69 	bl	800215a <LL_ADC_REG_IsConversionOngoing>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 83a8 	bne.w	8002be0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d824      	bhi.n	80024e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	3b02      	subs	r3, #2
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d81b      	bhi.n	80024da <HAL_ADC_ConfigChannel+0x86>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_ADC_ConfigChannel+0x54>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	080024c1 	.word	0x080024c1
 80024b0:	080024c9 	.word	0x080024c9
 80024b4:	080024d1 	.word	0x080024d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	220c      	movs	r2, #12
 80024bc:	605a      	str	r2, [r3, #4]
          break;
 80024be:	e011      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2212      	movs	r2, #18
 80024c4:	605a      	str	r2, [r3, #4]
          break;
 80024c6:	e00d      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2218      	movs	r2, #24
 80024cc:	605a      	str	r2, [r3, #4]
          break;
 80024ce:	e009      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d6:	605a      	str	r2, [r3, #4]
          break;
 80024d8:	e004      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2206      	movs	r2, #6
 80024de:	605a      	str	r2, [r3, #4]
          break;
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff fd56 	bl	8001fa2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fe2d 	bl	800215a <LL_ADC_REG_IsConversionOngoing>
 8002500:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fe39 	bl	8002180 <LL_ADC_INJ_IsConversionOngoing>
 800250e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002512:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 81a6 	bne.w	8002868 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800251c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 81a1 	bne.w	8002868 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	461a      	mov	r2, r3
 8002534:	f7ff fd61 	bl	8001ffa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	08db      	lsrs	r3, r3, #3
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d00a      	beq.n	8002570 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6919      	ldr	r1, [r3, #16]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800256a:	f7ff fcc5 	bl	8001ef8 <LL_ADC_SetOffset>
 800256e:	e17b      	b.n	8002868 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fce2 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <HAL_ADC_ConfigChannel+0x148>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fcd7 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 021f 	and.w	r2, r3, #31
 800259a:	e01e      	b.n	80025da <HAL_ADC_ConfigChannel+0x186>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fccc 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80025ca:	2320      	movs	r3, #32
 80025cc:	e004      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80025ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x19e>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0e9b      	lsrs	r3, r3, #26
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	e018      	b.n	8002624 <HAL_ADC_ConfigChannel+0x1d0>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800260a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800260e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e004      	b.n	8002624 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800261a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002624:	429a      	cmp	r2, r3
 8002626:	d106      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fc9b 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fc7f 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x20e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fc74 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	e01e      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x24c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fc69 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002680:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e004      	b.n	800269e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x264>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	e018      	b.n	80026ea <HAL_ADC_ConfigChannel+0x296>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e004      	b.n	80026ea <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80026e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d106      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fc38 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fc1c 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x2d4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fc11 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	e01e      	b.n	8002766 <HAL_ADC_ConfigChannel+0x312>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fc06 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800274a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800274e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e004      	b.n	8002764 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800275a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_ConfigChannel+0x32a>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	e016      	b.n	80027ac <HAL_ADC_ConfigChannel+0x358>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e004      	b.n	80027ac <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80027a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fbd7 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2103      	movs	r1, #3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fbbb 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x396>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2103      	movs	r1, #3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fbb0 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	e017      	b.n	800281a <HAL_ADC_ConfigChannel+0x3c6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2103      	movs	r1, #3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fba5 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002804:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x3de>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	e011      	b.n	8002856 <HAL_ADC_ConfigChannel+0x402>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002842:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800284a:	2320      	movs	r3, #32
 800284c:	e003      	b.n	8002856 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002856:	429a      	cmp	r2, r3
 8002858:	d106      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2200      	movs	r2, #0
 8002860:	2103      	movs	r1, #3
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fb82 	bl	8001f6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fc61 	bl	8002134 <LL_ADC_IsEnabled>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 813f 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f7ff fbe2 	bl	8002050 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a8e      	ldr	r2, [pc, #568]	; (8002acc <HAL_ADC_ConfigChannel+0x678>)
 8002892:	4293      	cmp	r3, r2
 8002894:	f040 8130 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x46c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e019      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x4a0>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e003      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80028dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	bf94      	ite	ls
 80028ee:	2301      	movls	r3, #1
 80028f0:	2300      	movhi	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d079      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x4c0>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	3301      	adds	r3, #1
 800290c:	069b      	lsls	r3, r3, #26
 800290e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002912:	e015      	b.n	8002940 <HAL_ADC_ConfigChannel+0x4ec>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002924:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e003      	b.n	8002938 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3301      	adds	r3, #1
 800293a:	069b      	lsls	r3, r3, #26
 800293c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x50c>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0e9b      	lsrs	r3, r3, #26
 8002952:	3301      	adds	r3, #1
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	e017      	b.n	8002990 <HAL_ADC_ConfigChannel+0x53c>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002978:	2320      	movs	r3, #32
 800297a:	e003      	b.n	8002984 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800297c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	ea42 0103 	orr.w	r1, r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x562>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	3301      	adds	r3, #1
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	051b      	lsls	r3, r3, #20
 80029b4:	e018      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x594>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e003      	b.n	80029da <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80029d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e8:	430b      	orrs	r3, r1
 80029ea:	e080      	b.n	8002aee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x5b4>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	3301      	adds	r3, #1
 8002a00:	069b      	lsls	r3, r3, #26
 8002a02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a06:	e015      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e003      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x600>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	3301      	adds	r3, #1
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	e017      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x630>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	61fb      	str	r3, [r7, #28]
  return result;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e003      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	ea42 0103 	orr.w	r1, r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10d      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x65c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b1e      	subs	r3, #30
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aae:	e01d      	b.n	8002aec <HAL_ADC_ConfigChannel+0x698>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	613b      	str	r3, [r7, #16]
  return result;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e005      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x684>
 8002acc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b1e      	subs	r3, #30
 8002ae6:	051b      	lsls	r3, r3, #20
 8002ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aec:	430b      	orrs	r3, r1
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	6892      	ldr	r2, [r2, #8]
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7ff fa81 	bl	8001ffa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_ADC_ConfigChannel+0x7bc>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d07a      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b04:	4843      	ldr	r0, [pc, #268]	; (8002c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b06:	f7ff f9e9 	bl	8001edc <LL_ADC_GetCommonPathInternalCh>
 8002b0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d12c      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d126      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a3c      	ldr	r2, [pc, #240]	; (8002c1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADC_ConfigChannel+0x6e4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3b      	ldr	r2, [pc, #236]	; (8002c20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d15d      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b40:	4619      	mov	r1, r3
 8002b42:	4834      	ldr	r0, [pc, #208]	; (8002c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b44:	f7ff f9b7 	bl	8001eb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	4a36      	ldr	r2, [pc, #216]	; (8002c28 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f9      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b70:	e040      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d118      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x75a>
 8002b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d112      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x748>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d12d      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	481b      	ldr	r0, [pc, #108]	; (8002c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ba8:	f7ff f985 	bl	8001eb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bac:	e024      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d120      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d11a      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d115      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480e      	ldr	r0, [pc, #56]	; (8002c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bda:	f7ff f96c 	bl	8001eb6 <LL_ADC_SetCommonPathInternalCh>
 8002bde:	e00c      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bf2:	e002      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf4:	bf00      	nop
 8002bf6:	e000      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c02:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	37d8      	adds	r7, #216	; 0xd8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	80080000 	.word	0x80080000
 8002c14:	50040300 	.word	0x50040300
 8002c18:	c7520000 	.word	0xc7520000
 8002c1c:	50040000 	.word	0x50040000
 8002c20:	50040200 	.word	0x50040200
 8002c24:	20000004 	.word	0x20000004
 8002c28:	053e2d63 	.word	0x053e2d63
 8002c2c:	cb840000 	.word	0xcb840000
 8002c30:	80000001 	.word	0x80000001

08002c34 <LL_ADC_IsEnabled>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <LL_ADC_IsEnabled+0x18>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <LL_ADC_IsEnabled+0x1a>
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_REG_IsConversionOngoing>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d101      	bne.n	8002c72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b09f      	sub	sp, #124	; 0x7c
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e093      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002caa:	2300      	movs	r3, #0
 8002cac:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a47      	ldr	r2, [pc, #284]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d102      	bne.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	e001      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e072      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ffb9 	bl	8002c5a <LL_ADC_REG_IsConversionOngoing>
 8002ce8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ffb3 	bl	8002c5a <LL_ADC_REG_IsConversionOngoing>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d154      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d151      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d02:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02c      	beq.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d1e:	035b      	lsls	r3, r3, #13
 8002d20:	430b      	orrs	r3, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d28:	4829      	ldr	r0, [pc, #164]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d2a:	f7ff ff83 	bl	8002c34 <LL_ADC_IsEnabled>
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4828      	ldr	r0, [pc, #160]	; (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d32:	f7ff ff7f 	bl	8002c34 <LL_ADC_IsEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	431c      	orrs	r4, r3
 8002d3a:	4828      	ldr	r0, [pc, #160]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d3c:	f7ff ff7a 	bl	8002c34 <LL_ADC_IsEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4323      	orrs	r3, r4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d137      	bne.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d50:	f023 030f 	bic.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	6811      	ldr	r1, [r2, #0]
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	6892      	ldr	r2, [r2, #8]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d62:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d64:	e028      	b.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d70:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d72:	4817      	ldr	r0, [pc, #92]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d74:	f7ff ff5e 	bl	8002c34 <LL_ADC_IsEnabled>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	4816      	ldr	r0, [pc, #88]	; (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d7c:	f7ff ff5a 	bl	8002c34 <LL_ADC_IsEnabled>
 8002d80:	4603      	mov	r3, r0
 8002d82:	431c      	orrs	r4, r3
 8002d84:	4815      	ldr	r0, [pc, #84]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d86:	f7ff ff55 	bl	8002c34 <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4323      	orrs	r3, r4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d112      	bne.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d9a:	f023 030f 	bic.w	r3, r3, #15
 8002d9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002da0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da2:	e009      	b.n	8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002db6:	e000      	b.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002db8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	377c      	adds	r7, #124	; 0x7c
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	50040000 	.word	0x50040000
 8002dd4:	50040100 	.word	0x50040100
 8002dd8:	50040300 	.word	0x50040300
 8002ddc:	50040200 	.word	0x50040200

08002de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60d3      	str	r3, [r2, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <__NVIC_GetPriorityGrouping+0x18>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	f003 0307 	and.w	r3, r3, #7
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	db0b      	blt.n	8002e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	4907      	ldr	r1, [pc, #28]	; (8002e7c <__NVIC_EnableIRQ+0x38>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2001      	movs	r0, #1
 8002e66:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100

08002e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db0a      	blt.n	8002eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	490c      	ldr	r1, [pc, #48]	; (8002ecc <__NVIC_SetPriority+0x4c>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea8:	e00a      	b.n	8002ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <__NVIC_SetPriority+0x50>)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	761a      	strb	r2, [r3, #24]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000e100 	.word	0xe000e100
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f1c3 0307 	rsb	r3, r3, #7
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf28      	it	cs
 8002ef2:	2304      	movcs	r3, #4
 8002ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d902      	bls.n	8002f04 <NVIC_EncodePriority+0x30>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3b03      	subs	r3, #3
 8002f02:	e000      	b.n	8002f06 <NVIC_EncodePriority+0x32>
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	4313      	orrs	r3, r2
         );
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f4c:	d301      	bcc.n	8002f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00f      	b.n	8002f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <SysTick_Config+0x40>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f7ff ff8e 	bl	8002e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <SysTick_Config+0x40>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <SysTick_Config+0x40>)
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	e000e010 	.word	0xe000e010

08002f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff29 	bl	8002de0 <__NVIC_SetPriorityGrouping>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff3e 	bl	8002e28 <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff8e 	bl	8002ed4 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5d 	bl	8002e80 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff31 	bl	8002e44 <__NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ffa2 	bl	8002f3c <SysTick_Config>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e098      	b.n	8003148 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_DMA_Init+0x150>)
 800301e:	429a      	cmp	r2, r3
 8003020:	d80f      	bhi.n	8003042 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b4b      	ldr	r3, [pc, #300]	; (8003158 <HAL_DMA_Init+0x154>)
 800302a:	4413      	add	r3, r2
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <HAL_DMA_Init+0x158>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	009a      	lsls	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a48      	ldr	r2, [pc, #288]	; (8003160 <HAL_DMA_Init+0x15c>)
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
 8003040:	e00e      	b.n	8003060 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_DMA_Init+0x160>)
 800304a:	4413      	add	r3, r2
 800304c:	4a43      	ldr	r2, [pc, #268]	; (800315c <HAL_DMA_Init+0x158>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a42      	ldr	r2, [pc, #264]	; (8003168 <HAL_DMA_Init+0x164>)
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ba:	d039      	beq.n	8003130 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_DMA_Init+0x15c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d11a      	bne.n	80030fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030c6:	4b29      	ldr	r3, [pc, #164]	; (800316c <HAL_DMA_Init+0x168>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f003 031c 	and.w	r3, r3, #28
 80030d2:	210f      	movs	r1, #15
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	4924      	ldr	r1, [pc, #144]	; (800316c <HAL_DMA_Init+0x168>)
 80030dc:	4013      	ands	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_DMA_Init+0x168>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f003 031c 	and.w	r3, r3, #28
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	491d      	ldr	r1, [pc, #116]	; (800316c <HAL_DMA_Init+0x168>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
 80030fa:	e019      	b.n	8003130 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030fc:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <HAL_DMA_Init+0x16c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	f003 031c 	and.w	r3, r3, #28
 8003108:	210f      	movs	r1, #15
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	4917      	ldr	r1, [pc, #92]	; (8003170 <HAL_DMA_Init+0x16c>)
 8003112:	4013      	ands	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_DMA_Init+0x16c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f003 031c 	and.w	r3, r3, #28
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	4911      	ldr	r1, [pc, #68]	; (8003170 <HAL_DMA_Init+0x16c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40020407 	.word	0x40020407
 8003158:	bffdfff8 	.word	0xbffdfff8
 800315c:	cccccccd 	.word	0xcccccccd
 8003160:	40020000 	.word	0x40020000
 8003164:	bffdfbf8 	.word	0xbffdfbf8
 8003168:	40020400 	.word	0x40020400
 800316c:	400200a8 	.word	0x400200a8
 8003170:	400204a8 	.word	0x400204a8

08003174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_DMA_Start_IT+0x20>
 8003190:	2302      	movs	r3, #2
 8003192:	e04b      	b.n	800322c <HAL_DMA_Start_IT+0xb8>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d13a      	bne.n	800321e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f92f 	bl	8003430 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 020e 	orr.w	r2, r2, #14
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e00f      	b.n	800320c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0204 	bic.w	r2, r2, #4
 80031fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 020a 	orr.w	r2, r2, #10
 800320a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e005      	b.n	800322a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003226:	2302      	movs	r3, #2
 8003228:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d005      	beq.n	8003258 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2204      	movs	r2, #4
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e029      	b.n	80032ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 020e 	bic.w	r2, r2, #14
 8003266:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f003 021c 	and.w	r2, r3, #28
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f202 	lsl.w	r2, r1, r2
 800328a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
    }
  }
  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f003 031c 	and.w	r3, r3, #28
 80032d6:	2204      	movs	r2, #4
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d026      	beq.n	8003330 <HAL_DMA_IRQHandler+0x7a>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d021      	beq.n	8003330 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0204 	bic.w	r2, r2, #4
 8003308:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f003 021c 	and.w	r2, r3, #28
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2104      	movs	r1, #4
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	2b00      	cmp	r3, #0
 8003324:	d071      	beq.n	800340a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800332e:	e06c      	b.n	800340a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f003 031c 	and.w	r3, r3, #28
 8003338:	2202      	movs	r2, #2
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02e      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xec>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d029      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 020a 	bic.w	r2, r2, #10
 800336a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 021c 	and.w	r2, r3, #28
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2102      	movs	r1, #2
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d038      	beq.n	800340a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033a0:	e033      	b.n	800340a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f003 031c 	and.w	r3, r3, #28
 80033aa:	2208      	movs	r2, #8
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d02a      	beq.n	800340c <HAL_DMA_IRQHandler+0x156>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d025      	beq.n	800340c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 020e 	bic.w	r2, r2, #14
 80033ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f003 021c 	and.w	r2, r3, #28
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800340a:	bf00      	nop
 800340c:	bf00      	nop
}
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003422:	b2db      	uxtb	r3, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f003 021c 	and.w	r2, r3, #28
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b10      	cmp	r3, #16
 8003460:	d108      	bne.n	8003474 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003472:	e007      	b.n	8003484 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800349e:	e17f      	b.n	80037a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	4013      	ands	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8171 	beq.w	800379a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d005      	beq.n	80034d0 <HAL_GPIO_Init+0x40>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d130      	bne.n	8003532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003506:	2201      	movs	r2, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 0201 	and.w	r2, r3, #1
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b03      	cmp	r3, #3
 800353c:	d118      	bne.n	8003570 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003544:	2201      	movs	r2, #1
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	f003 0201 	and.w	r2, r3, #1
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b03      	cmp	r3, #3
 800357a:	d017      	beq.n	80035ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2203      	movs	r2, #3
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d123      	bne.n	8003600 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	08da      	lsrs	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3208      	adds	r2, #8
 80035c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	220f      	movs	r2, #15
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	6939      	ldr	r1, [r7, #16]
 80035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0203 	and.w	r2, r3, #3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80ac 	beq.w	800379a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <HAL_GPIO_Init+0x330>)
 8003644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003646:	4a5e      	ldr	r2, [pc, #376]	; (80037c0 <HAL_GPIO_Init+0x330>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6613      	str	r3, [r2, #96]	; 0x60
 800364e:	4b5c      	ldr	r3, [pc, #368]	; (80037c0 <HAL_GPIO_Init+0x330>)
 8003650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800365a:	4a5a      	ldr	r2, [pc, #360]	; (80037c4 <HAL_GPIO_Init+0x334>)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	3302      	adds	r3, #2
 8003662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	220f      	movs	r2, #15
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003684:	d025      	beq.n	80036d2 <HAL_GPIO_Init+0x242>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4f      	ldr	r2, [pc, #316]	; (80037c8 <HAL_GPIO_Init+0x338>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <HAL_GPIO_Init+0x23e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4e      	ldr	r2, [pc, #312]	; (80037cc <HAL_GPIO_Init+0x33c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d019      	beq.n	80036ca <HAL_GPIO_Init+0x23a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <HAL_GPIO_Init+0x340>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_GPIO_Init+0x236>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a4c      	ldr	r2, [pc, #304]	; (80037d4 <HAL_GPIO_Init+0x344>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00d      	beq.n	80036c2 <HAL_GPIO_Init+0x232>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4b      	ldr	r2, [pc, #300]	; (80037d8 <HAL_GPIO_Init+0x348>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_GPIO_Init+0x22e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <HAL_GPIO_Init+0x34c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_GPIO_Init+0x22a>
 80036b6:	2306      	movs	r3, #6
 80036b8:	e00c      	b.n	80036d4 <HAL_GPIO_Init+0x244>
 80036ba:	2307      	movs	r3, #7
 80036bc:	e00a      	b.n	80036d4 <HAL_GPIO_Init+0x244>
 80036be:	2305      	movs	r3, #5
 80036c0:	e008      	b.n	80036d4 <HAL_GPIO_Init+0x244>
 80036c2:	2304      	movs	r3, #4
 80036c4:	e006      	b.n	80036d4 <HAL_GPIO_Init+0x244>
 80036c6:	2303      	movs	r3, #3
 80036c8:	e004      	b.n	80036d4 <HAL_GPIO_Init+0x244>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e002      	b.n	80036d4 <HAL_GPIO_Init+0x244>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_GPIO_Init+0x244>
 80036d2:	2300      	movs	r3, #0
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	f002 0203 	and.w	r2, r2, #3
 80036da:	0092      	lsls	r2, r2, #2
 80036dc:	4093      	lsls	r3, r2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036e4:	4937      	ldr	r1, [pc, #220]	; (80037c4 <HAL_GPIO_Init+0x334>)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_GPIO_Init+0x350>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003716:	4a32      	ldr	r2, [pc, #200]	; (80037e0 <HAL_GPIO_Init+0x350>)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800371c:	4b30      	ldr	r3, [pc, #192]	; (80037e0 <HAL_GPIO_Init+0x350>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003740:	4a27      	ldr	r2, [pc, #156]	; (80037e0 <HAL_GPIO_Init+0x350>)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <HAL_GPIO_Init+0x350>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	43db      	mvns	r3, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_GPIO_Init+0x350>)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_GPIO_Init+0x350>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003794:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <HAL_GPIO_Init+0x350>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3301      	adds	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f47f ae78 	bne.w	80034a0 <HAL_GPIO_Init+0x10>
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40010000 	.word	0x40010000
 80037c8:	48000400 	.word	0x48000400
 80037cc:	48000800 	.word	0x48000800
 80037d0:	48000c00 	.word	0x48000c00
 80037d4:	48001000 	.word	0x48001000
 80037d8:	48001400 	.word	0x48001400
 80037dc:	48001800 	.word	0x48001800
 80037e0:	40010400 	.word	0x40010400

080037e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	4613      	mov	r3, r2
 80037f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003800:	e002      	b.n	8003808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800382a:	4a05      	ldr	r2, [pc, #20]	; (8003840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe f8c6 	bl	80019c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40010400 	.word	0x40010400

08003844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e081      	b.n	800395a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fd68 	bl	8001340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	; 0x24
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003894:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	e006      	b.n	80038cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d104      	bne.n	80038de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003900:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69d9      	ldr	r1, [r3, #28]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1a      	ldr	r2, [r3, #32]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4603      	mov	r3, r0
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	460b      	mov	r3, r1
 8003978:	813b      	strh	r3, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b20      	cmp	r3, #32
 8003988:	f040 80f9 	bne.w	8003b7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_I2C_Mem_Write+0x34>
 8003992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0ed      	b.n	8003b80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_I2C_Mem_Write+0x4e>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e0e6      	b.n	8003b80 <HAL_I2C_Mem_Write+0x21c>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039ba:	f7fe fa39 	bl	8001e30 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2319      	movs	r3, #25
 80039c6:	2201      	movs	r2, #1
 80039c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f001 fb78 	bl	80050c2 <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0d1      	b.n	8003b80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2221      	movs	r2, #33	; 0x21
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a04:	88f8      	ldrh	r0, [r7, #6]
 8003a06:	893a      	ldrh	r2, [r7, #8]
 8003a08:	8979      	ldrh	r1, [r7, #10]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	4603      	mov	r3, r0
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fe1b 	bl	8004650 <I2C_RequestMemoryWrite>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0a9      	b.n	8003b80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2bff      	cmp	r3, #255	; 0xff
 8003a34:	d90e      	bls.n	8003a54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	22ff      	movs	r2, #255	; 0xff
 8003a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	8979      	ldrh	r1, [r7, #10]
 8003a44:	2300      	movs	r3, #0
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f001 fce1 	bl	8005414 <I2C_TransferConfig>
 8003a52:	e00f      	b.n	8003a74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	8979      	ldrh	r1, [r7, #10]
 8003a66:	2300      	movs	r3, #0
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f001 fcd0 	bl	8005414 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f001 fb62 	bl	8005142 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e07b      	b.n	8003b80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d034      	beq.n	8003b2c <HAL_I2C_Mem_Write+0x1c8>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d130      	bne.n	8003b2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2180      	movs	r1, #128	; 0x80
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f001 faf4 	bl	80050c2 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e04d      	b.n	8003b80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2bff      	cmp	r3, #255	; 0xff
 8003aec:	d90e      	bls.n	8003b0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	22ff      	movs	r2, #255	; 0xff
 8003af2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	8979      	ldrh	r1, [r7, #10]
 8003afc:	2300      	movs	r3, #0
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f001 fc85 	bl	8005414 <I2C_TransferConfig>
 8003b0a:	e00f      	b.n	8003b2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	8979      	ldrh	r1, [r7, #10]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f001 fc74 	bl	8005414 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d19e      	bne.n	8003a74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f001 fb41 	bl	80051c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e01a      	b.n	8003b80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_I2C_Mem_Write+0x224>)
 8003b5e:	400b      	ands	r3, r1
 8003b60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	fe00e800 	.word	0xfe00e800

08003b8c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	817b      	strh	r3, [r7, #10]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	813b      	strh	r3, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	f040 80c3 	bne.w	8003d3a <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_I2C_Mem_Write_DMA+0x34>
 8003bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0b7      	b.n	8003d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bda:	d101      	bne.n	8003be0 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0ad      	b.n	8003d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Mem_Write_DMA+0x62>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e0a6      	b.n	8003d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2221      	movs	r2, #33	; 0x21
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a3a      	ldr	r2, [r7, #32]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8003c1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a49      	ldr	r2, [pc, #292]	; (8003d48 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8003c24:	897a      	ldrh	r2, [r7, #10]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2bff      	cmp	r3, #255	; 0xff
 8003c32:	d903      	bls.n	8003c3c <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c3a:	e004      	b.n	8003c46 <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d109      	bne.n	8003c60 <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4c:	893b      	ldrh	r3, [r7, #8]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5c:	651a      	str	r2, [r3, #80]	; 0x50
 8003c5e:	e00b      	b.n	8003c78 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c60:	893b      	ldrh	r3, [r7, #8]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003c6e:	893b      	ldrh	r3, [r7, #8]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmatx != NULL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	4a30      	ldr	r2, [pc, #192]	; (8003d50 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8003c8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3328      	adds	r3, #40	; 0x28
 8003cac:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003cb2:	f7ff fa5f 	bl	8003174 <HAL_DMA_Start_IT>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d128      	bne.n	8003d12 <HAL_I2C_Mem_Write_DMA+0x186>
 8003cc0:	e013      	b.n	8003cea <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e028      	b.n	8003d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f001 fb8b 	bl	8005414 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d06:	2101      	movs	r1, #1
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f001 fbb5 	bl	8005478 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e014      	b.n	8003d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f043 0210 	orr.w	r2, r3, #16
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	ffff0000 	.word	0xffff0000
 8003d48:	08004249 	.word	0x08004249
 8003d4c:	08004fc3 	.word	0x08004fc3
 8003d50:	08005059 	.word	0x08005059
 8003d54:	80002000 	.word	0x80002000

08003d58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
  }
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
 8003de8:	4613      	mov	r3, r2
 8003dea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <I2C_Slave_ISR_IT+0x24>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0ec      	b.n	800405a <I2C_Slave_ISR_IT+0x1fe>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d009      	beq.n	8003ea8 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003ea0:	6939      	ldr	r1, [r7, #16]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fe12 	bl	8004acc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d04d      	beq.n	8003f50 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d047      	beq.n	8003f50 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d128      	bne.n	8003f1c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b28      	cmp	r3, #40	; 0x28
 8003ed4:	d108      	bne.n	8003ee8 <I2C_Slave_ISR_IT+0x8c>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003edc:	d104      	bne.n	8003ee8 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ede:	6939      	ldr	r1, [r7, #16]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fefd 	bl	8004ce0 <I2C_ITListenCplt>
 8003ee6:	e032      	b.n	8003f4e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b29      	cmp	r3, #41	; 0x29
 8003ef2:	d10e      	bne.n	8003f12 <I2C_Slave_ISR_IT+0xb6>
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003efa:	d00a      	beq.n	8003f12 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f001 f838 	bl	8004f7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fcb5 	bl	800487a <I2C_ITSlaveSeqCplt>
 8003f10:	e01d      	b.n	8003f4e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2210      	movs	r2, #16
 8003f18:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f1a:	e096      	b.n	800404a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2210      	movs	r2, #16
 8003f22:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f043 0204 	orr.w	r2, r3, #4
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d004      	beq.n	8003f40 <I2C_Slave_ISR_IT+0xe4>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f3c:	f040 8085 	bne.w	800404a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	4619      	mov	r1, r3
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 ff20 	bl	8004d8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f4c:	e07d      	b.n	800404a <I2C_Slave_ISR_IT+0x1ee>
 8003f4e:	e07c      	b.n	800404a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d030      	beq.n	8003fbe <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02a      	beq.n	8003fbe <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d018      	beq.n	8003fa4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d14f      	bne.n	800404e <I2C_Slave_ISR_IT+0x1f2>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fb4:	d04b      	beq.n	800404e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fc5f 	bl	800487a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003fbc:	e047      	b.n	800404e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	08db      	lsrs	r3, r3, #3
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fb8d 	bl	80046f8 <I2C_ITAddrCplt>
 8003fde:	e037      	b.n	8004050 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d031      	beq.n	8004050 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d02b      	beq.n	8004050 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
 8004032:	e00d      	b.n	8004050 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800403a:	d002      	beq.n	8004042 <I2C_Slave_ISR_IT+0x1e6>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fc19 	bl	800487a <I2C_ITSlaveSeqCplt>
 8004048:	e002      	b.n	8004050 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800404a:	bf00      	nop
 800404c:	e000      	b.n	8004050 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800404e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b088      	sub	sp, #32
 8004066:	af02      	add	r7, sp, #8
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <I2C_Master_ISR_DMA+0x1a>
 8004078:	2302      	movs	r3, #2
 800407a:	e0e1      	b.n	8004240 <I2C_Master_ISR_DMA+0x1de>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d017      	beq.n	80040c0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004098:	2b00      	cmp	r3, #0
 800409a:	d011      	beq.n	80040c0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2210      	movs	r2, #16
 80040a2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f043 0204 	orr.w	r2, r3, #4
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80040b0:	2120      	movs	r1, #32
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f001 f9e0 	bl	8005478 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 ff5e 	bl	8004f7a <I2C_Flush_TXDR>
 80040be:	e0ba      	b.n	8004236 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	09db      	lsrs	r3, r3, #7
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d072      	beq.n	80041b2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d06c      	beq.n	80041b2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d04e      	beq.n	8004190 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2bff      	cmp	r3, #255	; 0xff
 8004108:	d906      	bls.n	8004118 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	22ff      	movs	r2, #255	; 0xff
 800410e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e010      	b.n	800413a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800412a:	d003      	beq.n	8004134 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e002      	b.n	800413a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004138:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	b2da      	uxtb	r2, r3
 8004140:	8a79      	ldrh	r1, [r7, #18]
 8004142:	2300      	movs	r3, #0
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f001 f963 	bl	8005414 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b22      	cmp	r3, #34	; 0x22
 800416a:	d108      	bne.n	800417e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800417a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800417c:	e05b      	b.n	8004236 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800418c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800418e:	e052      	b.n	8004236 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800419e:	d003      	beq.n	80041a8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fb2d 	bl	8004800 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80041a6:	e046      	b.n	8004236 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80041a8:	2140      	movs	r1, #64	; 0x40
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fdee 	bl	8004d8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80041b0:	e041      	b.n	8004236 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d029      	beq.n	8004212 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d023      	beq.n	8004212 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d119      	bne.n	8004208 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e2:	d027      	beq.n	8004234 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ec:	d108      	bne.n	8004200 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041fc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80041fe:	e019      	b.n	8004234 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fafd 	bl	8004800 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004206:	e015      	b.n	8004234 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004208:	2140      	movs	r1, #64	; 0x40
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fdbe 	bl	8004d8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004210:	e010      	b.n	8004234 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fb83 	bl	8004938 <I2C_ITMasterCplt>
 8004232:	e000      	b.n	8004236 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004234:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004254:	4b8c      	ldr	r3, [pc, #560]	; (8004488 <I2C_Mem_ISR_DMA+0x240>)
 8004256:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <I2C_Mem_ISR_DMA+0x1e>
 8004262:	2302      	movs	r3, #2
 8004264:	e10c      	b.n	8004480 <I2C_Mem_ISR_DMA+0x238>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d017      	beq.n	80042aa <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004282:	2b00      	cmp	r3, #0
 8004284:	d011      	beq.n	80042aa <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2210      	movs	r2, #16
 800428c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f043 0204 	orr.w	r2, r3, #4
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800429a:	2120      	movs	r1, #32
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f001 f8eb 	bl	8005478 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fe69 	bl	8004f7a <I2C_Flush_TXDR>
 80042a8:	e0e5      	b.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00f      	beq.n	80042d6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f04f 32ff 	mov.w	r2, #4294967295
 80042d2:	651a      	str	r2, [r3, #80]	; 0x50
 80042d4:	e0cf      	b.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	09db      	lsrs	r3, r3, #7
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d05c      	beq.n	800439c <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d056      	beq.n	800439c <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80042ee:	2110      	movs	r1, #16
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f001 f8c1 	bl	8005478 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d048      	beq.n	8004392 <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2bff      	cmp	r3, #255	; 0xff
 8004308:	d910      	bls.n	800432c <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	22ff      	movs	r2, #255	; 0xff
 800430e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004314:	b299      	uxth	r1, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	b2da      	uxtb	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f001 f875 	bl	8005414 <I2C_TransferConfig>
 800432a:	e011      	b.n	8004350 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	b299      	uxth	r1, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	b2da      	uxtb	r2, r3
 8004342:	2300      	movs	r3, #0
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f001 f862 	bl	8005414 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b22      	cmp	r3, #34	; 0x22
 800436c:	d108      	bne.n	8004380 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800437c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800437e:	e07a      	b.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004390:	e071      	b.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004392:	2140      	movs	r1, #64	; 0x40
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fcf9 	bl	8004d8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800439a:	e06c      	b.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d056      	beq.n	8004456 <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	099b      	lsrs	r3, r3, #6
 80043ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d050      	beq.n	8004456 <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b22      	cmp	r3, #34	; 0x22
 80043be:	d101      	bne.n	80043c4 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 80043c0:	4b32      	ldr	r3, [pc, #200]	; (800448c <I2C_Mem_ISR_DMA+0x244>)
 80043c2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2bff      	cmp	r3, #255	; 0xff
 80043cc:	d910      	bls.n	80043f0 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	22ff      	movs	r2, #255	; 0xff
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	b299      	uxth	r1, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f001 f813 	bl	8005414 <I2C_TransferConfig>
 80043ee:	e011      	b.n	8004414 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	b299      	uxth	r1, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	b2da      	uxtb	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f001 f800 	bl	8005414 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b22      	cmp	r3, #34	; 0x22
 8004430:	d108      	bne.n	8004444 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004440:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004442:	e018      	b.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004452:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004454:	e00f      	b.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fa61 	bl	8004938 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	80002000 	.word	0x80002000
 800448c:	80002400 	.word	0x80002400

08004490 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <I2C_Slave_ISR_DMA+0x24>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e0c9      	b.n	8004648 <I2C_Slave_ISR_DMA+0x1b8>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 faf8 	bl	8004acc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 809a 	beq.w	800461e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8093 	beq.w	800461e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0b9b      	lsrs	r3, r3, #14
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0bdb      	lsrs	r3, r3, #15
 8004508:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800450c:	2b00      	cmp	r3, #0
 800450e:	d07f      	beq.n	8004610 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0bdb      	lsrs	r3, r3, #15
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004530:	2301      	movs	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0b9b      	lsrs	r3, r3, #14
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004554:	2301      	movs	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d128      	bne.n	80045b0 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b28      	cmp	r3, #40	; 0x28
 8004568:	d108      	bne.n	800457c <I2C_Slave_ISR_DMA+0xec>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004570:	d104      	bne.n	800457c <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fbb3 	bl	8004ce0 <I2C_ITListenCplt>
 800457a:	e048      	b.n	800460e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b29      	cmp	r3, #41	; 0x29
 8004586:	d10e      	bne.n	80045a6 <I2C_Slave_ISR_DMA+0x116>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800458e:	d00a      	beq.n	80045a6 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2210      	movs	r2, #16
 8004596:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fcee 	bl	8004f7a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f96b 	bl	800487a <I2C_ITSlaveSeqCplt>
 80045a4:	e033      	b.n	800460e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2210      	movs	r2, #16
 80045ac:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80045ae:	e034      	b.n	800461a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2210      	movs	r2, #16
 80045b6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f043 0204 	orr.w	r2, r3, #4
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ca:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <I2C_Slave_ISR_DMA+0x14a>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d8:	d11f      	bne.n	800461a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b21      	cmp	r3, #33	; 0x21
 80045de:	d002      	beq.n	80045e6 <I2C_Slave_ISR_DMA+0x156>
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b29      	cmp	r3, #41	; 0x29
 80045e4:	d103      	bne.n	80045ee <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2221      	movs	r2, #33	; 0x21
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
 80045ec:	e008      	b.n	8004600 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	2b22      	cmp	r3, #34	; 0x22
 80045f2:	d002      	beq.n	80045fa <I2C_Slave_ISR_DMA+0x16a>
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	2b2a      	cmp	r3, #42	; 0x2a
 80045f8:	d102      	bne.n	8004600 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2222      	movs	r2, #34	; 0x22
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	4619      	mov	r1, r3
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fbc0 	bl	8004d8c <I2C_ITError>
      if (treatdmanack == 1U)
 800460c:	e005      	b.n	800461a <I2C_Slave_ISR_DMA+0x18a>
 800460e:	e004      	b.n	800461a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2210      	movs	r2, #16
 8004616:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004618:	e011      	b.n	800463e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800461a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800461c:	e00f      	b.n	800463e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f85d 	bl	80046f8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4603      	mov	r3, r0
 8004660:	817b      	strh	r3, [r7, #10]
 8004662:	460b      	mov	r3, r1
 8004664:	813b      	strh	r3, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	8979      	ldrh	r1, [r7, #10]
 8004670:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <I2C_RequestMemoryWrite+0xa4>)
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fecb 	bl	8005414 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	69b9      	ldr	r1, [r7, #24]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fd5d 	bl	8005142 <I2C_WaitOnTXISFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e02c      	b.n	80046ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d105      	bne.n	80046a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004698:	893b      	ldrh	r3, [r7, #8]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28
 80046a2:	e015      	b.n	80046d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046a4:	893b      	ldrh	r3, [r7, #8]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	69b9      	ldr	r1, [r7, #24]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fd43 	bl	8005142 <I2C_WaitOnTXISFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e012      	b.n	80046ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046c6:	893b      	ldrh	r3, [r7, #8]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2200      	movs	r2, #0
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fcf1 	bl	80050c2 <I2C_WaitOnFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	80002000 	.word	0x80002000

080046f8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800470e:	2b28      	cmp	r3, #40	; 0x28
 8004710:	d16a      	bne.n	80047e8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	b29b      	uxth	r3, r3
 800472c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004730:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800473e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800474c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d138      	bne.n	80047c8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	09db      	lsrs	r3, r3, #7
 800475a:	b29a      	uxth	r2, r3
 800475c:	89bb      	ldrh	r3, [r7, #12]
 800475e:	4053      	eors	r3, r2
 8004760:	b29b      	uxth	r3, r3
 8004762:	f003 0306 	and.w	r3, r3, #6
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11c      	bne.n	80047a4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800476a:	897b      	ldrh	r3, [r7, #10]
 800476c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	2b02      	cmp	r3, #2
 800477e:	d13b      	bne.n	80047f8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2208      	movs	r2, #8
 800478c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004796:	89ba      	ldrh	r2, [r7, #12]
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fb1d 	bl	8003ddc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047a2:	e029      	b.n	80047f8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80047a4:	893b      	ldrh	r3, [r7, #8]
 80047a6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80047a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fecd 	bl	800554c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80047ba:	89ba      	ldrh	r2, [r7, #12]
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	4619      	mov	r1, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff fb0b 	bl	8003ddc <HAL_I2C_AddrCallback>
}
 80047c6:	e017      	b.n	80047f8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80047c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 febd 	bl	800554c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80047da:	89ba      	ldrh	r2, [r7, #12]
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fafb 	bl	8003ddc <HAL_I2C_AddrCallback>
}
 80047e6:	e007      	b.n	80047f8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2208      	movs	r2, #8
 80047ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b21      	cmp	r3, #33	; 0x21
 800481a:	d115      	bne.n	8004848 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2211      	movs	r2, #17
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004830:	2101      	movs	r1, #1
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fe8a 	bl	800554c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff faa3 	bl	8003d8c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004846:	e014      	b.n	8004872 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2212      	movs	r2, #18
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800485c:	2102      	movs	r1, #2
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fe74 	bl	800554c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fa97 	bl	8003da0 <HAL_I2C_MasterRxCpltCallback>
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0b9b      	lsrs	r3, r3, #14
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e00d      	b.n	80048cc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	0bdb      	lsrs	r3, r3, #15
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b29      	cmp	r3, #41	; 0x29
 80048d6:	d112      	bne.n	80048fe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2228      	movs	r2, #40	; 0x28
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2221      	movs	r2, #33	; 0x21
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048e6:	2101      	movs	r1, #1
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fe2f 	bl	800554c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fa5c 	bl	8003db4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048fc:	e017      	b.n	800492e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b2a      	cmp	r3, #42	; 0x2a
 8004908:	d111      	bne.n	800492e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2228      	movs	r2, #40	; 0x28
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2222      	movs	r2, #34	; 0x22
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004918:	2102      	movs	r1, #2
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fe16 	bl	800554c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fa4d 	bl	8003dc8 <HAL_I2C_SlaveRxCpltCallback>
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2220      	movs	r2, #32
 800494c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b21      	cmp	r3, #33	; 0x21
 8004958:	d107      	bne.n	800496a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800495a:	2101      	movs	r1, #1
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fdf5 	bl	800554c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2211      	movs	r2, #17
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
 8004968:	e00c      	b.n	8004984 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b22      	cmp	r3, #34	; 0x22
 8004974:	d106      	bne.n	8004984 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004976:	2102      	movs	r1, #2
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fde7 	bl	800554c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2212      	movs	r2, #18
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b4d      	ldr	r3, [pc, #308]	; (8004ac4 <I2C_ITMasterCplt+0x18c>)
 8004990:	400b      	ands	r3, r1
 8004992:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a4a      	ldr	r2, [pc, #296]	; (8004ac8 <I2C_ITMasterCplt+0x190>)
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2210      	movs	r2, #16
 80049b2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b8:	f043 0204 	orr.w	r2, r3, #4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b60      	cmp	r3, #96	; 0x60
 80049ca:	d10b      	bne.n	80049e4 <I2C_ITMasterCplt+0xac>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80049e2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fac8 	bl	8004f7a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b60      	cmp	r3, #96	; 0x60
 80049fa:	d002      	beq.n	8004a02 <I2C_ITMasterCplt+0xca>
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d006      	beq.n	8004a10 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f9bf 	bl	8004d8c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a0e:	e054      	b.n	8004aba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b21      	cmp	r3, #33	; 0x21
 8004a1a:	d124      	bne.n	8004a66 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d10b      	bne.n	8004a4e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff f9e0 	bl	8003e0c <HAL_I2C_MemTxCpltCallback>
}
 8004a4c:	e035      	b.n	8004aba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff f994 	bl	8003d8c <HAL_I2C_MasterTxCpltCallback>
}
 8004a64:	e029      	b.n	8004aba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b22      	cmp	r3, #34	; 0x22
 8004a70:	d123      	bne.n	8004aba <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d10b      	bne.n	8004aa4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff f9bf 	bl	8003e20 <HAL_I2C_MemRxCpltCallback>
}
 8004aa2:	e00a      	b.n	8004aba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff f973 	bl	8003da0 <HAL_I2C_MasterRxCpltCallback>
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	fe00e800 	.word	0xfe00e800
 8004ac8:	ffff0000 	.word	0xffff0000

08004acc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2220      	movs	r2, #32
 8004af0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	2b21      	cmp	r3, #33	; 0x21
 8004af6:	d002      	beq.n	8004afe <I2C_ITSlaveCplt+0x32>
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b29      	cmp	r3, #41	; 0x29
 8004afc:	d108      	bne.n	8004b10 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004afe:	f248 0101 	movw	r1, #32769	; 0x8001
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fd22 	bl	800554c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2221      	movs	r2, #33	; 0x21
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004b0e:	e00d      	b.n	8004b2c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2b22      	cmp	r3, #34	; 0x22
 8004b14:	d002      	beq.n	8004b1c <I2C_ITSlaveCplt+0x50>
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1a:	d107      	bne.n	8004b2c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004b1c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fd13 	bl	800554c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2222      	movs	r2, #34	; 0x22
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b3a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6859      	ldr	r1, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4b64      	ldr	r3, [pc, #400]	; (8004cd8 <I2C_ITSlaveCplt+0x20c>)
 8004b48:	400b      	ands	r3, r1
 8004b4a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fa14 	bl	8004f7a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	0b9b      	lsrs	r3, r3, #14
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d013      	beq.n	8004b86 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d020      	beq.n	8004bb8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b84:	e018      	b.n	8004bb8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	0bdb      	lsrs	r3, r3, #15
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d006      	beq.n	8004bb8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00c      	beq.n	8004c06 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f8a7 	bl	8004d8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b28      	cmp	r3, #40	; 0x28
 8004c48:	d141      	bne.n	8004cce <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c4a:	6979      	ldr	r1, [r7, #20]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f847 	bl	8004ce0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c52:	e03c      	b.n	8004cce <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c5c:	d014      	beq.n	8004c88 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fe0b 	bl	800487a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <I2C_ITSlaveCplt+0x210>)
 8004c68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff f8b9 	bl	8003df8 <HAL_I2C_ListenCpltCallback>
}
 8004c86:	e022      	b.n	8004cce <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b22      	cmp	r3, #34	; 0x22
 8004c92:	d10e      	bne.n	8004cb2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff f88c 	bl	8003dc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cb0:	e00d      	b.n	8004cce <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff f873 	bl	8003db4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	fe00e800 	.word	0xfe00e800
 8004cdc:	ffff0000 	.word	0xffff0000

08004ce0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a26      	ldr	r2, [pc, #152]	; (8004d88 <I2C_ITListenCplt+0xa8>)
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	089b      	lsrs	r3, r3, #2
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d022      	beq.n	8004d5e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d012      	beq.n	8004d5e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d5e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fbf2 	bl	800554c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff f83d 	bl	8003df8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	ffff0000 	.word	0xffff0000

08004d8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a5d      	ldr	r2, [pc, #372]	; (8004f20 <I2C_ITError+0x194>)
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b28      	cmp	r3, #40	; 0x28
 8004dc2:	d005      	beq.n	8004dd0 <I2C_ITError+0x44>
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	2b29      	cmp	r3, #41	; 0x29
 8004dc8:	d002      	beq.n	8004dd0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dce:	d10b      	bne.n	8004de8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004dd0:	2103      	movs	r1, #3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fbba 	bl	800554c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2228      	movs	r2, #40	; 0x28
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a50      	ldr	r2, [pc, #320]	; (8004f24 <I2C_ITError+0x198>)
 8004de4:	635a      	str	r2, [r3, #52]	; 0x34
 8004de6:	e011      	b.n	8004e0c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004de8:	f248 0103 	movw	r1, #32771	; 0x8003
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fbad 	bl	800554c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b60      	cmp	r3, #96	; 0x60
 8004dfc:	d003      	beq.n	8004e06 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d039      	beq.n	8004e8e <I2C_ITError+0x102>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b11      	cmp	r3, #17
 8004e1e:	d002      	beq.n	8004e26 <I2C_ITError+0x9a>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b21      	cmp	r3, #33	; 0x21
 8004e24:	d133      	bne.n	8004e8e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e34:	d107      	bne.n	8004e46 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e44:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fae2 	bl	8003414 <HAL_DMA_GetState>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d017      	beq.n	8004e86 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	4a33      	ldr	r2, [pc, #204]	; (8004f28 <I2C_ITError+0x19c>)
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe f9e2 	bl	8003234 <HAL_DMA_Abort_IT>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d04d      	beq.n	8004f12 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e80:	4610      	mov	r0, r2
 8004e82:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e84:	e045      	b.n	8004f12 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f850 	bl	8004f2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e8c:	e041      	b.n	8004f12 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d039      	beq.n	8004f0a <I2C_ITError+0x17e>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b12      	cmp	r3, #18
 8004e9a:	d002      	beq.n	8004ea2 <I2C_ITError+0x116>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b22      	cmp	r3, #34	; 0x22
 8004ea0:	d133      	bne.n	8004f0a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb0:	d107      	bne.n	8004ec2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ec0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe faa4 	bl	8003414 <HAL_DMA_GetState>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d017      	beq.n	8004f02 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <I2C_ITError+0x19c>)
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe f9a4 	bl	8003234 <HAL_DMA_Abort_IT>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d011      	beq.n	8004f16 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004efc:	4610      	mov	r0, r2
 8004efe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f00:	e009      	b.n	8004f16 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f812 	bl	8004f2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f08:	e005      	b.n	8004f16 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f80e 	bl	8004f2c <I2C_TreatErrorCallback>
  }
}
 8004f10:	e002      	b.n	8004f18 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f16:	bf00      	nop
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	ffff0000 	.word	0xffff0000
 8004f24:	08003e5d 	.word	0x08003e5d
 8004f28:	08005087 	.word	0x08005087

08004f2c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b60      	cmp	r3, #96	; 0x60
 8004f3e:	d10e      	bne.n	8004f5e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fe ff76 	bl	8003e48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f5c:	e009      	b.n	8004f72 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fe ff61 	bl	8003e34 <HAL_I2C_ErrorCallback>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d103      	bne.n	8004f98 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d007      	beq.n	8004fb6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	619a      	str	r2, [r3, #24]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fde:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004fea:	2120      	movs	r1, #32
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fa43 	bl	8005478 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004ff2:	e02d      	b.n	8005050 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	2bff      	cmp	r3, #255	; 0xff
 800500a:	d903      	bls.n	8005014 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	22ff      	movs	r2, #255	; 0xff
 8005010:	851a      	strh	r2, [r3, #40]	; 0x28
 8005012:	e004      	b.n	800501e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	4619      	mov	r1, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3328      	adds	r3, #40	; 0x28
 800502e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005034:	f7fe f89e 	bl	8003174 <HAL_DMA_Start_IT>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800503e:	2110      	movs	r1, #16
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff fea3 	bl	8004d8c <I2C_ITError>
}
 8005046:	e003      	b.n	8005050 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005048:	2140      	movs	r1, #64	; 0x40
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fa14 	bl	8005478 <I2C_Enable_IRQ>
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005074:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005076:	2110      	movs	r1, #16
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff fe87 	bl	8004d8c <I2C_ITError>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	2200      	movs	r2, #0
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	2200      	movs	r2, #0
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff ff39 	bl	8004f2c <I2C_TreatErrorCallback>
}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050d2:	e022      	b.n	800511a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d01e      	beq.n	800511a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050dc:	f7fc fea8 	bl	8001e30 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d302      	bcc.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d113      	bne.n	800511a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	f043 0220 	orr.w	r2, r3, #32
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e00f      	b.n	800513a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	429a      	cmp	r2, r3
 8005136:	d0cd      	beq.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800514e:	e02c      	b.n	80051aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f871 	bl	800523c <I2C_IsErrorOccurred>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e02a      	b.n	80051ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d01e      	beq.n	80051aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516c:	f7fc fe60 	bl	8001e30 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	429a      	cmp	r2, r3
 800517a:	d302      	bcc.n	8005182 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d113      	bne.n	80051aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e007      	b.n	80051ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d1cb      	bne.n	8005150 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ce:	e028      	b.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f831 	bl	800523c <I2C_IsErrorOccurred>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e026      	b.n	8005232 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e4:	f7fc fe24 	bl	8001e30 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d113      	bne.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e007      	b.n	8005232 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b20      	cmp	r3, #32
 800522e:	d1cf      	bne.n	80051d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	d075      	beq.n	8005354 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2210      	movs	r2, #16
 800526e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005270:	e056      	b.n	8005320 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d052      	beq.n	8005320 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fc fdd9 	bl	8001e30 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <I2C_IsErrorOccurred+0x54>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d147      	bne.n	8005320 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b2:	d12e      	bne.n	8005312 <I2C_IsErrorOccurred+0xd6>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ba:	d02a      	beq.n	8005312 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d027      	beq.n	8005312 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052d2:	f7fc fdad 	bl	8001e30 <HAL_GetTick>
 80052d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052d8:	e01b      	b.n	8005312 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052da:	f7fc fda9 	bl	8001e30 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b19      	cmp	r3, #25
 80052e6:	d914      	bls.n	8005312 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b20      	cmp	r3, #32
 800531e:	d1dc      	bne.n	80052da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b20      	cmp	r3, #32
 800532c:	d003      	beq.n	8005336 <I2C_IsErrorOccurred+0xfa>
 800532e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005332:	2b00      	cmp	r3, #0
 8005334:	d09d      	beq.n	8005272 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2220      	movs	r2, #32
 8005344:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f043 0304 	orr.w	r3, r3, #4
 800534c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005376:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f043 0308 	orr.w	r3, r3, #8
 800538e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005398:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f043 0302 	orr.w	r3, r3, #2
 80053b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80053c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01c      	beq.n	8005404 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fdd5 	bl	8004f7a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6859      	ldr	r1, [r3, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <I2C_IsErrorOccurred+0x1d4>)
 80053dc:	400b      	ands	r3, r1
 80053de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005408:	4618      	mov	r0, r3
 800540a:	3728      	adds	r7, #40	; 0x28
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	fe00e800 	.word	0xfe00e800

08005414 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	607b      	str	r3, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	817b      	strh	r3, [r7, #10]
 8005422:	4613      	mov	r3, r2
 8005424:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005426:	897b      	ldrh	r3, [r7, #10]
 8005428:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800542c:	7a7b      	ldrb	r3, [r7, #9]
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005434:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	4313      	orrs	r3, r2
 800543e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005442:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	0d5b      	lsrs	r3, r3, #21
 800544e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005452:	4b08      	ldr	r3, [pc, #32]	; (8005474 <I2C_TransferConfig+0x60>)
 8005454:	430b      	orrs	r3, r1
 8005456:	43db      	mvns	r3, r3
 8005458:	ea02 0103 	and.w	r1, r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	03ff63ff 	.word	0x03ff63ff

08005478 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <I2C_Enable_IRQ+0xcc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005496:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <I2C_Enable_IRQ+0xd0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d11d      	bne.n	80054d8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800549c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	da03      	bge.n	80054ac <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80054aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d103      	bne.n	80054ba <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80054b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80054ba:	887b      	ldrh	r3, [r7, #2]
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d103      	bne.n	80054c8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80054c8:	887b      	ldrh	r3, [r7, #2]
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d12c      	bne.n	8005528 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80054d6:	e027      	b.n	8005528 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80054d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	da03      	bge.n	80054e8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80054e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054e8:	887b      	ldrh	r3, [r7, #2]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80054f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80054fa:	887b      	ldrh	r3, [r7, #2]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800550a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800550c:	887b      	ldrh	r3, [r7, #2]
 800550e:	2b10      	cmp	r3, #16
 8005510:	d103      	bne.n	800551a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005518:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800551a:	887b      	ldrh	r3, [r7, #2]
 800551c:	2b20      	cmp	r3, #32
 800551e:	d103      	bne.n	8005528 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f043 0320 	orr.w	r3, r3, #32
 8005526:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	08004063 	.word	0x08004063
 8005548:	08004491 	.word	0x08004491

0800554c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800555c:	887b      	ldrh	r3, [r7, #2]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00f      	beq.n	8005586 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800556c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005574:	b2db      	uxtb	r3, r3
 8005576:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800557a:	2b28      	cmp	r3, #40	; 0x28
 800557c:	d003      	beq.n	8005586 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005584:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00f      	beq.n	80055b0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005596:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055a4:	2b28      	cmp	r3, #40	; 0x28
 80055a6:	d003      	beq.n	80055b0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80055ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80055b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da03      	bge.n	80055c0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80055be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80055c0:	887b      	ldrh	r3, [r7, #2]
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d103      	bne.n	80055ce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80055ce:	887b      	ldrh	r3, [r7, #2]
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d103      	bne.n	80055dc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f043 0320 	orr.w	r3, r3, #32
 80055da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80055dc:	887b      	ldrh	r3, [r7, #2]
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d103      	bne.n	80055ea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	43da      	mvns	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	400a      	ands	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b20      	cmp	r3, #32
 800561c:	d138      	bne.n	8005690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005628:	2302      	movs	r3, #2
 800562a:	e032      	b.n	8005692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2224      	movs	r2, #36	; 0x24
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800565a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	e000      	b.n	8005692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d139      	bne.n	8005728 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056be:	2302      	movs	r3, #2
 80056c0:	e033      	b.n	800572a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2224      	movs	r2, #36	; 0x24
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e000      	b.n	800572a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <HAL_PWREx_GetVoltageRange+0x18>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005744:	4618      	mov	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40007000 	.word	0x40007000

08005754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005762:	d130      	bne.n	80057c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005764:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005770:	d038      	beq.n	80057e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005772:	4b20      	ldr	r3, [pc, #128]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800577a:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800577c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005780:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005782:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2232      	movs	r2, #50	; 0x32
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	0c9b      	lsrs	r3, r3, #18
 8005794:	3301      	adds	r3, #1
 8005796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005798:	e002      	b.n	80057a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3b01      	subs	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ac:	d102      	bne.n	80057b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f2      	bne.n	800579a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c0:	d110      	bne.n	80057e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e00f      	b.n	80057e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057c6:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d2:	d007      	beq.n	80057e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057dc:	4a05      	ldr	r2, [pc, #20]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40007000 	.word	0x40007000
 80057f8:	20000004 	.word	0x20000004
 80057fc:	431bde83 	.word	0x431bde83

08005800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e3ca      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005812:	4b97      	ldr	r3, [pc, #604]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800581c:	4b94      	ldr	r3, [pc, #592]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80e4 	beq.w	80059fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_RCC_OscConfig+0x4a>
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b0c      	cmp	r3, #12
 800583e:	f040 808b 	bne.w	8005958 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b01      	cmp	r3, #1
 8005846:	f040 8087 	bne.w	8005958 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800584a:	4b89      	ldr	r3, [pc, #548]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_RCC_OscConfig+0x62>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e3a2      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	4b82      	ldr	r3, [pc, #520]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <HAL_RCC_OscConfig+0x7c>
 8005872:	4b7f      	ldr	r3, [pc, #508]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800587a:	e005      	b.n	8005888 <HAL_RCC_OscConfig+0x88>
 800587c:	4b7c      	ldr	r3, [pc, #496]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 800587e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005888:	4293      	cmp	r3, r2
 800588a:	d223      	bcs.n	80058d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fd55 	bl	8006340 <RCC_SetFlashLatencyFromMSIRange>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e383      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058a0:	4b73      	ldr	r3, [pc, #460]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a72      	ldr	r2, [pc, #456]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058a6:	f043 0308 	orr.w	r3, r3, #8
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	4b70      	ldr	r3, [pc, #448]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	496d      	ldr	r1, [pc, #436]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058be:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	4968      	ldr	r1, [pc, #416]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	604b      	str	r3, [r1, #4]
 80058d2:	e025      	b.n	8005920 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058d4:	4b66      	ldr	r3, [pc, #408]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a65      	ldr	r2, [pc, #404]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058da:	f043 0308 	orr.w	r3, r3, #8
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b63      	ldr	r3, [pc, #396]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	4960      	ldr	r1, [pc, #384]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	495b      	ldr	r1, [pc, #364]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005902:	4313      	orrs	r3, r2
 8005904:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fd15 	bl	8006340 <RCC_SetFlashLatencyFromMSIRange>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e343      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005920:	f000 fc4a 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b52      	ldr	r3, [pc, #328]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	4950      	ldr	r1, [pc, #320]	; (8005a74 <HAL_RCC_OscConfig+0x274>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
 800593c:	4a4e      	ldr	r2, [pc, #312]	; (8005a78 <HAL_RCC_OscConfig+0x278>)
 800593e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005940:	4b4e      	ldr	r3, [pc, #312]	; (8005a7c <HAL_RCC_OscConfig+0x27c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f7fc fa23 	bl	8001d90 <HAL_InitTick>
 800594a:	4603      	mov	r3, r0
 800594c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d052      	beq.n	80059fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	e327      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d032      	beq.n	80059c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a42      	ldr	r2, [pc, #264]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800596c:	f7fc fa60 	bl	8001e30 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005974:	f7fc fa5c 	bl	8001e30 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e310      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005986:	4b3a      	ldr	r3, [pc, #232]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f0      	beq.n	8005974 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005992:	4b37      	ldr	r3, [pc, #220]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a36      	ldr	r2, [pc, #216]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005998:	f043 0308 	orr.w	r3, r3, #8
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4b34      	ldr	r3, [pc, #208]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	4931      	ldr	r1, [pc, #196]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059b0:	4b2f      	ldr	r3, [pc, #188]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	492c      	ldr	r1, [pc, #176]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]
 80059c4:	e01a      	b.n	80059fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059c6:	4b2a      	ldr	r3, [pc, #168]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059d2:	f7fc fa2d 	bl	8001e30 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059da:	f7fc fa29 	bl	8001e30 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e2dd      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059ec:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f0      	bne.n	80059da <HAL_RCC_OscConfig+0x1da>
 80059f8:	e000      	b.n	80059fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d074      	beq.n	8005af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d005      	beq.n	8005a1a <HAL_RCC_OscConfig+0x21a>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	d10e      	bne.n	8005a32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d10b      	bne.n	8005a32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d064      	beq.n	8005af0 <HAL_RCC_OscConfig+0x2f0>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d160      	bne.n	8005af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e2ba      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3a:	d106      	bne.n	8005a4a <HAL_RCC_OscConfig+0x24a>
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a0b      	ldr	r2, [pc, #44]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	e026      	b.n	8005a98 <HAL_RCC_OscConfig+0x298>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a52:	d115      	bne.n	8005a80 <HAL_RCC_OscConfig+0x280>
 8005a54:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a02      	ldr	r2, [pc, #8]	; (8005a70 <HAL_RCC_OscConfig+0x270>)
 8005a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	e014      	b.n	8005a98 <HAL_RCC_OscConfig+0x298>
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000
 8005a74:	08007f68 	.word	0x08007f68
 8005a78:	20000004 	.word	0x20000004
 8005a7c:	20000008 	.word	0x20000008
 8005a80:	4ba0      	ldr	r3, [pc, #640]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a9f      	ldr	r2, [pc, #636]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	4b9d      	ldr	r3, [pc, #628]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a9c      	ldr	r2, [pc, #624]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d013      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fc f9c6 	bl	8001e30 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa8:	f7fc f9c2 	bl	8001e30 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b64      	cmp	r3, #100	; 0x64
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e276      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aba:	4b92      	ldr	r3, [pc, #584]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x2a8>
 8005ac6:	e014      	b.n	8005af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac8:	f7fc f9b2 	bl	8001e30 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad0:	f7fc f9ae 	bl	8001e30 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e262      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ae2:	4b88      	ldr	r3, [pc, #544]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x2d0>
 8005aee:	e000      	b.n	8005af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d060      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d005      	beq.n	8005b10 <HAL_RCC_OscConfig+0x310>
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b0c      	cmp	r3, #12
 8005b08:	d119      	bne.n	8005b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d116      	bne.n	8005b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b10:	4b7c      	ldr	r3, [pc, #496]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <HAL_RCC_OscConfig+0x328>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e23f      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b28:	4b76      	ldr	r3, [pc, #472]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	4973      	ldr	r1, [pc, #460]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b3c:	e040      	b.n	8005bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d023      	beq.n	8005b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b46:	4b6f      	ldr	r3, [pc, #444]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a6e      	ldr	r2, [pc, #440]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b52:	f7fc f96d 	bl	8001e30 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b5a:	f7fc f969 	bl	8001e30 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e21d      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b6c:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b78:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	061b      	lsls	r3, r3, #24
 8005b86:	495f      	ldr	r1, [pc, #380]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	604b      	str	r3, [r1, #4]
 8005b8c:	e018      	b.n	8005bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b8e:	4b5d      	ldr	r3, [pc, #372]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a5c      	ldr	r2, [pc, #368]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9a:	f7fc f949 	bl	8001e30 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba2:	f7fc f945 	bl	8001e30 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e1f9      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bb4:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f0      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d03c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01c      	beq.n	8005c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd4:	4b4b      	ldr	r3, [pc, #300]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bda:	4a4a      	ldr	r2, [pc, #296]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fc f924 	bl	8001e30 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bec:	f7fc f920 	bl	8001e30 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e1d4      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bfe:	4b41      	ldr	r3, [pc, #260]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ef      	beq.n	8005bec <HAL_RCC_OscConfig+0x3ec>
 8005c0c:	e01b      	b.n	8005c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c0e:	4b3d      	ldr	r3, [pc, #244]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c14:	4a3b      	ldr	r2, [pc, #236]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1e:	f7fc f907 	bl	8001e30 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c26:	f7fc f903 	bl	8001e30 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e1b7      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c38:	4b32      	ldr	r3, [pc, #200]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1ef      	bne.n	8005c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80a6 	beq.w	8005da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c54:	2300      	movs	r3, #0
 8005c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c58:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10d      	bne.n	8005c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c64:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c68:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c70:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c80:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <HAL_RCC_OscConfig+0x508>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d118      	bne.n	8005cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c8c:	4b1e      	ldr	r3, [pc, #120]	; (8005d08 <HAL_RCC_OscConfig+0x508>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <HAL_RCC_OscConfig+0x508>)
 8005c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c98:	f7fc f8ca 	bl	8001e30 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca0:	f7fc f8c6 	bl	8001e30 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e17a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <HAL_RCC_OscConfig+0x508>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d108      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x4d8>
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ccc:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cd6:	e029      	b.n	8005d2c <HAL_RCC_OscConfig+0x52c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b05      	cmp	r3, #5
 8005cde:	d115      	bne.n	8005d0c <HAL_RCC_OscConfig+0x50c>
 8005ce0:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce6:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005ce8:	f043 0304 	orr.w	r3, r3, #4
 8005cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cf0:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	4a03      	ldr	r2, [pc, #12]	; (8005d04 <HAL_RCC_OscConfig+0x504>)
 8005cf8:	f043 0301 	orr.w	r3, r3, #1
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d00:	e014      	b.n	8005d2c <HAL_RCC_OscConfig+0x52c>
 8005d02:	bf00      	nop
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40007000 	.word	0x40007000
 8005d0c:	4b9c      	ldr	r3, [pc, #624]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	4a9b      	ldr	r2, [pc, #620]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d1c:	4b98      	ldr	r3, [pc, #608]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	4a97      	ldr	r2, [pc, #604]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005d24:	f023 0304 	bic.w	r3, r3, #4
 8005d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d016      	beq.n	8005d62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fc f87c 	bl	8001e30 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3c:	f7fc f878 	bl	8001e30 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e12a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d52:	4b8b      	ldr	r3, [pc, #556]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ed      	beq.n	8005d3c <HAL_RCC_OscConfig+0x53c>
 8005d60:	e015      	b.n	8005d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d62:	f7fc f865 	bl	8001e30 <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d68:	e00a      	b.n	8005d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6a:	f7fc f861 	bl	8001e30 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e113      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d80:	4b7f      	ldr	r3, [pc, #508]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1ed      	bne.n	8005d6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d8e:	7ffb      	ldrb	r3, [r7, #31]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d105      	bne.n	8005da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d94:	4b7a      	ldr	r3, [pc, #488]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d98:	4a79      	ldr	r2, [pc, #484]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80fe 	beq.w	8005fa6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	f040 80d0 	bne.w	8005f54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005db4:	4b72      	ldr	r3, [pc, #456]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 0203 	and.w	r2, r3, #3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d130      	bne.n	8005e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d127      	bne.n	8005e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d11f      	bne.n	8005e2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005df4:	2a07      	cmp	r2, #7
 8005df6:	bf14      	ite	ne
 8005df8:	2201      	movne	r2, #1
 8005dfa:	2200      	moveq	r2, #0
 8005dfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d113      	bne.n	8005e2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d109      	bne.n	8005e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	3b01      	subs	r3, #1
 8005e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d06e      	beq.n	8005f08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b0c      	cmp	r3, #12
 8005e2e:	d069      	beq.n	8005f04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e30:	4b53      	ldr	r3, [pc, #332]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e3c:	4b50      	ldr	r3, [pc, #320]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0ad      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e4c:	4b4c      	ldr	r3, [pc, #304]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a4b      	ldr	r2, [pc, #300]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e58:	f7fb ffea 	bl	8001e30 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fb ffe6 	bl	8001e30 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e09a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e72:	4b43      	ldr	r3, [pc, #268]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e7e:	4b40      	ldr	r3, [pc, #256]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	4b40      	ldr	r3, [pc, #256]	; (8005f84 <HAL_RCC_OscConfig+0x784>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e8e:	3a01      	subs	r2, #1
 8005e90:	0112      	lsls	r2, r2, #4
 8005e92:	4311      	orrs	r1, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e98:	0212      	lsls	r2, r2, #8
 8005e9a:	4311      	orrs	r1, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ea0:	0852      	lsrs	r2, r2, #1
 8005ea2:	3a01      	subs	r2, #1
 8005ea4:	0552      	lsls	r2, r2, #21
 8005ea6:	4311      	orrs	r1, r2
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005eac:	0852      	lsrs	r2, r2, #1
 8005eae:	3a01      	subs	r2, #1
 8005eb0:	0652      	lsls	r2, r2, #25
 8005eb2:	4311      	orrs	r1, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eb8:	0912      	lsrs	r2, r2, #4
 8005eba:	0452      	lsls	r2, r2, #17
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	4930      	ldr	r1, [pc, #192]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ec4:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2d      	ldr	r2, [pc, #180]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ed0:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005edc:	f7fb ffa8 	bl	8001e30 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee4:	f7fb ffa4 	bl	8001e30 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e058      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef6:	4b22      	ldr	r3, [pc, #136]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f02:	e050      	b.n	8005fa6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e04f      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f08:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d148      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f14:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f20:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f2c:	f7fb ff80 	bl	8001e30 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fb ff7c 	bl	8001e30 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e030      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f46:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0x734>
 8005f52:	e028      	b.n	8005fa6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d023      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a08      	ldr	r2, [pc, #32]	; (8005f80 <HAL_RCC_OscConfig+0x780>)
 8005f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f66:	f7fb ff63 	bl	8001e30 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f6c:	e00c      	b.n	8005f88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fb ff5f 	bl	8001e30 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d905      	bls.n	8005f88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e013      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
 8005f80:	40021000 	.word	0x40021000
 8005f84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <HAL_RCC_OscConfig+0x7b0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ec      	bne.n	8005f6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f94:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <HAL_RCC_OscConfig+0x7b0>)
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	4905      	ldr	r1, [pc, #20]	; (8005fb0 <HAL_RCC_OscConfig+0x7b0>)
 8005f9a:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <HAL_RCC_OscConfig+0x7b4>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60cb      	str	r3, [r1, #12]
 8005fa0:	e001      	b.n	8005fa6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	feeefffc 	.word	0xfeeefffc

08005fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0e7      	b.n	800619c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fcc:	4b75      	ldr	r3, [pc, #468]	; (80061a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d910      	bls.n	8005ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fda:	4b72      	ldr	r3, [pc, #456]	; (80061a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 0207 	bic.w	r2, r3, #7
 8005fe2:	4970      	ldr	r1, [pc, #448]	; (80061a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b6e      	ldr	r3, [pc, #440]	; (80061a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0cf      	b.n	800619c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d010      	beq.n	800602a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	4b66      	ldr	r3, [pc, #408]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006014:	429a      	cmp	r2, r3
 8006016:	d908      	bls.n	800602a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006018:	4b63      	ldr	r3, [pc, #396]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	4960      	ldr	r1, [pc, #384]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d04c      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b03      	cmp	r3, #3
 800603c:	d107      	bne.n	800604e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603e:	4b5a      	ldr	r3, [pc, #360]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d121      	bne.n	800608e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e0a6      	b.n	800619c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006056:	4b54      	ldr	r3, [pc, #336]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d115      	bne.n	800608e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e09a      	b.n	800619c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800606e:	4b4e      	ldr	r3, [pc, #312]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e08e      	b.n	800619c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800607e:	4b4a      	ldr	r3, [pc, #296]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e086      	b.n	800619c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800608e:	4b46      	ldr	r3, [pc, #280]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f023 0203 	bic.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	4943      	ldr	r1, [pc, #268]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 800609c:	4313      	orrs	r3, r2
 800609e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a0:	f7fb fec6 	bl	8001e30 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a6:	e00a      	b.n	80060be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a8:	f7fb fec2 	bl	8001e30 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e06e      	b.n	800619c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060be:	4b3a      	ldr	r3, [pc, #232]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 020c 	and.w	r2, r3, #12
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d1eb      	bne.n	80060a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	4b31      	ldr	r3, [pc, #196]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d208      	bcs.n	80060fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ec:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	492b      	ldr	r1, [pc, #172]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060fe:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <HAL_RCC_ClockConfig+0x1ec>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d210      	bcs.n	800612e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610c:	4b25      	ldr	r3, [pc, #148]	; (80061a4 <HAL_RCC_ClockConfig+0x1ec>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 0207 	bic.w	r2, r3, #7
 8006114:	4923      	ldr	r1, [pc, #140]	; (80061a4 <HAL_RCC_ClockConfig+0x1ec>)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	4313      	orrs	r3, r2
 800611a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800611c:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <HAL_RCC_ClockConfig+0x1ec>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d001      	beq.n	800612e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e036      	b.n	800619c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d008      	beq.n	800614c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800613a:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	4918      	ldr	r1, [pc, #96]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006148:	4313      	orrs	r3, r2
 800614a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4910      	ldr	r1, [pc, #64]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006168:	4313      	orrs	r3, r2
 800616a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800616c:	f000 f824 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 8006170:	4602      	mov	r2, r0
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <HAL_RCC_ClockConfig+0x1f0>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	490b      	ldr	r1, [pc, #44]	; (80061ac <HAL_RCC_ClockConfig+0x1f4>)
 800617e:	5ccb      	ldrb	r3, [r1, r3]
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	fa22 f303 	lsr.w	r3, r2, r3
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <HAL_RCC_ClockConfig+0x1f8>)
 800618a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <HAL_RCC_ClockConfig+0x1fc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f7fb fdfd 	bl	8001d90 <HAL_InitTick>
 8006196:	4603      	mov	r3, r0
 8006198:	72fb      	strb	r3, [r7, #11]

  return status;
 800619a:	7afb      	ldrb	r3, [r7, #11]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40022000 	.word	0x40022000
 80061a8:	40021000 	.word	0x40021000
 80061ac:	08007f68 	.word	0x08007f68
 80061b0:	20000004 	.word	0x20000004
 80061b4:	20000008 	.word	0x20000008

080061b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b089      	sub	sp, #36	; 0x24
 80061bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061c6:	4b3e      	ldr	r3, [pc, #248]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061d0:	4b3b      	ldr	r3, [pc, #236]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_RCC_GetSysClockFreq+0x34>
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d121      	bne.n	800622a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d11e      	bne.n	800622a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061ec:	4b34      	ldr	r3, [pc, #208]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d107      	bne.n	8006208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061f8:	4b31      	ldr	r3, [pc, #196]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	61fb      	str	r3, [r7, #28]
 8006206:	e005      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006208:	4b2d      	ldr	r3, [pc, #180]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006214:	4a2b      	ldr	r2, [pc, #172]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800621c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006228:	e00a      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b04      	cmp	r3, #4
 800622e:	d102      	bne.n	8006236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006230:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e004      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b08      	cmp	r3, #8
 800623a:	d101      	bne.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800623c:	4b23      	ldr	r3, [pc, #140]	; (80062cc <HAL_RCC_GetSysClockFreq+0x114>)
 800623e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b0c      	cmp	r3, #12
 8006244:	d134      	bne.n	80062b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006246:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d003      	beq.n	800625e <HAL_RCC_GetSysClockFreq+0xa6>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d003      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0xac>
 800625c:	e005      	b.n	800626a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800625e:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006260:	617b      	str	r3, [r7, #20]
      break;
 8006262:	e005      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006264:	4b19      	ldr	r3, [pc, #100]	; (80062cc <HAL_RCC_GetSysClockFreq+0x114>)
 8006266:	617b      	str	r3, [r7, #20]
      break;
 8006268:	e002      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	617b      	str	r3, [r7, #20]
      break;
 800626e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006270:	4b13      	ldr	r3, [pc, #76]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	3301      	adds	r3, #1
 800627c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800627e:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	0a1b      	lsrs	r3, r3, #8
 8006284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	fb03 f202 	mul.w	r2, r3, r2
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	fbb2 f3f3 	udiv	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	0e5b      	lsrs	r3, r3, #25
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	3301      	adds	r3, #1
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062b0:	69bb      	ldr	r3, [r7, #24]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3724      	adds	r7, #36	; 0x24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40021000 	.word	0x40021000
 80062c4:	08007f80 	.word	0x08007f80
 80062c8:	00f42400 	.word	0x00f42400
 80062cc:	007a1200 	.word	0x007a1200

080062d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062d6:	681b      	ldr	r3, [r3, #0]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000004 	.word	0x20000004

080062e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062ec:	f7ff fff0 	bl	80062d0 <HAL_RCC_GetHCLKFreq>
 80062f0:	4602      	mov	r2, r0
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_RCC_GetPCLK1Freq+0x24>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	4904      	ldr	r1, [pc, #16]	; (8006310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062fe:	5ccb      	ldrb	r3, [r1, r3]
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006308:	4618      	mov	r0, r3
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40021000 	.word	0x40021000
 8006310:	08007f78 	.word	0x08007f78

08006314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006318:	f7ff ffda 	bl	80062d0 <HAL_RCC_GetHCLKFreq>
 800631c:	4602      	mov	r2, r0
 800631e:	4b06      	ldr	r3, [pc, #24]	; (8006338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	0adb      	lsrs	r3, r3, #11
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	4904      	ldr	r1, [pc, #16]	; (800633c <HAL_RCC_GetPCLK2Freq+0x28>)
 800632a:	5ccb      	ldrb	r3, [r1, r3]
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40021000 	.word	0x40021000
 800633c:	08007f78 	.word	0x08007f78

08006340 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006348:	2300      	movs	r3, #0
 800634a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800634c:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006358:	f7ff f9ee 	bl	8005738 <HAL_PWREx_GetVoltageRange>
 800635c:	6178      	str	r0, [r7, #20]
 800635e:	e014      	b.n	800638a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006364:	4a24      	ldr	r2, [pc, #144]	; (80063f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636a:	6593      	str	r3, [r2, #88]	; 0x58
 800636c:	4b22      	ldr	r3, [pc, #136]	; (80063f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800636e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006378:	f7ff f9de 	bl	8005738 <HAL_PWREx_GetVoltageRange>
 800637c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800637e:	4b1e      	ldr	r3, [pc, #120]	; (80063f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006388:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006390:	d10b      	bne.n	80063aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d919      	bls.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2ba0      	cmp	r3, #160	; 0xa0
 800639c:	d902      	bls.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800639e:	2302      	movs	r3, #2
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	e013      	b.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063a4:	2301      	movs	r3, #1
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	e010      	b.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d902      	bls.n	80063b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063b0:	2303      	movs	r3, #3
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	e00a      	b.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b80      	cmp	r3, #128	; 0x80
 80063ba:	d102      	bne.n	80063c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063bc:	2302      	movs	r3, #2
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	e004      	b.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b70      	cmp	r3, #112	; 0x70
 80063c6:	d101      	bne.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063c8:	2301      	movs	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f023 0207 	bic.w	r2, r3, #7
 80063d4:	4909      	ldr	r1, [pc, #36]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063dc:	4b07      	ldr	r3, [pc, #28]	; (80063fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d001      	beq.n	80063ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40021000 	.word	0x40021000
 80063fc:	40022000 	.word	0x40022000

08006400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006408:	2300      	movs	r3, #0
 800640a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800640c:	2300      	movs	r3, #0
 800640e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006418:	2b00      	cmp	r3, #0
 800641a:	d041      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006420:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006424:	d02a      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006426:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800642a:	d824      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800642c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006430:	d008      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006432:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006436:	d81e      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800643c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006440:	d010      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006442:	e018      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006444:	4b86      	ldr	r3, [pc, #536]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	4a85      	ldr	r2, [pc, #532]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800644a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800644e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006450:	e015      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3304      	adds	r3, #4
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fabb 	bl	80069d4 <RCCEx_PLLSAI1_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006462:	e00c      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3320      	adds	r3, #32
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fba6 	bl	8006bbc <RCCEx_PLLSAI2_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006474:	e003      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	74fb      	strb	r3, [r7, #19]
      break;
 800647a:	e000      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800647c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800647e:	7cfb      	ldrb	r3, [r7, #19]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006484:	4b76      	ldr	r3, [pc, #472]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006492:	4973      	ldr	r1, [pc, #460]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800649a:	e001      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d041      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064b4:	d02a      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80064b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064ba:	d824      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c0:	d008      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80064c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c6:	d81e      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80064cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064d0:	d010      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064d2:	e018      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064d4:	4b62      	ldr	r3, [pc, #392]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	4a61      	ldr	r2, [pc, #388]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064e0:	e015      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3304      	adds	r3, #4
 80064e6:	2100      	movs	r1, #0
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fa73 	bl	80069d4 <RCCEx_PLLSAI1_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064f2:	e00c      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3320      	adds	r3, #32
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fb5e 	bl	8006bbc <RCCEx_PLLSAI2_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006504:	e003      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	74fb      	strb	r3, [r7, #19]
      break;
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800650c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800650e:	7cfb      	ldrb	r3, [r7, #19]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006514:	4b52      	ldr	r3, [pc, #328]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006522:	494f      	ldr	r1, [pc, #316]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800652a:	e001      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80a0 	beq.w	800667e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800653e:	2300      	movs	r3, #0
 8006540:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006542:	4b47      	ldr	r3, [pc, #284]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006558:	4b41      	ldr	r3, [pc, #260]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800655a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655c:	4a40      	ldr	r2, [pc, #256]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800655e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006562:	6593      	str	r3, [r2, #88]	; 0x58
 8006564:	4b3e      	ldr	r3, [pc, #248]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006570:	2301      	movs	r3, #1
 8006572:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006574:	4b3b      	ldr	r3, [pc, #236]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3a      	ldr	r2, [pc, #232]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800657a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800657e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006580:	f7fb fc56 	bl	8001e30 <HAL_GetTick>
 8006584:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006586:	e009      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006588:	f7fb fc52 	bl	8001e30 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d902      	bls.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	74fb      	strb	r3, [r7, #19]
        break;
 800659a:	e005      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800659c:	4b31      	ldr	r3, [pc, #196]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0ef      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80065a8:	7cfb      	ldrb	r3, [r7, #19]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d15c      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065ae:	4b2c      	ldr	r3, [pc, #176]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01f      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d019      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065cc:	4b24      	ldr	r3, [pc, #144]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065d8:	4b21      	ldr	r3, [pc, #132]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	4a20      	ldr	r2, [pc, #128]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065e8:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ee:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065f8:	4a19      	ldr	r2, [pc, #100]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d016      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660a:	f7fb fc11 	bl	8001e30 <HAL_GetTick>
 800660e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006610:	e00b      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006612:	f7fb fc0d 	bl	8001e30 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006620:	4293      	cmp	r3, r2
 8006622:	d902      	bls.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	74fb      	strb	r3, [r7, #19]
            break;
 8006628:	e006      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800662a:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800662c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0ec      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10c      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800663e:	4b08      	ldr	r3, [pc, #32]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800664e:	4904      	ldr	r1, [pc, #16]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006656:	e009      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006658:	7cfb      	ldrb	r3, [r7, #19]
 800665a:	74bb      	strb	r3, [r7, #18]
 800665c:	e006      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800665e:	bf00      	nop
 8006660:	40021000 	.word	0x40021000
 8006664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006668:	7cfb      	ldrb	r3, [r7, #19]
 800666a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800666c:	7c7b      	ldrb	r3, [r7, #17]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d105      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006672:	4b9e      	ldr	r3, [pc, #632]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	4a9d      	ldr	r2, [pc, #628]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800667c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800668a:	4b98      	ldr	r3, [pc, #608]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006690:	f023 0203 	bic.w	r2, r3, #3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	4994      	ldr	r1, [pc, #592]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066ac:	4b8f      	ldr	r3, [pc, #572]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f023 020c 	bic.w	r2, r3, #12
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ba:	498c      	ldr	r1, [pc, #560]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066ce:	4b87      	ldr	r3, [pc, #540]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	4983      	ldr	r1, [pc, #524]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00a      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066f0:	4b7e      	ldr	r3, [pc, #504]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	497b      	ldr	r1, [pc, #492]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006712:	4b76      	ldr	r3, [pc, #472]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006720:	4972      	ldr	r1, [pc, #456]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006734:	4b6d      	ldr	r3, [pc, #436]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	496a      	ldr	r1, [pc, #424]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006756:	4b65      	ldr	r3, [pc, #404]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	4961      	ldr	r1, [pc, #388]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006778:	4b5c      	ldr	r3, [pc, #368]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006786:	4959      	ldr	r1, [pc, #356]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800679a:	4b54      	ldr	r3, [pc, #336]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a8:	4950      	ldr	r1, [pc, #320]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067bc:	4b4b      	ldr	r3, [pc, #300]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ca:	4948      	ldr	r1, [pc, #288]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067de:	4b43      	ldr	r3, [pc, #268]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	493f      	ldr	r1, [pc, #252]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d028      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006800:	4b3a      	ldr	r3, [pc, #232]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680e:	4937      	ldr	r1, [pc, #220]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800681a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800681e:	d106      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006820:	4b32      	ldr	r3, [pc, #200]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4a31      	ldr	r2, [pc, #196]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800682a:	60d3      	str	r3, [r2, #12]
 800682c:	e011      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006836:	d10c      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	2101      	movs	r1, #1
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f8c8 	bl	80069d4 <RCCEx_PLLSAI1_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006848:	7cfb      	ldrb	r3, [r7, #19]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800684e:	7cfb      	ldrb	r3, [r7, #19]
 8006850:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d028      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800685e:	4b23      	ldr	r3, [pc, #140]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	491f      	ldr	r1, [pc, #124]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687c:	d106      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800687e:	4b1b      	ldr	r3, [pc, #108]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006888:	60d3      	str	r3, [r2, #12]
 800688a:	e011      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006894:	d10c      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3304      	adds	r3, #4
 800689a:	2101      	movs	r1, #1
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f899 	bl	80069d4 <RCCEx_PLLSAI1_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068a6:	7cfb      	ldrb	r3, [r7, #19]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80068ac:	7cfb      	ldrb	r3, [r7, #19]
 80068ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02b      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068bc:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ca:	4908      	ldr	r1, [pc, #32]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068da:	d109      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4a02      	ldr	r2, [pc, #8]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068e6:	60d3      	str	r3, [r2, #12]
 80068e8:	e014      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80068ea:	bf00      	nop
 80068ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068f8:	d10c      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	2101      	movs	r1, #1
 8006900:	4618      	mov	r0, r3
 8006902:	f000 f867 	bl	80069d4 <RCCEx_PLLSAI1_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800690a:	7cfb      	ldrb	r3, [r7, #19]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006910:	7cfb      	ldrb	r3, [r7, #19]
 8006912:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d02f      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006920:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006926:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692e:	4928      	ldr	r1, [pc, #160]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800693e:	d10d      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3304      	adds	r3, #4
 8006944:	2102      	movs	r1, #2
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f844 	bl	80069d4 <RCCEx_PLLSAI1_Config>
 800694c:	4603      	mov	r3, r0
 800694e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006950:	7cfb      	ldrb	r3, [r7, #19]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d014      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006956:	7cfb      	ldrb	r3, [r7, #19]
 8006958:	74bb      	strb	r3, [r7, #18]
 800695a:	e011      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006964:	d10c      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3320      	adds	r3, #32
 800696a:	2102      	movs	r1, #2
 800696c:	4618      	mov	r0, r3
 800696e:	f000 f925 	bl	8006bbc <RCCEx_PLLSAI2_Config>
 8006972:	4603      	mov	r3, r0
 8006974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006976:	7cfb      	ldrb	r3, [r7, #19]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800697c:	7cfb      	ldrb	r3, [r7, #19]
 800697e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800698e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006992:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800699a:	490d      	ldr	r1, [pc, #52]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069ae:	4b08      	ldr	r3, [pc, #32]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069be:	4904      	ldr	r1, [pc, #16]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80069c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40021000 	.word	0x40021000

080069d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069e2:	4b75      	ldr	r3, [pc, #468]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d018      	beq.n	8006a20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069ee:	4b72      	ldr	r3, [pc, #456]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f003 0203 	and.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d10d      	bne.n	8006a1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
       ||
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a06:	4b6c      	ldr	r3, [pc, #432]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	091b      	lsrs	r3, r3, #4
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
       ||
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d047      	beq.n	8006aaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
 8006a1e:	e044      	b.n	8006aaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d018      	beq.n	8006a5a <RCCEx_PLLSAI1_Config+0x86>
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d825      	bhi.n	8006a78 <RCCEx_PLLSAI1_Config+0xa4>
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d002      	beq.n	8006a36 <RCCEx_PLLSAI1_Config+0x62>
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d009      	beq.n	8006a48 <RCCEx_PLLSAI1_Config+0x74>
 8006a34:	e020      	b.n	8006a78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a36:	4b60      	ldr	r3, [pc, #384]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d11d      	bne.n	8006a7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a46:	e01a      	b.n	8006a7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a48:	4b5b      	ldr	r3, [pc, #364]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d116      	bne.n	8006a82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a58:	e013      	b.n	8006a82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a5a:	4b57      	ldr	r3, [pc, #348]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10f      	bne.n	8006a86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a66:	4b54      	ldr	r3, [pc, #336]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a76:	e006      	b.n	8006a86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7c:	e004      	b.n	8006a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e002      	b.n	8006a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a82:	bf00      	nop
 8006a84:	e000      	b.n	8006a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10d      	bne.n	8006aaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a8e:	4b4a      	ldr	r3, [pc, #296]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6819      	ldr	r1, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	4944      	ldr	r1, [pc, #272]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d17d      	bne.n	8006bac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ab0:	4b41      	ldr	r3, [pc, #260]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a40      	ldr	r2, [pc, #256]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006abc:	f7fb f9b8 	bl	8001e30 <HAL_GetTick>
 8006ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ac2:	e009      	b.n	8006ad8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ac4:	f7fb f9b4 	bl	8001e30 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d902      	bls.n	8006ad8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ad6:	e005      	b.n	8006ae4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ad8:	4b37      	ldr	r3, [pc, #220]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ef      	bne.n	8006ac4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d160      	bne.n	8006bac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d111      	bne.n	8006b14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006af0:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6892      	ldr	r2, [r2, #8]
 8006b00:	0211      	lsls	r1, r2, #8
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68d2      	ldr	r2, [r2, #12]
 8006b06:	0912      	lsrs	r2, r2, #4
 8006b08:	0452      	lsls	r2, r2, #17
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	492a      	ldr	r1, [pc, #168]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	610b      	str	r3, [r1, #16]
 8006b12:	e027      	b.n	8006b64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d112      	bne.n	8006b40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b1a:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6892      	ldr	r2, [r2, #8]
 8006b2a:	0211      	lsls	r1, r2, #8
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6912      	ldr	r2, [r2, #16]
 8006b30:	0852      	lsrs	r2, r2, #1
 8006b32:	3a01      	subs	r2, #1
 8006b34:	0552      	lsls	r2, r2, #21
 8006b36:	430a      	orrs	r2, r1
 8006b38:	491f      	ldr	r1, [pc, #124]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	610b      	str	r3, [r1, #16]
 8006b3e:	e011      	b.n	8006b64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b40:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6892      	ldr	r2, [r2, #8]
 8006b50:	0211      	lsls	r1, r2, #8
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6952      	ldr	r2, [r2, #20]
 8006b56:	0852      	lsrs	r2, r2, #1
 8006b58:	3a01      	subs	r2, #1
 8006b5a:	0652      	lsls	r2, r2, #25
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	4916      	ldr	r1, [pc, #88]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b64:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b70:	f7fb f95e 	bl	8001e30 <HAL_GetTick>
 8006b74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b76:	e009      	b.n	8006b8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b78:	f7fb f95a 	bl	8001e30 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d902      	bls.n	8006b8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	73fb      	strb	r3, [r7, #15]
          break;
 8006b8a:	e005      	b.n	8006b98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0ef      	beq.n	8006b78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	4904      	ldr	r1, [pc, #16]	; (8006bb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	40021000 	.word	0x40021000

08006bbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bca:	4b6a      	ldr	r3, [pc, #424]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d018      	beq.n	8006c08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006bd6:	4b67      	ldr	r3, [pc, #412]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0203 	and.w	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d10d      	bne.n	8006c02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
       ||
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006bee:	4b61      	ldr	r3, [pc, #388]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	091b      	lsrs	r3, r3, #4
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
       ||
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d047      	beq.n	8006c92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	73fb      	strb	r3, [r7, #15]
 8006c06:	e044      	b.n	8006c92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d018      	beq.n	8006c42 <RCCEx_PLLSAI2_Config+0x86>
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d825      	bhi.n	8006c60 <RCCEx_PLLSAI2_Config+0xa4>
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d002      	beq.n	8006c1e <RCCEx_PLLSAI2_Config+0x62>
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d009      	beq.n	8006c30 <RCCEx_PLLSAI2_Config+0x74>
 8006c1c:	e020      	b.n	8006c60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c1e:	4b55      	ldr	r3, [pc, #340]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d11d      	bne.n	8006c66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c2e:	e01a      	b.n	8006c66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c30:	4b50      	ldr	r3, [pc, #320]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d116      	bne.n	8006c6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c40:	e013      	b.n	8006c6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c42:	4b4c      	ldr	r3, [pc, #304]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10f      	bne.n	8006c6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c4e:	4b49      	ldr	r3, [pc, #292]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c5e:	e006      	b.n	8006c6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
      break;
 8006c64:	e004      	b.n	8006c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c66:	bf00      	nop
 8006c68:	e002      	b.n	8006c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c6a:	bf00      	nop
 8006c6c:	e000      	b.n	8006c70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10d      	bne.n	8006c92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c76:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6819      	ldr	r1, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	4939      	ldr	r1, [pc, #228]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d167      	bne.n	8006d68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006c98:	4b36      	ldr	r3, [pc, #216]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a35      	ldr	r2, [pc, #212]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca4:	f7fb f8c4 	bl	8001e30 <HAL_GetTick>
 8006ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006caa:	e009      	b.n	8006cc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cac:	f7fb f8c0 	bl	8001e30 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d902      	bls.n	8006cc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8006cbe:	e005      	b.n	8006ccc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cc0:	4b2c      	ldr	r3, [pc, #176]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1ef      	bne.n	8006cac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d14a      	bne.n	8006d68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d111      	bne.n	8006cfc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cd8:	4b26      	ldr	r3, [pc, #152]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6892      	ldr	r2, [r2, #8]
 8006ce8:	0211      	lsls	r1, r2, #8
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	68d2      	ldr	r2, [r2, #12]
 8006cee:	0912      	lsrs	r2, r2, #4
 8006cf0:	0452      	lsls	r2, r2, #17
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	491f      	ldr	r1, [pc, #124]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	614b      	str	r3, [r1, #20]
 8006cfa:	e011      	b.n	8006d20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6892      	ldr	r2, [r2, #8]
 8006d0c:	0211      	lsls	r1, r2, #8
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6912      	ldr	r2, [r2, #16]
 8006d12:	0852      	lsrs	r2, r2, #1
 8006d14:	3a01      	subs	r2, #1
 8006d16:	0652      	lsls	r2, r2, #25
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	4916      	ldr	r1, [pc, #88]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d20:	4b14      	ldr	r3, [pc, #80]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a13      	ldr	r2, [pc, #76]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2c:	f7fb f880 	bl	8001e30 <HAL_GetTick>
 8006d30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d32:	e009      	b.n	8006d48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d34:	f7fb f87c 	bl	8001e30 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d902      	bls.n	8006d48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	73fb      	strb	r3, [r7, #15]
          break;
 8006d46:	e005      	b.n	8006d54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d48:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0ef      	beq.n	8006d34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d5a:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d5c:	695a      	ldr	r2, [r3, #20]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	4904      	ldr	r1, [pc, #16]	; (8006d74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40021000 	.word	0x40021000

08006d78 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e049      	b.n	8006e1e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	795b      	ldrb	r3, [r3, #5]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fa fe46 	bl	8001a2c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0204 	orr.w	r2, r2, #4
 8006db4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d104      	bne.n	8006dce <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e027      	b.n	8006e1e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006dce:	f7fb f82f 	bl	8001e30 <HAL_GetTick>
 8006dd2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006dd4:	e015      	b.n	8006e02 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006dd6:	f7fb f82b 	bl	8001e30 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d90e      	bls.n	8006e02 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d107      	bne.n	8006e02 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2204      	movs	r2, #4
 8006df6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e00d      	b.n	8006e1e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d0e2      	beq.n	8006dd6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	791b      	ldrb	r3, [r3, #4]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e03d      	b.n	8006ebc <HAL_RNG_GenerateRandomNumber+0x96>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	795b      	ldrb	r3, [r3, #5]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d12c      	bne.n	8006eaa <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e56:	f7fa ffeb 	bl	8001e30 <HAL_GetTick>
 8006e5a:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006e5c:	e011      	b.n	8006e82 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006e5e:	f7fa ffe7 	bl	8001e30 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d90a      	bls.n	8006e82 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e01c      	b.n	8006ebc <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d1e6      	bne.n	8006e5e <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	715a      	strb	r2, [r3, #5]
 8006ea8:	e004      	b.n	8006eb4 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2204      	movs	r2, #4
 8006eae:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	711a      	strb	r2, [r3, #4]

  return status;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	330c      	adds	r3, #12
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff ffa7 	bl	8006e26 <HAL_RNG_GenerateRandomNumber>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	e000      	b.n	8006ee6 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8006ee4:	2300      	movs	r3, #0
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e040      	b.n	8006f82 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7fa fe97 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2224      	movs	r2, #36	; 0x24
 8006f1a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0201 	bic.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f82d 	bl	8006f8c <UART_SetConfig>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e022      	b.n	8006f82 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fad9 	bl	80074fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0201 	orr.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fb60 	bl	8007640 <UART_CheckIdleState>
 8006f80:	4603      	mov	r3, r0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f90:	b08a      	sub	sp, #40	; 0x28
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4ba4      	ldr	r3, [pc, #656]	; (800724c <UART_SetConfig+0x2c0>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a99      	ldr	r2, [pc, #612]	; (8007250 <UART_SetConfig+0x2c4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	430a      	orrs	r2, r1
 800700a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a90      	ldr	r2, [pc, #576]	; (8007254 <UART_SetConfig+0x2c8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d126      	bne.n	8007064 <UART_SetConfig+0xd8>
 8007016:	4b90      	ldr	r3, [pc, #576]	; (8007258 <UART_SetConfig+0x2cc>)
 8007018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701c:	f003 0303 	and.w	r3, r3, #3
 8007020:	2b03      	cmp	r3, #3
 8007022:	d81b      	bhi.n	800705c <UART_SetConfig+0xd0>
 8007024:	a201      	add	r2, pc, #4	; (adr r2, 800702c <UART_SetConfig+0xa0>)
 8007026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702a:	bf00      	nop
 800702c:	0800703d 	.word	0x0800703d
 8007030:	0800704d 	.word	0x0800704d
 8007034:	08007045 	.word	0x08007045
 8007038:	08007055 	.word	0x08007055
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007042:	e116      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704a:	e112      	b.n	8007272 <UART_SetConfig+0x2e6>
 800704c:	2304      	movs	r3, #4
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007052:	e10e      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007054:	2308      	movs	r3, #8
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e10a      	b.n	8007272 <UART_SetConfig+0x2e6>
 800705c:	2310      	movs	r3, #16
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	e106      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a7c      	ldr	r2, [pc, #496]	; (800725c <UART_SetConfig+0x2d0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d138      	bne.n	80070e0 <UART_SetConfig+0x154>
 800706e:	4b7a      	ldr	r3, [pc, #488]	; (8007258 <UART_SetConfig+0x2cc>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007074:	f003 030c 	and.w	r3, r3, #12
 8007078:	2b0c      	cmp	r3, #12
 800707a:	d82d      	bhi.n	80070d8 <UART_SetConfig+0x14c>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0xf8>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070b9 	.word	0x080070b9
 8007088:	080070d9 	.word	0x080070d9
 800708c:	080070d9 	.word	0x080070d9
 8007090:	080070d9 	.word	0x080070d9
 8007094:	080070c9 	.word	0x080070c9
 8007098:	080070d9 	.word	0x080070d9
 800709c:	080070d9 	.word	0x080070d9
 80070a0:	080070d9 	.word	0x080070d9
 80070a4:	080070c1 	.word	0x080070c1
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	080070d9 	.word	0x080070d9
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	2300      	movs	r3, #0
 80070ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070be:	e0d8      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070c0:	2302      	movs	r3, #2
 80070c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c6:	e0d4      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070c8:	2304      	movs	r3, #4
 80070ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ce:	e0d0      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070d0:	2308      	movs	r3, #8
 80070d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d6:	e0cc      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070d8:	2310      	movs	r3, #16
 80070da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070de:	e0c8      	b.n	8007272 <UART_SetConfig+0x2e6>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a5e      	ldr	r2, [pc, #376]	; (8007260 <UART_SetConfig+0x2d4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d125      	bne.n	8007136 <UART_SetConfig+0x1aa>
 80070ea:	4b5b      	ldr	r3, [pc, #364]	; (8007258 <UART_SetConfig+0x2cc>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070f4:	2b30      	cmp	r3, #48	; 0x30
 80070f6:	d016      	beq.n	8007126 <UART_SetConfig+0x19a>
 80070f8:	2b30      	cmp	r3, #48	; 0x30
 80070fa:	d818      	bhi.n	800712e <UART_SetConfig+0x1a2>
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d00a      	beq.n	8007116 <UART_SetConfig+0x18a>
 8007100:	2b20      	cmp	r3, #32
 8007102:	d814      	bhi.n	800712e <UART_SetConfig+0x1a2>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <UART_SetConfig+0x182>
 8007108:	2b10      	cmp	r3, #16
 800710a:	d008      	beq.n	800711e <UART_SetConfig+0x192>
 800710c:	e00f      	b.n	800712e <UART_SetConfig+0x1a2>
 800710e:	2300      	movs	r3, #0
 8007110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007114:	e0ad      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007116:	2302      	movs	r3, #2
 8007118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711c:	e0a9      	b.n	8007272 <UART_SetConfig+0x2e6>
 800711e:	2304      	movs	r3, #4
 8007120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007124:	e0a5      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007126:	2308      	movs	r3, #8
 8007128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712c:	e0a1      	b.n	8007272 <UART_SetConfig+0x2e6>
 800712e:	2310      	movs	r3, #16
 8007130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007134:	e09d      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a4a      	ldr	r2, [pc, #296]	; (8007264 <UART_SetConfig+0x2d8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d125      	bne.n	800718c <UART_SetConfig+0x200>
 8007140:	4b45      	ldr	r3, [pc, #276]	; (8007258 <UART_SetConfig+0x2cc>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714a:	2bc0      	cmp	r3, #192	; 0xc0
 800714c:	d016      	beq.n	800717c <UART_SetConfig+0x1f0>
 800714e:	2bc0      	cmp	r3, #192	; 0xc0
 8007150:	d818      	bhi.n	8007184 <UART_SetConfig+0x1f8>
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d00a      	beq.n	800716c <UART_SetConfig+0x1e0>
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	d814      	bhi.n	8007184 <UART_SetConfig+0x1f8>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <UART_SetConfig+0x1d8>
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d008      	beq.n	8007174 <UART_SetConfig+0x1e8>
 8007162:	e00f      	b.n	8007184 <UART_SetConfig+0x1f8>
 8007164:	2300      	movs	r3, #0
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716a:	e082      	b.n	8007272 <UART_SetConfig+0x2e6>
 800716c:	2302      	movs	r3, #2
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007172:	e07e      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717a:	e07a      	b.n	8007272 <UART_SetConfig+0x2e6>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007182:	e076      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718a:	e072      	b.n	8007272 <UART_SetConfig+0x2e6>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a35      	ldr	r2, [pc, #212]	; (8007268 <UART_SetConfig+0x2dc>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d12a      	bne.n	80071ec <UART_SetConfig+0x260>
 8007196:	4b30      	ldr	r3, [pc, #192]	; (8007258 <UART_SetConfig+0x2cc>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a4:	d01a      	beq.n	80071dc <UART_SetConfig+0x250>
 80071a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071aa:	d81b      	bhi.n	80071e4 <UART_SetConfig+0x258>
 80071ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b0:	d00c      	beq.n	80071cc <UART_SetConfig+0x240>
 80071b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b6:	d815      	bhi.n	80071e4 <UART_SetConfig+0x258>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <UART_SetConfig+0x238>
 80071bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x248>
 80071c2:	e00f      	b.n	80071e4 <UART_SetConfig+0x258>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ca:	e052      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d2:	e04e      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071da:	e04a      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e2:	e046      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ea:	e042      	b.n	8007272 <UART_SetConfig+0x2e6>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a17      	ldr	r2, [pc, #92]	; (8007250 <UART_SetConfig+0x2c4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d13a      	bne.n	800726c <UART_SetConfig+0x2e0>
 80071f6:	4b18      	ldr	r3, [pc, #96]	; (8007258 <UART_SetConfig+0x2cc>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007204:	d01a      	beq.n	800723c <UART_SetConfig+0x2b0>
 8007206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800720a:	d81b      	bhi.n	8007244 <UART_SetConfig+0x2b8>
 800720c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007210:	d00c      	beq.n	800722c <UART_SetConfig+0x2a0>
 8007212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007216:	d815      	bhi.n	8007244 <UART_SetConfig+0x2b8>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <UART_SetConfig+0x298>
 800721c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007220:	d008      	beq.n	8007234 <UART_SetConfig+0x2a8>
 8007222:	e00f      	b.n	8007244 <UART_SetConfig+0x2b8>
 8007224:	2300      	movs	r3, #0
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722a:	e022      	b.n	8007272 <UART_SetConfig+0x2e6>
 800722c:	2302      	movs	r3, #2
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007232:	e01e      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007234:	2304      	movs	r3, #4
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723a:	e01a      	b.n	8007272 <UART_SetConfig+0x2e6>
 800723c:	2308      	movs	r3, #8
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007242:	e016      	b.n	8007272 <UART_SetConfig+0x2e6>
 8007244:	2310      	movs	r3, #16
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724a:	e012      	b.n	8007272 <UART_SetConfig+0x2e6>
 800724c:	efff69f3 	.word	0xefff69f3
 8007250:	40008000 	.word	0x40008000
 8007254:	40013800 	.word	0x40013800
 8007258:	40021000 	.word	0x40021000
 800725c:	40004400 	.word	0x40004400
 8007260:	40004800 	.word	0x40004800
 8007264:	40004c00 	.word	0x40004c00
 8007268:	40005000 	.word	0x40005000
 800726c:	2310      	movs	r3, #16
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a9f      	ldr	r2, [pc, #636]	; (80074f4 <UART_SetConfig+0x568>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d17a      	bne.n	8007372 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800727c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007280:	2b08      	cmp	r3, #8
 8007282:	d824      	bhi.n	80072ce <UART_SetConfig+0x342>
 8007284:	a201      	add	r2, pc, #4	; (adr r2, 800728c <UART_SetConfig+0x300>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072cf 	.word	0x080072cf
 8007294:	080072b9 	.word	0x080072b9
 8007298:	080072cf 	.word	0x080072cf
 800729c:	080072bf 	.word	0x080072bf
 80072a0:	080072cf 	.word	0x080072cf
 80072a4:	080072cf 	.word	0x080072cf
 80072a8:	080072cf 	.word	0x080072cf
 80072ac:	080072c7 	.word	0x080072c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b0:	f7ff f81a 	bl	80062e8 <HAL_RCC_GetPCLK1Freq>
 80072b4:	61f8      	str	r0, [r7, #28]
        break;
 80072b6:	e010      	b.n	80072da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b8:	4b8f      	ldr	r3, [pc, #572]	; (80074f8 <UART_SetConfig+0x56c>)
 80072ba:	61fb      	str	r3, [r7, #28]
        break;
 80072bc:	e00d      	b.n	80072da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072be:	f7fe ff7b 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 80072c2:	61f8      	str	r0, [r7, #28]
        break;
 80072c4:	e009      	b.n	80072da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ca:	61fb      	str	r3, [r7, #28]
        break;
 80072cc:	e005      	b.n	80072da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 80fb 	beq.w	80074d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4413      	add	r3, r2
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d305      	bcc.n	80072fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d903      	bls.n	8007306 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007304:	e0e8      	b.n	80074d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	2200      	movs	r2, #0
 800730a:	461c      	mov	r4, r3
 800730c:	4615      	mov	r5, r2
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	022b      	lsls	r3, r5, #8
 8007318:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800731c:	0222      	lsls	r2, r4, #8
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	6849      	ldr	r1, [r1, #4]
 8007322:	0849      	lsrs	r1, r1, #1
 8007324:	2000      	movs	r0, #0
 8007326:	4688      	mov	r8, r1
 8007328:	4681      	mov	r9, r0
 800732a:	eb12 0a08 	adds.w	sl, r2, r8
 800732e:	eb43 0b09 	adc.w	fp, r3, r9
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	603b      	str	r3, [r7, #0]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007340:	4650      	mov	r0, sl
 8007342:	4659      	mov	r1, fp
 8007344:	f7f8 ff40 	bl	80001c8 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4613      	mov	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007356:	d308      	bcc.n	800736a <UART_SetConfig+0x3de>
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735e:	d204      	bcs.n	800736a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	60da      	str	r2, [r3, #12]
 8007368:	e0b6      	b.n	80074d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007370:	e0b2      	b.n	80074d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737a:	d15e      	bne.n	800743a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800737c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007380:	2b08      	cmp	r3, #8
 8007382:	d828      	bhi.n	80073d6 <UART_SetConfig+0x44a>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0x400>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	080073d7 	.word	0x080073d7
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073d7 	.word	0x080073d7
 80073a4:	080073d7 	.word	0x080073d7
 80073a8:	080073d7 	.word	0x080073d7
 80073ac:	080073cf 	.word	0x080073cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b0:	f7fe ff9a 	bl	80062e8 <HAL_RCC_GetPCLK1Freq>
 80073b4:	61f8      	str	r0, [r7, #28]
        break;
 80073b6:	e014      	b.n	80073e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b8:	f7fe ffac 	bl	8006314 <HAL_RCC_GetPCLK2Freq>
 80073bc:	61f8      	str	r0, [r7, #28]
        break;
 80073be:	e010      	b.n	80073e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c0:	4b4d      	ldr	r3, [pc, #308]	; (80074f8 <UART_SetConfig+0x56c>)
 80073c2:	61fb      	str	r3, [r7, #28]
        break;
 80073c4:	e00d      	b.n	80073e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c6:	f7fe fef7 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 80073ca:	61f8      	str	r0, [r7, #28]
        break;
 80073cc:	e009      	b.n	80073e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d2:	61fb      	str	r3, [r7, #28]
        break;
 80073d4:	e005      	b.n	80073e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d077      	beq.n	80074d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	005a      	lsls	r2, r3, #1
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b0f      	cmp	r3, #15
 8007402:	d916      	bls.n	8007432 <UART_SetConfig+0x4a6>
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740a:	d212      	bcs.n	8007432 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	b29b      	uxth	r3, r3
 8007410:	f023 030f 	bic.w	r3, r3, #15
 8007414:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	085b      	lsrs	r3, r3, #1
 800741a:	b29b      	uxth	r3, r3
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	b29a      	uxth	r2, r3
 8007422:	8afb      	ldrh	r3, [r7, #22]
 8007424:	4313      	orrs	r3, r2
 8007426:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	8afa      	ldrh	r2, [r7, #22]
 800742e:	60da      	str	r2, [r3, #12]
 8007430:	e052      	b.n	80074d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007438:	e04e      	b.n	80074d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800743a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800743e:	2b08      	cmp	r3, #8
 8007440:	d827      	bhi.n	8007492 <UART_SetConfig+0x506>
 8007442:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <UART_SetConfig+0x4bc>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007475 	.word	0x08007475
 8007450:	0800747d 	.word	0x0800747d
 8007454:	08007493 	.word	0x08007493
 8007458:	08007483 	.word	0x08007483
 800745c:	08007493 	.word	0x08007493
 8007460:	08007493 	.word	0x08007493
 8007464:	08007493 	.word	0x08007493
 8007468:	0800748b 	.word	0x0800748b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800746c:	f7fe ff3c 	bl	80062e8 <HAL_RCC_GetPCLK1Freq>
 8007470:	61f8      	str	r0, [r7, #28]
        break;
 8007472:	e014      	b.n	800749e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007474:	f7fe ff4e 	bl	8006314 <HAL_RCC_GetPCLK2Freq>
 8007478:	61f8      	str	r0, [r7, #28]
        break;
 800747a:	e010      	b.n	800749e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800747c:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <UART_SetConfig+0x56c>)
 800747e:	61fb      	str	r3, [r7, #28]
        break;
 8007480:	e00d      	b.n	800749e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007482:	f7fe fe99 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 8007486:	61f8      	str	r0, [r7, #28]
        break;
 8007488:	e009      	b.n	800749e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748e:	61fb      	str	r3, [r7, #28]
        break;
 8007490:	e005      	b.n	800749e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800749c:	bf00      	nop
    }

    if (pclk != 0U)
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d019      	beq.n	80074d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	085a      	lsrs	r2, r3, #1
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	441a      	add	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	2b0f      	cmp	r3, #15
 80074bc:	d909      	bls.n	80074d2 <UART_SetConfig+0x546>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c4:	d205      	bcs.n	80074d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60da      	str	r2, [r3, #12]
 80074d0:	e002      	b.n	80074d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80074e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3728      	adds	r7, #40	; 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f2:	bf00      	nop
 80074f4:	40008000 	.word	0x40008000
 80074f8:	00f42400 	.word	0x00f42400

080074fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01a      	beq.n	8007612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fa:	d10a      	bne.n	8007612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af02      	add	r7, sp, #8
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007650:	f7fa fbee 	bl	8001e30 <HAL_GetTick>
 8007654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b08      	cmp	r3, #8
 8007662:	d10e      	bne.n	8007682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f82d 	bl	80076d2 <UART_WaitOnFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e023      	b.n	80076ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b04      	cmp	r3, #4
 800768e:	d10e      	bne.n	80076ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f817 	bl	80076d2 <UART_WaitOnFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e00d      	b.n	80076ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b09c      	sub	sp, #112	; 0x70
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	603b      	str	r3, [r7, #0]
 80076de:	4613      	mov	r3, r2
 80076e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e2:	e0a5      	b.n	8007830 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	f000 80a1 	beq.w	8007830 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ee:	f7fa fb9f 	bl	8001e30 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d302      	bcc.n	8007704 <UART_WaitOnFlagUntilTimeout+0x32>
 80076fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007700:	2b00      	cmp	r3, #0
 8007702:	d13e      	bne.n	8007782 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007718:	667b      	str	r3, [r7, #100]	; 0x64
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007724:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e6      	bne.n	8007704 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3308      	adds	r3, #8
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	f023 0301 	bic.w	r3, r3, #1
 800774c:	663b      	str	r3, [r7, #96]	; 0x60
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3308      	adds	r3, #8
 8007754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007756:	64ba      	str	r2, [r7, #72]	; 0x48
 8007758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800775c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e5      	bne.n	8007736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2220      	movs	r2, #32
 800776e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e067      	b.n	8007852 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d04f      	beq.n	8007830 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779e:	d147      	bne.n	8007830 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e6      	bne.n	80077aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3308      	adds	r3, #8
 80077e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	613b      	str	r3, [r7, #16]
   return(result);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077fc:	623a      	str	r2, [r7, #32]
 80077fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	69f9      	ldr	r1, [r7, #28]
 8007802:	6a3a      	ldr	r2, [r7, #32]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	61bb      	str	r3, [r7, #24]
   return(result);
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e5      	bne.n	80077dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2220      	movs	r2, #32
 8007820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e010      	b.n	8007852 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69da      	ldr	r2, [r3, #28]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4013      	ands	r3, r2
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	429a      	cmp	r2, r3
 800783e:	bf0c      	ite	eq
 8007840:	2301      	moveq	r3, #1
 8007842:	2300      	movne	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	429a      	cmp	r2, r3
 800784c:	f43f af4a 	beq.w	80076e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3770      	adds	r7, #112	; 0x70
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <__errno>:
 800785c:	4b01      	ldr	r3, [pc, #4]	; (8007864 <__errno+0x8>)
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	20000010 	.word	0x20000010

08007868 <__libc_init_array>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4d0d      	ldr	r5, [pc, #52]	; (80078a0 <__libc_init_array+0x38>)
 800786c:	4c0d      	ldr	r4, [pc, #52]	; (80078a4 <__libc_init_array+0x3c>)
 800786e:	1b64      	subs	r4, r4, r5
 8007870:	10a4      	asrs	r4, r4, #2
 8007872:	2600      	movs	r6, #0
 8007874:	42a6      	cmp	r6, r4
 8007876:	d109      	bne.n	800788c <__libc_init_array+0x24>
 8007878:	4d0b      	ldr	r5, [pc, #44]	; (80078a8 <__libc_init_array+0x40>)
 800787a:	4c0c      	ldr	r4, [pc, #48]	; (80078ac <__libc_init_array+0x44>)
 800787c:	f000 f8da 	bl	8007a34 <_init>
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	2600      	movs	r6, #0
 8007886:	42a6      	cmp	r6, r4
 8007888:	d105      	bne.n	8007896 <__libc_init_array+0x2e>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007890:	4798      	blx	r3
 8007892:	3601      	adds	r6, #1
 8007894:	e7ee      	b.n	8007874 <__libc_init_array+0xc>
 8007896:	f855 3b04 	ldr.w	r3, [r5], #4
 800789a:	4798      	blx	r3
 800789c:	3601      	adds	r6, #1
 800789e:	e7f2      	b.n	8007886 <__libc_init_array+0x1e>
 80078a0:	08007fb8 	.word	0x08007fb8
 80078a4:	08007fb8 	.word	0x08007fb8
 80078a8:	08007fb8 	.word	0x08007fb8
 80078ac:	08007fbc 	.word	0x08007fbc

080078b0 <malloc>:
 80078b0:	4b02      	ldr	r3, [pc, #8]	; (80078bc <malloc+0xc>)
 80078b2:	4601      	mov	r1, r0
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	f000 b82b 	b.w	8007910 <_malloc_r>
 80078ba:	bf00      	nop
 80078bc:	20000010 	.word	0x20000010

080078c0 <memset>:
 80078c0:	4402      	add	r2, r0
 80078c2:	4603      	mov	r3, r0
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d100      	bne.n	80078ca <memset+0xa>
 80078c8:	4770      	bx	lr
 80078ca:	f803 1b01 	strb.w	r1, [r3], #1
 80078ce:	e7f9      	b.n	80078c4 <memset+0x4>

080078d0 <sbrk_aligned>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	4e0e      	ldr	r6, [pc, #56]	; (800790c <sbrk_aligned+0x3c>)
 80078d4:	460c      	mov	r4, r1
 80078d6:	6831      	ldr	r1, [r6, #0]
 80078d8:	4605      	mov	r5, r0
 80078da:	b911      	cbnz	r1, 80078e2 <sbrk_aligned+0x12>
 80078dc:	f000 f88c 	bl	80079f8 <_sbrk_r>
 80078e0:	6030      	str	r0, [r6, #0]
 80078e2:	4621      	mov	r1, r4
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 f887 	bl	80079f8 <_sbrk_r>
 80078ea:	1c43      	adds	r3, r0, #1
 80078ec:	d00a      	beq.n	8007904 <sbrk_aligned+0x34>
 80078ee:	1cc4      	adds	r4, r0, #3
 80078f0:	f024 0403 	bic.w	r4, r4, #3
 80078f4:	42a0      	cmp	r0, r4
 80078f6:	d007      	beq.n	8007908 <sbrk_aligned+0x38>
 80078f8:	1a21      	subs	r1, r4, r0
 80078fa:	4628      	mov	r0, r5
 80078fc:	f000 f87c 	bl	80079f8 <_sbrk_r>
 8007900:	3001      	adds	r0, #1
 8007902:	d101      	bne.n	8007908 <sbrk_aligned+0x38>
 8007904:	f04f 34ff 	mov.w	r4, #4294967295
 8007908:	4620      	mov	r0, r4
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	20000298 	.word	0x20000298

08007910 <_malloc_r>:
 8007910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007914:	1ccd      	adds	r5, r1, #3
 8007916:	f025 0503 	bic.w	r5, r5, #3
 800791a:	3508      	adds	r5, #8
 800791c:	2d0c      	cmp	r5, #12
 800791e:	bf38      	it	cc
 8007920:	250c      	movcc	r5, #12
 8007922:	2d00      	cmp	r5, #0
 8007924:	4607      	mov	r7, r0
 8007926:	db01      	blt.n	800792c <_malloc_r+0x1c>
 8007928:	42a9      	cmp	r1, r5
 800792a:	d905      	bls.n	8007938 <_malloc_r+0x28>
 800792c:	230c      	movs	r3, #12
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	2600      	movs	r6, #0
 8007932:	4630      	mov	r0, r6
 8007934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007938:	4e2e      	ldr	r6, [pc, #184]	; (80079f4 <_malloc_r+0xe4>)
 800793a:	f000 f86d 	bl	8007a18 <__malloc_lock>
 800793e:	6833      	ldr	r3, [r6, #0]
 8007940:	461c      	mov	r4, r3
 8007942:	bb34      	cbnz	r4, 8007992 <_malloc_r+0x82>
 8007944:	4629      	mov	r1, r5
 8007946:	4638      	mov	r0, r7
 8007948:	f7ff ffc2 	bl	80078d0 <sbrk_aligned>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	4604      	mov	r4, r0
 8007950:	d14d      	bne.n	80079ee <_malloc_r+0xde>
 8007952:	6834      	ldr	r4, [r6, #0]
 8007954:	4626      	mov	r6, r4
 8007956:	2e00      	cmp	r6, #0
 8007958:	d140      	bne.n	80079dc <_malloc_r+0xcc>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	4631      	mov	r1, r6
 800795e:	4638      	mov	r0, r7
 8007960:	eb04 0803 	add.w	r8, r4, r3
 8007964:	f000 f848 	bl	80079f8 <_sbrk_r>
 8007968:	4580      	cmp	r8, r0
 800796a:	d13a      	bne.n	80079e2 <_malloc_r+0xd2>
 800796c:	6821      	ldr	r1, [r4, #0]
 800796e:	3503      	adds	r5, #3
 8007970:	1a6d      	subs	r5, r5, r1
 8007972:	f025 0503 	bic.w	r5, r5, #3
 8007976:	3508      	adds	r5, #8
 8007978:	2d0c      	cmp	r5, #12
 800797a:	bf38      	it	cc
 800797c:	250c      	movcc	r5, #12
 800797e:	4629      	mov	r1, r5
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff ffa5 	bl	80078d0 <sbrk_aligned>
 8007986:	3001      	adds	r0, #1
 8007988:	d02b      	beq.n	80079e2 <_malloc_r+0xd2>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	442b      	add	r3, r5
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	e00e      	b.n	80079b0 <_malloc_r+0xa0>
 8007992:	6822      	ldr	r2, [r4, #0]
 8007994:	1b52      	subs	r2, r2, r5
 8007996:	d41e      	bmi.n	80079d6 <_malloc_r+0xc6>
 8007998:	2a0b      	cmp	r2, #11
 800799a:	d916      	bls.n	80079ca <_malloc_r+0xba>
 800799c:	1961      	adds	r1, r4, r5
 800799e:	42a3      	cmp	r3, r4
 80079a0:	6025      	str	r5, [r4, #0]
 80079a2:	bf18      	it	ne
 80079a4:	6059      	strne	r1, [r3, #4]
 80079a6:	6863      	ldr	r3, [r4, #4]
 80079a8:	bf08      	it	eq
 80079aa:	6031      	streq	r1, [r6, #0]
 80079ac:	5162      	str	r2, [r4, r5]
 80079ae:	604b      	str	r3, [r1, #4]
 80079b0:	4638      	mov	r0, r7
 80079b2:	f104 060b 	add.w	r6, r4, #11
 80079b6:	f000 f835 	bl	8007a24 <__malloc_unlock>
 80079ba:	f026 0607 	bic.w	r6, r6, #7
 80079be:	1d23      	adds	r3, r4, #4
 80079c0:	1af2      	subs	r2, r6, r3
 80079c2:	d0b6      	beq.n	8007932 <_malloc_r+0x22>
 80079c4:	1b9b      	subs	r3, r3, r6
 80079c6:	50a3      	str	r3, [r4, r2]
 80079c8:	e7b3      	b.n	8007932 <_malloc_r+0x22>
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	bf0c      	ite	eq
 80079d0:	6032      	streq	r2, [r6, #0]
 80079d2:	605a      	strne	r2, [r3, #4]
 80079d4:	e7ec      	b.n	80079b0 <_malloc_r+0xa0>
 80079d6:	4623      	mov	r3, r4
 80079d8:	6864      	ldr	r4, [r4, #4]
 80079da:	e7b2      	b.n	8007942 <_malloc_r+0x32>
 80079dc:	4634      	mov	r4, r6
 80079de:	6876      	ldr	r6, [r6, #4]
 80079e0:	e7b9      	b.n	8007956 <_malloc_r+0x46>
 80079e2:	230c      	movs	r3, #12
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	4638      	mov	r0, r7
 80079e8:	f000 f81c 	bl	8007a24 <__malloc_unlock>
 80079ec:	e7a1      	b.n	8007932 <_malloc_r+0x22>
 80079ee:	6025      	str	r5, [r4, #0]
 80079f0:	e7de      	b.n	80079b0 <_malloc_r+0xa0>
 80079f2:	bf00      	nop
 80079f4:	20000294 	.word	0x20000294

080079f8 <_sbrk_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d06      	ldr	r5, [pc, #24]	; (8007a14 <_sbrk_r+0x1c>)
 80079fc:	2300      	movs	r3, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	602b      	str	r3, [r5, #0]
 8007a04:	f7fa f8a6 	bl	8001b54 <_sbrk>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_sbrk_r+0x1a>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_sbrk_r+0x1a>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	2000029c 	.word	0x2000029c

08007a18 <__malloc_lock>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__malloc_lock+0x8>)
 8007a1a:	f000 b809 	b.w	8007a30 <__retarget_lock_acquire_recursive>
 8007a1e:	bf00      	nop
 8007a20:	200002a0 	.word	0x200002a0

08007a24 <__malloc_unlock>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__malloc_unlock+0x8>)
 8007a26:	f000 b804 	b.w	8007a32 <__retarget_lock_release_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	200002a0 	.word	0x200002a0

08007a30 <__retarget_lock_acquire_recursive>:
 8007a30:	4770      	bx	lr

08007a32 <__retarget_lock_release_recursive>:
 8007a32:	4770      	bx	lr

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
