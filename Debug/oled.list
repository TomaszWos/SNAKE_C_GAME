
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a84  08007a84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a8c  08007a8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000074  08007b08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08007b08  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015469  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f5d  00000000  00000000  0003550d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00038470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00039650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002931b  00000000  00000000  0003a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c11  00000000  00000000  000639f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdb65  00000000  00000000  0007a604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  001781bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007508 	.word	0x08007508

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08007508 	.word	0x08007508

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4604      	mov	r4, r0
 80004d4:	4608      	mov	r0, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	461a      	mov	r2, r3
 80004da:	4623      	mov	r3, r4
 80004dc:	80fb      	strh	r3, [r7, #6]
 80004de:	4603      	mov	r3, r0
 80004e0:	80bb      	strh	r3, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	70fb      	strb	r3, [r7, #3]
 80004e6:	4613      	mov	r3, r2
 80004e8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80004ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ee:	2b7f      	cmp	r3, #127	; 0x7f
 80004f0:	f300 8100 	bgt.w	80006f4 <GFX_draw_char+0x228>
 80004f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004f8:	2b3f      	cmp	r3, #63	; 0x3f
 80004fa:	f300 80fb 	bgt.w	80006f4 <GFX_draw_char+0x228>
 80004fe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000502:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000506:	4613      	mov	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4413      	add	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	440b      	add	r3, r1
 8000510:	2b00      	cmp	r3, #0
 8000512:	f340 80ef 	ble.w	80006f4 <GFX_draw_char+0x228>
 8000516:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800051a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	4413      	add	r3, r2
 8000522:	2b00      	cmp	r3, #0
 8000524:	f340 80e6 	ble.w	80006f4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e0aa      	b.n	8000684 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800052e:	78fa      	ldrb	r2, [r7, #3]
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	441a      	add	r2, r3
 8000536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800053a:	4413      	add	r3, r2
 800053c:	4a6f      	ldr	r2, [pc, #444]	; (80006fc <GFX_draw_char+0x230>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000542:	2307      	movs	r3, #7
 8000544:	73bb      	strb	r3, [r7, #14]
 8000546:	e092      	b.n	800066e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000548:	7b7b      	ldrb	r3, [r7, #13]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d040      	beq.n	80005d4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000556:	2b01      	cmp	r3, #1
 8000558:	d116      	bne.n	8000588 <GFX_draw_char+0xbc>
 800055a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800055e:	2b01      	cmp	r3, #1
 8000560:	d112      	bne.n	8000588 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	b29a      	uxth	r2, r3
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4413      	add	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	b218      	sxth	r0, r3
 8000570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000574:	b29a      	uxth	r2, r3
 8000576:	88bb      	ldrh	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	b29b      	uxth	r3, r3
 800057c:	b21b      	sxth	r3, r3
 800057e:	883a      	ldrh	r2, [r7, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f000 f9f7 	bl	8000974 <SSD1306_draw_pixel>
 8000586:	e069      	b.n	800065c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058c:	b29a      	uxth	r2, r3
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	b29b      	uxth	r3, r3
 8000594:	fb12 f303 	smulbb	r3, r2, r3
 8000598:	b29a      	uxth	r2, r3
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	4413      	add	r3, r2
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b218      	sxth	r0, r3
 80005a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	fb12 f303 	smulbb	r3, r2, r3
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b219      	sxth	r1, r3
 80005bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005c6:	b21c      	sxth	r4, r3
 80005c8:	883b      	ldrh	r3, [r7, #0]
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4623      	mov	r3, r4
 80005ce:	f000 f8d0 	bl	8000772 <GFX_draw_fill_rect>
 80005d2:	e043      	b.n	800065c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80005d4:	8c3a      	ldrh	r2, [r7, #32]
 80005d6:	883b      	ldrh	r3, [r7, #0]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d03f      	beq.n	800065c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80005dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d116      	bne.n	8000612 <GFX_draw_char+0x146>
 80005e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d112      	bne.n	8000612 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80005ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	4413      	add	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	b218      	sxth	r0, r3
 80005fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	b21b      	sxth	r3, r3
 8000608:	8c3a      	ldrh	r2, [r7, #32]
 800060a:	4619      	mov	r1, r3
 800060c:	f000 f9b2 	bl	8000974 <SSD1306_draw_pixel>
 8000610:	e024      	b.n	800065c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	b29a      	uxth	r2, r3
 8000618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800061c:	b29b      	uxth	r3, r3
 800061e:	fb12 f303 	smulbb	r3, r2, r3
 8000622:	b29a      	uxth	r2, r3
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	4413      	add	r3, r2
 8000628:	b29b      	uxth	r3, r3
 800062a:	b218      	sxth	r0, r3
 800062c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000636:	b29b      	uxth	r3, r3
 8000638:	fb12 f303 	smulbb	r3, r2, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	b219      	sxth	r1, r3
 8000646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800064a:	b21a      	sxth	r2, r3
 800064c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000650:	b21c      	sxth	r4, r3
 8000652:	8c3b      	ldrh	r3, [r7, #32]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4623      	mov	r3, r4
 8000658:	f000 f88b 	bl	8000772 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	73bb      	strb	r3, [r7, #14]
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	085b      	lsrs	r3, r3, #1
 800066c:	737b      	strb	r3, [r7, #13]
 800066e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000672:	2b00      	cmp	r3, #0
 8000674:	f6bf af68 	bge.w	8000548 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3301      	adds	r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000688:	2b04      	cmp	r3, #4
 800068a:	f77f af50 	ble.w	800052e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800068e:	8c3a      	ldrh	r2, [r7, #32]
 8000690:	883b      	ldrh	r3, [r7, #0]
 8000692:	429a      	cmp	r2, r3
 8000694:	d02f      	beq.n	80006f6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000696:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800069a:	2b01      	cmp	r3, #1
 800069c:	d10e      	bne.n	80006bc <GFX_draw_char+0x1f0>
 800069e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d10a      	bne.n	80006bc <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	3305      	adds	r3, #5
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	b218      	sxth	r0, r3
 80006ae:	8c3b      	ldrh	r3, [r7, #32]
 80006b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006b4:	2208      	movs	r2, #8
 80006b6:	f000 fad7 	bl	8000c68 <SSD1306_draw_fast_vline>
 80006ba:	e01c      	b.n	80006f6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80006bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	4413      	add	r3, r2
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	b218      	sxth	r0, r3
 80006d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006dc:	b29b      	uxth	r3, r3
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b21c      	sxth	r4, r3
 80006e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006e8:	8c3b      	ldrh	r3, [r7, #32]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4623      	mov	r3, r4
 80006ee:	f000 f840 	bl	8000772 <GFX_draw_fill_rect>
 80006f2:	e000      	b.n	80006f6 <GFX_draw_char+0x22a>
		return;
 80006f4:	bf00      	nop
		}
	}
}
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	0800752c 	.word	0x0800752c

08000700 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af04      	add	r7, sp, #16
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	461a      	mov	r2, r3
 800070a:	4603      	mov	r3, r0
 800070c:	81fb      	strh	r3, [r7, #14]
 800070e:	460b      	mov	r3, r1
 8000710:	81bb      	strh	r3, [r7, #12]
 8000712:	4613      	mov	r3, r2
 8000714:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	75fb      	strb	r3, [r7, #23]
	while(*c)
 800071a:	e021      	b.n	8000760 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	b29a      	uxth	r2, r3
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	4413      	add	r3, r2
 8000724:	b29b      	uxth	r3, r3
 8000726:	b218      	sxth	r0, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	88fc      	ldrh	r4, [r7, #6]
 800072e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000732:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	4623      	mov	r3, r4
 8000744:	f7ff fec2 	bl	80004cc <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000748:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800074c:	461a      	mov	r2, r3
 800074e:	00d2      	lsls	r2, r2, #3
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	b2da      	uxtb	r2, r3
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	4413      	add	r3, r2
 8000758:	75fb      	strb	r3, [r7, #23]
		c++;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	3301      	adds	r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1d9      	bne.n	800071c <GFX_draw_string+0x1c>
	}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd90      	pop	{r4, r7, pc}

08000772 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000772:	b590      	push	{r4, r7, lr}
 8000774:	b085      	sub	sp, #20
 8000776:	af00      	add	r7, sp, #0
 8000778:	4604      	mov	r4, r0
 800077a:	4608      	mov	r0, r1
 800077c:	4611      	mov	r1, r2
 800077e:	461a      	mov	r2, r3
 8000780:	4623      	mov	r3, r4
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4603      	mov	r3, r0
 8000786:	80bb      	strh	r3, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
 800078c:	4613      	mov	r3, r2
 800078e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	81fb      	strh	r3, [r7, #14]
 8000794:	e00e      	b.n	80007b4 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000796:	8c3b      	ldrh	r3, [r7, #32]
 8000798:	f9b7 2000 	ldrsh.w	r2, [r7]
 800079c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007a0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80007a4:	f000 fa60 	bl	8000c68 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 80007a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	3301      	adds	r3, #1
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	81fb      	strh	r3, [r7, #14]
 80007b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007b8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80007bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007c0:	440b      	add	r3, r1
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbe7      	blt.n	8000796 <GFX_draw_fill_rect+0x24>
	}
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd90      	pop	{r4, r7, pc}

080007d0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af04      	add	r7, sp, #16
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	4613      	mov	r3, r2
 80007de:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	9302      	str	r3, [sp, #8]
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2178      	movs	r1, #120	; 0x78
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <platform_write+0x34>)
 80007f6:	f002 fedb 	bl	80035b0 <HAL_I2C_Mem_Write>
	return 0;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000144 	.word	0x20000144

08000808 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af02      	add	r7, sp, #8
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	b29a      	uxth	r2, r3
 800081c:	88bb      	ldrh	r3, [r7, #4]
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2301      	movs	r3, #1
 8000826:	2178      	movs	r1, #120	; 0x78
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <platform_write_dma+0x30>)
 800082a:	f002 ffd5 	bl	80037d8 <HAL_I2C_Mem_Write_DMA>
	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000144 	.word	0x20000144

0800083c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff ffbf 	bl	80007d0 <platform_write>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <SSD1306_init>:

bool SSD1306_init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000862:	2302      	movs	r3, #2
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	238f      	movs	r3, #143	; 0x8f
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	2302      	movs	r3, #2
 800086c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <SSD1306_init+0x114>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10d      	bne.n	8000892 <SSD1306_init+0x36>
 8000876:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800087a:	f006 fd83 	bl	8007384 <malloc>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <SSD1306_init+0x114>)
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <SSD1306_init+0x114>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <SSD1306_init+0x36>
  {
    return false;
 800088e:	2300      	movs	r3, #0
 8000890:	e06a      	b.n	8000968 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8000892:	f000 f949 	bl	8000b28 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000896:	20ae      	movs	r0, #174	; 0xae
 8000898:	f7ff ffd0 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800089c:	20d5      	movs	r0, #213	; 0xd5
 800089e:	f7ff ffcd 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 80008a2:	20e0      	movs	r0, #224	; 0xe0
 80008a4:	f7ff ffca 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80008a8:	20a8      	movs	r0, #168	; 0xa8
 80008aa:	f7ff ffc7 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80008ae:	203f      	movs	r0, #63	; 0x3f
 80008b0:	f7ff ffc4 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80008b4:	20d3      	movs	r0, #211	; 0xd3
 80008b6:	f7ff ffc1 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ffbe 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80008c0:	2040      	movs	r0, #64	; 0x40
 80008c2:	f7ff ffbb 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80008c6:	208d      	movs	r0, #141	; 0x8d
 80008c8:	f7ff ffb8 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d101      	bne.n	80008d6 <SSD1306_init+0x7a>
 80008d2:	2310      	movs	r3, #16
 80008d4:	e000      	b.n	80008d8 <SSD1306_init+0x7c>
 80008d6:	2314      	movs	r3, #20
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffaf 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80008de:	2020      	movs	r0, #32
 80008e0:	f7ff ffac 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ffa9 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80008ea:	20b0      	movs	r0, #176	; 0xb0
 80008ec:	f7ff ffa6 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80008f0:	20c8      	movs	r0, #200	; 0xc8
 80008f2:	f7ff ffa3 	bl	800083c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80008f6:	2312      	movs	r3, #18
 80008f8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80008fa:	797b      	ldrb	r3, [r7, #5]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d101      	bne.n	8000904 <SSD1306_init+0xa8>
 8000900:	239f      	movs	r3, #159	; 0x9f
 8000902:	e000      	b.n	8000906 <SSD1306_init+0xaa>
 8000904:	23cf      	movs	r3, #207	; 0xcf
 8000906:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8000908:	20da      	movs	r0, #218	; 0xda
 800090a:	f7ff ff97 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff93 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8000916:	2081      	movs	r0, #129	; 0x81
 8000918:	f7ff ff90 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff8c 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000924:	20d9      	movs	r0, #217	; 0xd9
 8000926:	f7ff ff89 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d101      	bne.n	8000934 <SSD1306_init+0xd8>
 8000930:	2322      	movs	r3, #34	; 0x22
 8000932:	e000      	b.n	8000936 <SSD1306_init+0xda>
 8000934:	23f1      	movs	r3, #241	; 0xf1
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff80 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 800093c:	20db      	movs	r0, #219	; 0xdb
 800093e:	f7ff ff7d 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000942:	2040      	movs	r0, #64	; 0x40
 8000944:	f7ff ff7a 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000948:	20a4      	movs	r0, #164	; 0xa4
 800094a:	f7ff ff77 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800094e:	20a6      	movs	r0, #166	; 0xa6
 8000950:	f7ff ff74 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000954:	202e      	movs	r0, #46	; 0x2e
 8000956:	f7ff ff71 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 800095a:	20af      	movs	r0, #175	; 0xaf
 800095c:	f7ff ff6e 	bl	800083c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000960:	2002      	movs	r0, #2
 8000962:	f000 fb19 	bl	8000f98 <SSD1306_set_rotation>
  return true;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000090 	.word	0x20000090

08000974 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	460b      	mov	r3, r1
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f2c0 80c4 	blt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 8000990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000994:	2b7f      	cmp	r3, #127	; 0x7f
 8000996:	f300 80bf 	bgt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f2c0 80ba 	blt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 80009a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009a8:	2b3f      	cmp	r3, #63	; 0x3f
 80009aa:	f300 80b5 	bgt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 80009ae:	f000 fb03 	bl	8000fb8 <SSD1306_get_rotation>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d023      	beq.n	8000a00 <SSD1306_draw_pixel+0x8c>
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	dc33      	bgt.n	8000a24 <SSD1306_draw_pixel+0xb0>
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d002      	beq.n	80009c6 <SSD1306_draw_pixel+0x52>
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d012      	beq.n	80009ea <SSD1306_draw_pixel+0x76>
 80009c4:	e02e      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4053      	eors	r3, r2
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	88ba      	ldrh	r2, [r7, #4]
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	4053      	eors	r3, r2
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	4053      	eors	r3, r2
 80009dc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	80fb      	strh	r3, [r7, #6]
				break;
 80009e8:	e01c      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	80bb      	strh	r3, [r7, #4]
				break;
 80009fe:	e011      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	4053      	eors	r3, r2
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	88ba      	ldrh	r2, [r7, #4]
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	80bb      	strh	r3, [r7, #4]
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	4053      	eors	r3, r2
 8000a16:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000a18:	88bb      	ldrh	r3, [r7, #4]
 8000a1a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	80bb      	strh	r3, [r7, #4]
				break;
 8000a22:	bf00      	nop
		}

		switch (color)
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d051      	beq.n	8000ace <SSD1306_draw_pixel+0x15a>
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	dc75      	bgt.n	8000b1a <SSD1306_draw_pixel+0x1a6>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d026      	beq.n	8000a80 <SSD1306_draw_pixel+0x10c>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d171      	bne.n	8000b1a <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da00      	bge.n	8000a48 <SSD1306_draw_pixel+0xd4>
 8000a46:	3307      	adds	r3, #7
 8000a48:	10db      	asrs	r3, r3, #3
 8000a4a:	b218      	sxth	r0, r3
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	01db      	lsls	r3, r3, #7
 8000a50:	440b      	add	r3, r1
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25a      	sxtb	r2, r3
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b25c      	sxtb	r4, r3
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a72:	4602      	mov	r2, r0
 8000a74:	01d2      	lsls	r2, r2, #7
 8000a76:	440a      	add	r2, r1
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2e2      	uxtb	r2, r4
 8000a7c:	701a      	strb	r2, [r3, #0]
				break;
 8000a7e:	e04c      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da00      	bge.n	8000a92 <SSD1306_draw_pixel+0x11e>
 8000a90:	3307      	adds	r3, #7
 8000a92:	10db      	asrs	r3, r3, #3
 8000a94:	b218      	sxth	r0, r3
 8000a96:	4603      	mov	r3, r0
 8000a98:	01db      	lsls	r3, r3, #7
 8000a9a:	440b      	add	r3, r1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b25c      	sxtb	r4, r3
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	01d2      	lsls	r2, r2, #7
 8000ac4:	440a      	add	r2, r1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b2e2      	uxtb	r2, r4
 8000aca:	701a      	strb	r2, [r3, #0]
				break;
 8000acc:	e025      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ad6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da00      	bge.n	8000ae0 <SSD1306_draw_pixel+0x16c>
 8000ade:	3307      	adds	r3, #7
 8000ae0:	10db      	asrs	r3, r3, #3
 8000ae2:	b218      	sxth	r0, r3
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	01db      	lsls	r3, r3, #7
 8000ae8:	440b      	add	r3, r1
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	4053      	eors	r3, r2
 8000b00:	b25c      	sxtb	r4, r3
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	01d2      	lsls	r2, r2, #7
 8000b0e:	440a      	add	r2, r1
 8000b10:	4413      	add	r3, r2
 8000b12:	b2e2      	uxtb	r2, r4
 8000b14:	701a      	strb	r2, [r3, #0]
				break;
 8000b16:	e000      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
		}
	}
 8000b18:	bf00      	nop
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000090 	.word	0x20000090

08000b28 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SSD1306_display_clear+0x18>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 fc2c 	bl	8007394 <memset>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000090 	.word	0x20000090

08000b44 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000b44:	b490      	push	{r4, r7}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4623      	mov	r3, r4
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	4603      	mov	r3, r0
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	807b      	strh	r3, [r7, #2]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000b62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db75      	blt.n	8000c56 <SSD1306_draw_fast_hline_internal+0x112>
 8000b6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b70:	dc71      	bgt.n	8000c56 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da06      	bge.n	8000b88 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000b88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b90:	4413      	add	r3, r2
 8000b92:	2b80      	cmp	r3, #128	; 0x80
 8000b94:	dd04      	ble.n	8000ba0 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000ba0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	dd56      	ble.n	8000c56 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <SSD1306_draw_fast_hline_internal+0x120>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da00      	bge.n	8000bb6 <SSD1306_draw_fast_hline_internal+0x72>
 8000bb4:	3307      	adds	r3, #7
 8000bb6:	10db      	asrs	r3, r3, #3
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	01d9      	lsls	r1, r3, #7
 8000bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	2201      	movs	r2, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000bd4:	883b      	ldrh	r3, [r7, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d034      	beq.n	8000c44 <SSD1306_draw_fast_hline_internal+0x100>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	dc3c      	bgt.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d013      	beq.n	8000c0a <SSD1306_draw_fast_hline_internal+0xc6>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d138      	bne.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 8000be6:	e007      	b.n	8000bf8 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	60fa      	str	r2, [r7, #12]
 8000bee:	7819      	ldrb	r1, [r3, #0]
 8000bf0:	7afa      	ldrb	r2, [r7, #11]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000bf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	3a01      	subs	r2, #1
 8000c00:	b292      	uxth	r2, r2
 8000c02:	807a      	strh	r2, [r7, #2]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1ef      	bne.n	8000be8 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000c08:	e026      	b.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 8000c0a:	7afb      	ldrb	r3, [r7, #11]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000c10:	e007      	b.n	8000c22 <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60fa      	str	r2, [r7, #12]
 8000c18:	7819      	ldrb	r1, [r3, #0]
 8000c1a:	7afa      	ldrb	r2, [r7, #11]
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000c22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	3a01      	subs	r2, #1
 8000c2a:	b292      	uxth	r2, r2
 8000c2c:	807a      	strh	r2, [r7, #2]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1ef      	bne.n	8000c12 <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000c32:	e011      	b.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60fa      	str	r2, [r7, #12]
 8000c3a:	7819      	ldrb	r1, [r3, #0]
 8000c3c:	7afa      	ldrb	r2, [r7, #11]
 8000c3e:	404a      	eors	r2, r1
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000c44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	3a01      	subs	r2, #1
 8000c4c:	b292      	uxth	r2, r2
 8000c4e:	807a      	strh	r2, [r7, #2]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1ef      	bne.n	8000c34 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000c54:	e000      	b.n	8000c58 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 8000c56:	bf00      	nop
	}
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc90      	pop	{r4, r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000090 	.word	0x20000090

08000c68 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4623      	mov	r3, r4
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80bb      	strh	r3, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	807b      	strh	r3, [r7, #2]
 8000c82:	4613      	mov	r3, r2
 8000c84:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000c8a:	f000 f995 	bl	8000fb8 <SSD1306_get_rotation>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d033      	beq.n	8000cfc <SSD1306_draw_fast_vline+0x94>
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	dc45      	bgt.n	8000d24 <SSD1306_draw_fast_vline+0xbc>
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d002      	beq.n	8000ca2 <SSD1306_draw_fast_vline+0x3a>
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d01b      	beq.n	8000cd8 <SSD1306_draw_fast_vline+0x70>
 8000ca0:	e040      	b.n	8000d24 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	4053      	eors	r3, r2
 8000cac:	80fb      	strh	r3, [r7, #6]
 8000cae:	88ba      	ldrh	r2, [r7, #4]
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4053      	eors	r3, r2
 8000cb4:	80bb      	strh	r3, [r7, #4]
 8000cb6:	88fa      	ldrh	r2, [r7, #6]
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	4053      	eors	r3, r2
 8000cbc:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8000cc8:	88fa      	ldrh	r2, [r7, #6]
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	80fb      	strh	r3, [r7, #6]
  			break;
 8000cd6:	e025      	b.n	8000d24 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000cec:	88ba      	ldrh	r2, [r7, #4]
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000cfa:	e013      	b.n	8000d24 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000d00:	88fa      	ldrh	r2, [r7, #6]
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	4053      	eors	r3, r2
 8000d06:	80fb      	strh	r3, [r7, #6]
 8000d08:	88ba      	ldrh	r2, [r7, #4]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	4053      	eors	r3, r2
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	88bb      	ldrh	r3, [r7, #4]
 8000d14:	4053      	eors	r3, r2
 8000d16:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000d22:	bf00      	nop
	}

	if (bSwap)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d009      	beq.n	8000d3e <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000d2a:	883b      	ldrh	r3, [r7, #0]
 8000d2c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d30:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d34:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d38:	f7ff ff04 	bl	8000b44 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000d3c:	e008      	b.n	8000d50 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000d3e:	883b      	ldrh	r3, [r7, #0]
 8000d40:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d44:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d48:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d4c:	f000 f804 	bl	8000d58 <SSD1306_draw_fast_vline_internal>
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}

08000d58 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000d58:	b490      	push	{r4, r7}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80bb      	strh	r3, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f2c0 80da 	blt.w	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
 8000d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d84:	2b7f      	cmp	r3, #127	; 0x7f
 8000d86:	f300 80d5 	bgt.w	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 8000d8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da06      	bge.n	8000da0 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000da0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000da4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000da8:	4413      	add	r3, r2
 8000daa:	2b40      	cmp	r3, #64	; 0x40
 8000dac:	dd04      	ble.n	8000db8 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f340 80b9 	ble.w	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	737b      	strb	r3, [r7, #13]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	7b7a      	ldrb	r2, [r7, #13]
 8000dd0:	08d2      	lsrs	r2, r2, #3
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	01d1      	lsls	r1, r2, #7
 8000dd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dda:	440a      	add	r2, r1
 8000ddc:	4413      	add	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d040      	beq.n	8000e70 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	f1c3 0308 	rsb	r3, r3, #8
 8000df4:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000dfe:	7dfa      	ldrb	r2, [r7, #23]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d20b      	bcs.n	8000e1e <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	fa42 f303 	asr.w	r3, r2, r3
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d01a      	beq.n	8000e5a <SSD1306_draw_fast_vline_internal+0x102>
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	dc20      	bgt.n	8000e6a <SSD1306_draw_fast_vline_internal+0x112>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <SSD1306_draw_fast_vline_internal+0xe8>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d11c      	bne.n	8000e6a <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	701a      	strb	r2, [r3, #0]
						break;
 8000e3e:	e014      	b.n	8000e6a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b25a      	sxtb	r2, r3
 8000e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	701a      	strb	r2, [r3, #0]
						break;
 8000e58:	e007      	b.n	8000e6a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	4053      	eors	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	701a      	strb	r2, [r3, #0]
						break;
 8000e68:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	3380      	adds	r3, #128	; 0x80
 8000e6e:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000e70:	7dfa      	ldrb	r2, [r7, #23]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d35d      	bcc.n	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 8000e78:	7dfa      	ldrb	r2, [r7, #23]
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	2b07      	cmp	r3, #7
 8000e84:	d925      	bls.n	8000ed2 <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 8000e86:	883b      	ldrh	r3, [r7, #0]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d10f      	bne.n	8000eac <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	3380      	adds	r3, #128	; 0x80
 8000e9c:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	d8f0      	bhi.n	8000e8c <SSD1306_draw_fast_vline_internal+0x134>
 8000eaa:	e012      	b.n	8000ed2 <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000eac:	883b      	ldrh	r3, [r7, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SSD1306_draw_fast_vline_internal+0x15e>
 8000eb2:	23ff      	movs	r3, #255	; 0xff
 8000eb4:	e000      	b.n	8000eb8 <SSD1306_draw_fast_vline_internal+0x160>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	7b3a      	ldrb	r2, [r7, #12]
 8000ebe:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	3380      	adds	r3, #128	; 0x80
 8000ec4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
 8000ec8:	3b08      	subs	r3, #8
 8000eca:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d8f3      	bhi.n	8000eba <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 8000ed2:	7dfb      	ldrb	r3, [r7, #23]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d02d      	beq.n	8000f34 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000ee8:	883b      	ldrh	r3, [r7, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d01a      	beq.n	8000f24 <SSD1306_draw_fast_vline_internal+0x1cc>
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	dc21      	bgt.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d009      	beq.n	8000f0a <SSD1306_draw_fast_vline_internal+0x1b2>
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d11d      	bne.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	701a      	strb	r2, [r3, #0]
							break;
 8000f08:	e015      	b.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b25a      	sxtb	r2, r3
 8000f10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	701a      	strb	r2, [r3, #0]
							break;
 8000f22:	e008      	b.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	4053      	eors	r3, r2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	701a      	strb	r2, [r3, #0]
							break;
 8000f32:	e000      	b.n	8000f36 <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 8000f34:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc90      	pop	{r4, r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000090 	.word	0x20000090
 8000f44:	08007a2c 	.word	0x08007a2c
 8000f48:	08007a34 	.word	0x08007a34

08000f4c <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8000f58:	2022      	movs	r0, #34	; 0x22
 8000f5a:	f7ff fc6f 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff fc6c 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8000f64:	20ff      	movs	r0, #255	; 0xff
 8000f66:	f7ff fc69 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8000f6a:	2021      	movs	r0, #33	; 0x21
 8000f6c:	f7ff fc66 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fc63 	bl	800083c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8000f76:	207f      	movs	r0, #127	; 0x7f
 8000f78:	f7ff fc60 	bl	800083c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SSD1306_display_repaint+0x48>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	4619      	mov	r1, r3
 8000f84:	2040      	movs	r0, #64	; 0x40
 8000f86:	f7ff fc3f 	bl	8000808 <platform_write_dma>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000090 	.word	0x20000090

08000f98 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <SSD1306_set_rotation+0x1c>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	7013      	strb	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000094 	.word	0x20000094

08000fb8 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	return rotation;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <SSD1306_get_rotation+0x14>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000094 	.word	0x20000094

08000fd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <MX_ADC1_Init+0xe4>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001012:	2204      	movs	r2, #4
 8001014:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800101e:	2201      	movs	r2, #1
 8001020:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001024:	2201      	movs	r2, #1
 8001026:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001046:	2200      	movs	r2, #0
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <MX_ADC1_Init+0xe0>)
 8001054:	f000 fece 	bl	8001df4 <HAL_ADC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800105e:	f000 fb25 	bl	80016ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800106e:	f001 fc2d 	bl	80028cc <HAL_ADCEx_MultiModeConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001078:	f000 fb18 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_ADC1_Init+0xe8>)
 800107e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001080:	2306      	movs	r3, #6
 8001082:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001088:	237f      	movs	r3, #127	; 0x7f
 800108a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108c:	2304      	movs	r3, #4
 800108e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0xe0>)
 800109a:	f001 f801 	bl	80020a0 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010a4:	f000 fb02 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000098 	.word	0x20000098
 80010b4:	50040000 	.word	0x50040000
 80010b8:	14f00020 	.word	0x14f00020

080010bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0ac      	sub	sp, #176	; 0xb0
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2288      	movs	r2, #136	; 0x88
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 f959 	bl	8007394 <memset>
  if(adcHandle->Instance==ADC1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a3d      	ldr	r2, [pc, #244]	; (80011dc <HAL_ADC_MspInit+0x120>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d172      	bne.n	80011d2 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001102:	2308      	movs	r3, #8
 8001104:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001106:	2307      	movs	r3, #7
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4618      	mov	r0, r3
 800111e:	f004 ff95 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001128:	f000 fac0 	bl	80016ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <HAL_ADC_MspInit+0x124>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <HAL_ADC_MspInit+0x124>)
 8001132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_ADC_MspInit+0x124>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <HAL_ADC_MspInit+0x124>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <HAL_ADC_MspInit+0x124>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_ADC_MspInit+0x124>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800115c:	2303      	movs	r3, #3
 800115e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001162:	230b      	movs	r3, #11
 8001164:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f001 ffb0 	bl	80030dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 800117e:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_ADC_MspInit+0x12c>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 800119c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 80011a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 80011ac:	2220      	movs	r2, #32
 80011ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 80011b8:	f001 fd4a 	bl	8002c50 <HAL_DMA_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80011c2:	f000 fa73 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 80011ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <HAL_ADC_MspInit+0x128>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	37b0      	adds	r7, #176	; 0xb0
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	50040000 	.word	0x50040000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	200000fc 	.word	0x200000fc
 80011e8:	40020008 	.word	0x40020008

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_DMA_Init+0x48>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <MX_DMA_Init+0x48>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6493      	str	r3, [r2, #72]	; 0x48
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <MX_DMA_Init+0x48>)
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	200b      	movs	r0, #11
 8001210:	f001 fce7 	bl	8002be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001214:	200b      	movs	r0, #11
 8001216:	f001 fd00 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2010      	movs	r0, #16
 8001220:	f001 fcdf 	bl	8002be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001224:	2010      	movs	r0, #16
 8001226:	f001 fcf8 	bl	8002c1a <HAL_NVIC_EnableIRQ>

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b2f      	ldr	r3, [pc, #188]	; (800130c <MX_GPIO_Init+0xd4>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a2e      	ldr	r2, [pc, #184]	; (800130c <MX_GPIO_Init+0xd4>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_GPIO_Init+0xd4>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_GPIO_Init+0xd4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a28      	ldr	r2, [pc, #160]	; (800130c <MX_GPIO_Init+0xd4>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_GPIO_Init+0xd4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_GPIO_Init+0xd4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <MX_GPIO_Init+0xd4>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_GPIO_Init+0xd4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_GPIO_Init+0xd4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <MX_GPIO_Init+0xd4>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_GPIO_Init+0xd4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f002 f8bb 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	480f      	ldr	r0, [pc, #60]	; (8001310 <MX_GPIO_Init+0xd8>)
 80012d2:	f001 ff03 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d6:	2320      	movs	r3, #32
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f0:	f001 fef4 	bl	80030dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2028      	movs	r0, #40	; 0x28
 80012fa:	f001 fc72 	bl	8002be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012fe:	2028      	movs	r0, #40	; 0x28
 8001300:	f001 fc8b 	bl	8002c1a <HAL_NVIC_EnableIRQ>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000
 8001310:	48000800 	.word	0x48000800

08001314 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_I2C1_Init+0x74>)
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <MX_I2C1_Init+0x78>)
 800131c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_I2C1_Init+0x74>)
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <MX_I2C1_Init+0x7c>)
 8001322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_I2C1_Init+0x74>)
 800132c:	2201      	movs	r2, #1
 800132e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_I2C1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_I2C1_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <MX_I2C1_Init+0x74>)
 8001350:	f002 f89e 	bl	8003490 <HAL_I2C_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800135a:	f000 f9a7 	bl	80016ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <MX_I2C1_Init+0x74>)
 8001362:	f003 ff77 	bl	8005254 <HAL_I2CEx_ConfigAnalogFilter>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800136c:	f000 f99e 	bl	80016ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001370:	2100      	movs	r1, #0
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_I2C1_Init+0x74>)
 8001374:	f003 ffb9 	bl	80052ea <HAL_I2CEx_ConfigDigitalFilter>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800137e:	f000 f995 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000144 	.word	0x20000144
 800138c:	40005400 	.word	0x40005400
 8001390:	10909cec 	.word	0x10909cec

08001394 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0ac      	sub	sp, #176	; 0xb0
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2288      	movs	r2, #136	; 0x88
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 ffed 	bl	8007394 <memset>
  if(i2cHandle->Instance==I2C1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a3a      	ldr	r2, [pc, #232]	; (80014a8 <HAL_I2C_MspInit+0x114>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d16c      	bne.n	800149e <HAL_I2C_MspInit+0x10a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fe3b 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013dc:	f000 f966 	bl	80016ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <HAL_I2C_MspInit+0x118>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e4:	4a31      	ldr	r2, [pc, #196]	; (80014ac <HAL_I2C_MspInit+0x118>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <HAL_I2C_MspInit+0x118>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f8:	23c0      	movs	r3, #192	; 0xc0
 80013fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fe:	2312      	movs	r3, #18
 8001400:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001410:	2304      	movs	r3, #4
 8001412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800141a:	4619      	mov	r1, r3
 800141c:	4824      	ldr	r0, [pc, #144]	; (80014b0 <HAL_I2C_MspInit+0x11c>)
 800141e:	f001 fe5d 	bl	80030dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_I2C_MspInit+0x118>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <HAL_I2C_MspInit+0x118>)
 8001428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142c:	6593      	str	r3, [r2, #88]	; 0x58
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_I2C_MspInit+0x118>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 800143c:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_I2C_MspInit+0x124>)
 800143e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 8001442:	2203      	movs	r2, #3
 8001444:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 8001448:	2210      	movs	r2, #16
 800144a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 800146c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001470:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001472:	4810      	ldr	r0, [pc, #64]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 8001474:	f001 fbec 	bl	8002c50 <HAL_DMA_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 800147e:	f000 f915 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_I2C_MspInit+0x120>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	201f      	movs	r0, #31
 8001494:	f001 fba5 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001498:	201f      	movs	r0, #31
 800149a:	f001 fbbe 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800149e:	bf00      	nop
 80014a0:	37b0      	adds	r7, #176	; 0xb0
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40005400 	.word	0x40005400
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000400 	.word	0x48000400
 80014b4:	20000198 	.word	0x20000198
 80014b8:	4002006c 	.word	0x4002006c

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c2:	f000 fa6b 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c6:	f000 f841 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ca:	f7ff feb5 	bl	8001238 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ce:	f7ff fe8d 	bl	80011ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014d2:	f000 f9ad 	bl	8001830 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014d6:	f7ff ff1d 	bl	8001314 <MX_I2C1_Init>
  MX_ADC1_Init();
 80014da:	f7ff fd79 	bl	8000fd0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_init();
 80014de:	f7ff f9bd 	bl	800085c <SSD1306_init>

  //GFX_draw_string(3, 25, (unsigned char *)"***** ***", WHITE, BLACK, 2, 2);
  //SSD1306_draw_pixel(xp, yp, WHITE);

  //SSD1306_display_repaint();
  SSD1306_display_clear();
 80014e2:	f7ff fb21 	bl	8000b28 <SSD1306_display_clear>
  Draw_Block(x, y);
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <main+0x84>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <main+0x88>)
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f000 f879 	bl	80015ee <Draw_Block>
  SSD1306_display_repaint();
 80014fc:	f7ff fd26 	bl	8000f4c <SSD1306_display_repaint>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Jump();
 8001500:	f000 f89a 	bl	8001638 <Jump>
	  	if(y<1){
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <main+0x88>)
 8001506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150a:	2b00      	cmp	r3, #0
 800150c:	dc13      	bgt.n	8001536 <main+0x7a>
	  		SSD1306_display_clear();
 800150e:	f7ff fb0b 	bl	8000b28 <SSD1306_display_clear>
	  		GFX_draw_string(3, 25, (unsigned char *)"GAME OVER", WHITE, BLACK, 2, 2);
 8001512:	2302      	movs	r3, #2
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	2302      	movs	r3, #2
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2300      	movs	r3, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2301      	movs	r3, #1
 8001520:	4a09      	ldr	r2, [pc, #36]	; (8001548 <main+0x8c>)
 8001522:	2119      	movs	r1, #25
 8001524:	2003      	movs	r0, #3
 8001526:	f7ff f8eb 	bl	8000700 <GFX_draw_string>
	  		SSD1306_display_repaint();
 800152a:	f7ff fd0f 	bl	8000f4c <SSD1306_display_repaint>
	  		HAL_Delay(1000);
 800152e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001532:	f000 faaf 	bl	8001a94 <HAL_Delay>

	  	}
	   HAL_Delay(100);
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f000 faac 	bl	8001a94 <HAL_Delay>
  {
 800153c:	e7e0      	b.n	8001500 <main+0x44>
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000
 8001544:	20000002 	.word	0x20000002
 8001548:	08007520 	.word	0x08007520

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b096      	sub	sp, #88	; 0x58
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	2244      	movs	r2, #68	; 0x44
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f005 ff1a 	bl	8007394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	463b      	mov	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800156e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001572:	f003 ff15 	bl	80053a0 <HAL_PWREx_ControlVoltageScaling>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800157c:	f000 f896 	bl	80016ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001580:	2302      	movs	r3, #2
 8001582:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158a:	2310      	movs	r3, #16
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158e:	2302      	movs	r3, #2
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001592:	2302      	movs	r3, #2
 8001594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001596:	2301      	movs	r3, #1
 8001598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800159a:	230a      	movs	r3, #10
 800159c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800159e:	2307      	movs	r3, #7
 80015a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015a2:	2302      	movs	r3, #2
 80015a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 ff4c 	bl	800544c <HAL_RCC_OscConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015ba:	f000 f877 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	230f      	movs	r3, #15
 80015c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2303      	movs	r3, #3
 80015c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2104      	movs	r1, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 fb14 	bl	8005c04 <HAL_RCC_ClockConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015e2:	f000 f863 	bl	80016ac <Error_Handler>
  }
}
 80015e6:	bf00      	nop
 80015e8:	3758      	adds	r7, #88	; 0x58
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <Draw_Block>:
SSD1306_draw_fast_vline(x, y-size, size*2,  WHITE);
SSD1306_draw_fast_hline(x-size, y, size*2,  WHITE);
}

void Draw_Block(int16_t x, int16_t y)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	460a      	mov	r2, r1
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4613      	mov	r3, r2
 80015fc:	80bb      	strh	r3, [r7, #4]
for(int16_t i=x;i<x+SNAKE_SIZE;i++){
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	81fb      	strh	r3, [r7, #14]
 8001602:	e00d      	b.n	8001620 <Draw_Block+0x32>
	SSD1306_draw_fast_vline(i, y, 8,  WHITE);
 8001604:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001608:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800160c:	2301      	movs	r3, #1
 800160e:	2208      	movs	r2, #8
 8001610:	f7ff fb2a 	bl	8000c68 <SSD1306_draw_fast_vline>
for(int16_t i=x;i<x+SNAKE_SIZE;i++){
 8001614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001618:	b29b      	uxth	r3, r3
 800161a:	3301      	adds	r3, #1
 800161c:	b29b      	uxth	r3, r3
 800161e:	81fb      	strh	r3, [r7, #14]
 8001620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001624:	1dda      	adds	r2, r3, #7
 8001626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162a:	429a      	cmp	r2, r3
 800162c:	daea      	bge.n	8001604 <Draw_Block+0x16>
	}
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <Jump>:
		SSD1306_display_repaint();
	}
		   x++;
}
void Jump()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	SSD1306_display_clear();
 800163c:	f7ff fa74 	bl	8000b28 <SSD1306_display_clear>

	Draw_Block(x, y);
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <Jump+0x38>)
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <Jump+0x3c>)
 8001648:	f9b2 2000 	ldrsh.w	r2, [r2]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ffcd 	bl	80015ee <Draw_Block>
	SSD1306_display_repaint();
 8001654:	f7ff fc7a 	bl	8000f4c <SSD1306_display_repaint>
	y--;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <Jump+0x3c>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <Jump+0x3c>)
 8001668:	801a      	strh	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000
 8001674:	20000002 	.word	0x20000002

08001678 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13){
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001688:	d108      	bne.n	800169c <HAL_GPIO_EXTI_Callback+0x24>

		y=y+20;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x30>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	b29b      	uxth	r3, r3
 8001692:	3314      	adds	r3, #20
 8001694:	b29b      	uxth	r3, r3
 8001696:	b21a      	sxth	r2, r3
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x30>)
 800169a:	801a      	strh	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);



	}
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	20000002 	.word	0x20000002

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_MspInit+0x44>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_MspInit+0x44>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f982 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <DMA1_Channel1_IRQHandler+0x10>)
 800175a:	f001 fbd2 	bl	8002f02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200000fc 	.word	0x200000fc

08001768 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA1_Channel6_IRQHandler+0x10>)
 800176e:	f001 fbc8 	bl	8002f02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000198 	.word	0x20000198

0800177c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <I2C1_EV_IRQHandler+0x10>)
 8001782:	f002 f90f 	bl	80039a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000144 	.word	0x20000144

08001790 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001794:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001798:	f001 fe62 	bl	8003460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f005 fdae 	bl	8007330 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20018000 	.word	0x20018000
 8001800:	00000400 	.word	0x00000400
 8001804:	200001e0 	.word	0x200001e0
 8001808:	20000280 	.word	0x20000280

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_USART2_UART_Init+0x58>)
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <MX_USART2_UART_Init+0x5c>)
 8001838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_USART2_UART_Init+0x58>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART2_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_USART2_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART2_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART2_UART_Init+0x58>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART2_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART2_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART2_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART2_UART_Init+0x58>)
 8001874:	f005 f8a6 	bl	80069c4 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800187e:	f7ff ff15 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001e4 	.word	0x200001e4
 800188c:	40004400 	.word	0x40004400

08001890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b0ac      	sub	sp, #176	; 0xb0
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2288      	movs	r2, #136	; 0x88
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 fd6f 	bl	8007394 <memset>
  if(uartHandle->Instance==USART2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a21      	ldr	r2, [pc, #132]	; (8001940 <HAL_UART_MspInit+0xb0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d13b      	bne.n	8001938 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4618      	mov	r0, r3
 80018ce:	f004 fbbd 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018d8:	f7ff fee8 	bl	80016ac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_UART_MspInit+0xb4>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	4a18      	ldr	r2, [pc, #96]	; (8001944 <HAL_UART_MspInit+0xb4>)
 80018e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e6:	6593      	str	r3, [r2, #88]	; 0x58
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_UART_MspInit+0xb4>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_UART_MspInit+0xb4>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_UART_MspInit+0xb4>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_UART_MspInit+0xb4>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800190c:	230c      	movs	r3, #12
 800190e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001924:	2307      	movs	r3, #7
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001934:	f001 fbd2 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001938:	bf00      	nop
 800193a:	37b0      	adds	r7, #176	; 0xb0
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40004400 	.word	0x40004400
 8001944:	40021000 	.word	0x40021000

08001948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800194c:	f7ff ff5e 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <LoopForever+0x6>)
  ldr r1, =_edata
 8001952:	490d      	ldr	r1, [pc, #52]	; (8001988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <LoopForever+0xe>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001968:	4c0a      	ldr	r4, [pc, #40]	; (8001994 <LoopForever+0x16>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001976:	f005 fce1 	bl	800733c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800197a:	f7ff fd9f 	bl	80014bc <main>

0800197e <LoopForever>:

LoopForever:
    b LoopForever
 800197e:	e7fe      	b.n	800197e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001980:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800198c:	08007a94 	.word	0x08007a94
  ldr r2, =_sbss
 8001990:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001994:	2000027c 	.word	0x2000027c

08001998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC1_2_IRQHandler>
	...

0800199c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_Init+0x3c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_Init+0x3c>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b2:	2003      	movs	r0, #3
 80019b4:	f001 f90a 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 f80f 	bl	80019dc <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	e001      	b.n	80019ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ca:	f7ff fe75 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ce:	79fb      	ldrb	r3, [r7, #7]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40022000 	.word	0x40022000

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_InitTick+0x6c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d023      	beq.n	8001a38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_InitTick+0x70>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_InitTick+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 f915 	bl	8002c36 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d809      	bhi.n	8001a2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f001 f8df 	bl	8002be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_InitTick+0x74>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e004      	b.n	8001a3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	e001      	b.n	8001a3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000000c 	.word	0x2000000c
 8001a4c:	20000004 	.word	0x20000004
 8001a50:	20000008 	.word	0x20000008

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	20000268 	.word	0x20000268

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000268 	.word	0x20000268

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff ffee 	bl	8001a7c <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_Delay+0x44>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000000c 	.word	0x2000000c

08001adc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	609a      	str	r2, [r3, #8]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3360      	adds	r3, #96	; 0x60
 8001b56:	461a      	mov	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <LL_ADC_SetOffset+0x44>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	03fff000 	.word	0x03fff000

08001b8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3360      	adds	r3, #96	; 0x60
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3360      	adds	r3, #96	; 0x60
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3330      	adds	r3, #48	; 0x30
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	211f      	movs	r1, #31
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 011f 	and.w	r1, r3, #31
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b087      	sub	sp, #28
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3314      	adds	r3, #20
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	0e5b      	lsrs	r3, r3, #25
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	4413      	add	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	0d1b      	lsrs	r3, r3, #20
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2107      	movs	r1, #7
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	0d1b      	lsrs	r3, r3, #20
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0318 	and.w	r3, r3, #24
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cc0:	40d9      	lsrs	r1, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	0007ffff 	.word	0x0007ffff

08001ce4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6093      	str	r3, [r2, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d1c:	d101      	bne.n	8001d22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d6c:	d101      	bne.n	8001d72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <LL_ADC_IsEnabled+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_ADC_IsEnabled+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d101      	bne.n	8001dbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d101      	bne.n	8001de4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e136      	b.n	800207c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff f94d 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff67 	bl	8001d08 <LL_ADC_IsDeepPowerDownEnabled>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d004      	beq.n	8001e4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff4d 	bl	8001ce4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff82 	bl	8001d58 <LL_ADC_IsInternalRegulatorEnabled>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d115      	bne.n	8001e86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff66 	bl	8001d30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e64:	4b87      	ldr	r3, [pc, #540]	; (8002084 <HAL_ADC_Init+0x290>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	4a87      	ldr	r2, [pc, #540]	; (8002088 <HAL_ADC_Init+0x294>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	099b      	lsrs	r3, r3, #6
 8001e72:	3301      	adds	r3, #1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e78:	e002      	b.n	8001e80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff64 	bl	8001d58 <LL_ADC_IsInternalRegulatorEnabled>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10d      	bne.n	8001eb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff75 	bl	8001da6 <LL_ADC_REG_IsConversionOngoing>
 8001ebc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 80cf 	bne.w	800206a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 80cb 	bne.w	800206a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001edc:	f043 0202 	orr.w	r2, r3, #2
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff49 	bl	8001d80 <LL_ADC_IsEnabled>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d115      	bne.n	8001f20 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ef4:	4865      	ldr	r0, [pc, #404]	; (800208c <HAL_ADC_Init+0x298>)
 8001ef6:	f7ff ff43 	bl	8001d80 <LL_ADC_IsEnabled>
 8001efa:	4604      	mov	r4, r0
 8001efc:	4864      	ldr	r0, [pc, #400]	; (8002090 <HAL_ADC_Init+0x29c>)
 8001efe:	f7ff ff3f 	bl	8001d80 <LL_ADC_IsEnabled>
 8001f02:	4603      	mov	r3, r0
 8001f04:	431c      	orrs	r4, r3
 8001f06:	4863      	ldr	r0, [pc, #396]	; (8002094 <HAL_ADC_Init+0x2a0>)
 8001f08:	f7ff ff3a 	bl	8001d80 <LL_ADC_IsEnabled>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4323      	orrs	r3, r4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	485f      	ldr	r0, [pc, #380]	; (8002098 <HAL_ADC_Init+0x2a4>)
 8001f1c:	f7ff fdde 	bl	8001adc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7e5b      	ldrb	r3, [r3, #25]
 8001f24:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f2a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f30:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f36:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d106      	bne.n	8001f5c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	3b01      	subs	r3, #1
 8001f54:	045b      	lsls	r3, r3, #17
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_ADC_Init+0x2a8>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff08 	bl	8001da6 <LL_ADC_REG_IsConversionOngoing>
 8001f96:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff15 	bl	8001dcc <LL_ADC_INJ_IsConversionOngoing>
 8001fa2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d13d      	bne.n	8002026 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d13a      	bne.n	8002026 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fb4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fbc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fcc:	f023 0302 	bic.w	r3, r3, #2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	69b9      	ldr	r1, [r7, #24]
 8001fd6:	430b      	orrs	r3, r1
 8001fd8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d118      	bne.n	8002016 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fee:	f023 0304 	bic.w	r3, r3, #4
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002000:	4311      	orrs	r1, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002006:	430a      	orrs	r2, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	611a      	str	r2, [r3, #16]
 8002014:	e007      	b.n	8002026 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10c      	bne.n	8002048 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	f023 010f 	bic.w	r1, r3, #15
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	1e5a      	subs	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
 8002046:	e007      	b.n	8002058 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 020f 	bic.w	r2, r2, #15
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	f023 0303 	bic.w	r3, r3, #3
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
 8002068:	e007      	b.n	800207a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f043 0210 	orr.w	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800207a:	7ffb      	ldrb	r3, [r7, #31]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3724      	adds	r7, #36	; 0x24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	20000004 	.word	0x20000004
 8002088:	053e2d63 	.word	0x053e2d63
 800208c:	50040000 	.word	0x50040000
 8002090:	50040100 	.word	0x50040100
 8002094:	50040200 	.word	0x50040200
 8002098:	50040300 	.word	0x50040300
 800209c:	fff0c007 	.word	0xfff0c007

080020a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0b6      	sub	sp, #216	; 0xd8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x22>
 80020be:	2302      	movs	r3, #2
 80020c0:	e3c7      	b.n	8002852 <HAL_ADC_ConfigChannel+0x7b2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fe69 	bl	8001da6 <LL_ADC_REG_IsConversionOngoing>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 83a8 	bne.w	800282c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d824      	bhi.n	800212e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	3b02      	subs	r3, #2
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d81b      	bhi.n	8002126 <HAL_ADC_ConfigChannel+0x86>
 80020ee:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HAL_ADC_ConfigChannel+0x54>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	08002105 	.word	0x08002105
 80020f8:	0800210d 	.word	0x0800210d
 80020fc:	08002115 	.word	0x08002115
 8002100:	0800211d 	.word	0x0800211d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	220c      	movs	r2, #12
 8002108:	605a      	str	r2, [r3, #4]
          break;
 800210a:	e011      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2212      	movs	r2, #18
 8002110:	605a      	str	r2, [r3, #4]
          break;
 8002112:	e00d      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2218      	movs	r2, #24
 8002118:	605a      	str	r2, [r3, #4]
          break;
 800211a:	e009      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002122:	605a      	str	r2, [r3, #4]
          break;
 8002124:	e004      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2206      	movs	r2, #6
 800212a:	605a      	str	r2, [r3, #4]
          break;
 800212c:	e000      	b.n	8002130 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800212e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	f7ff fd56 	bl	8001bee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fe2d 	bl	8001da6 <LL_ADC_REG_IsConversionOngoing>
 800214c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fe39 	bl	8001dcc <LL_ADC_INJ_IsConversionOngoing>
 800215a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800215e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 81a6 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 81a1 	bne.w	80024b4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	461a      	mov	r2, r3
 8002180:	f7ff fd61 	bl	8001c46 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00a      	beq.n	80021bc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6919      	ldr	r1, [r3, #16]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021b6:	f7ff fcc5 	bl	8001b44 <LL_ADC_SetOffset>
 80021ba:	e17b      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fce2 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x148>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fcd7 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	e01e      	b.n	8002226 <HAL_ADC_ConfigChannel+0x186>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fccc 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800220a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800220e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002216:	2320      	movs	r3, #32
 8002218:	e004      	b.n	8002224 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800221a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_ConfigChannel+0x19e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	e018      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1d0>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002256:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800225a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fc9b 	bl	8001bb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc7f 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x20e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fc74 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	e01e      	b.n	80022ec <HAL_ADC_ConfigChannel+0x24c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fc69 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e004      	b.n	80022ea <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x264>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	e018      	b.n	8002336 <HAL_ADC_ConfigChannel+0x296>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800231c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e004      	b.n	8002336 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800232c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002336:	429a      	cmp	r2, r3
 8002338:	d106      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	2101      	movs	r1, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc38 	bl	8001bb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2102      	movs	r1, #2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fc1c 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x2d4>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fc11 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	e01e      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x312>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fc06 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800239a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e004      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x32a>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	e016      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x358>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e004      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fbd7 	bl	8001bb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2103      	movs	r1, #3
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fbbb 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x396>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2103      	movs	r1, #3
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fbb0 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	0e9b      	lsrs	r3, r3, #26
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	e017      	b.n	8002466 <HAL_ADC_ConfigChannel+0x3c6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2103      	movs	r1, #3
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fba5 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800244e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002450:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e003      	b.n	8002464 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800245c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3de>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	e011      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x402>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800248c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800249a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d106      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	2103      	movs	r1, #3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fb82 	bl	8001bb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fc61 	bl	8001d80 <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f040 813f 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7ff fbe2 	bl	8001c9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a8e      	ldr	r2, [pc, #568]	; (8002718 <HAL_ADC_ConfigChannel+0x678>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	f040 8130 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_ADC_ConfigChannel+0x46c>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	3301      	adds	r3, #1
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b09      	cmp	r3, #9
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e019      	b.n	8002540 <HAL_ADC_ConfigChannel+0x4a0>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800251a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800251e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2b09      	cmp	r3, #9
 8002538:	bf94      	ite	ls
 800253a:	2301      	movls	r3, #1
 800253c:	2300      	movhi	r3, #0
 800253e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002540:	2b00      	cmp	r3, #0
 8002542:	d079      	beq.n	8002638 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x4c0>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	069b      	lsls	r3, r3, #26
 800255a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255e:	e015      	b.n	800258c <HAL_ADC_ConfigChannel+0x4ec>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800256e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002570:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e003      	b.n	8002584 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	069b      	lsls	r3, r3, #26
 8002588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x50c>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	e017      	b.n	80025dc <HAL_ADC_ConfigChannel+0x53c>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e003      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2101      	movs	r1, #1
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	ea42 0103 	orr.w	r1, r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x562>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	3301      	adds	r3, #1
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	e018      	b.n	8002634 <HAL_ADC_ConfigChannel+0x594>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e003      	b.n	8002626 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002634:	430b      	orrs	r3, r1
 8002636:	e080      	b.n	800273a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x5b4>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	3301      	adds	r3, #1
 800264c:	069b      	lsls	r3, r3, #26
 800264e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002652:	e015      	b.n	8002680 <HAL_ADC_ConfigChannel+0x5e0>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e003      	b.n	8002678 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	3301      	adds	r3, #1
 800267a:	069b      	lsls	r3, r3, #26
 800267c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x600>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	3301      	adds	r3, #1
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	e017      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x630>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	61fb      	str	r3, [r7, #28]
  return result;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	ea42 0103 	orr.w	r1, r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x65c>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	3301      	adds	r3, #1
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026fa:	e01d      	b.n	8002738 <HAL_ADC_ConfigChannel+0x698>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	613b      	str	r3, [r7, #16]
  return result;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e005      	b.n	8002724 <HAL_ADC_ConfigChannel+0x684>
 8002718:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f003 021f 	and.w	r2, r3, #31
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	3b1e      	subs	r3, #30
 8002732:	051b      	lsls	r3, r3, #20
 8002734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002738:	430b      	orrs	r3, r1
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6892      	ldr	r2, [r2, #8]
 800273e:	4619      	mov	r1, r3
 8002740:	f7ff fa81 	bl	8001c46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b44      	ldr	r3, [pc, #272]	; (800285c <HAL_ADC_ConfigChannel+0x7bc>)
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d07a      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002750:	4843      	ldr	r0, [pc, #268]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002752:	f7ff f9e9 	bl	8001b28 <LL_ADC_GetCommonPathInternalCh>
 8002756:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a41      	ldr	r2, [pc, #260]	; (8002864 <HAL_ADC_ConfigChannel+0x7c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d12c      	bne.n	80027be <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d126      	bne.n	80027be <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3c      	ldr	r2, [pc, #240]	; (8002868 <HAL_ADC_ConfigChannel+0x7c8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_ADC_ConfigChannel+0x6e4>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a3b      	ldr	r2, [pc, #236]	; (800286c <HAL_ADC_ConfigChannel+0x7cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d15d      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800278c:	4619      	mov	r1, r3
 800278e:	4834      	ldr	r0, [pc, #208]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002790:	f7ff f9b7 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_ADC_ConfigChannel+0x7d0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	4a36      	ldr	r2, [pc, #216]	; (8002874 <HAL_ADC_ConfigChannel+0x7d4>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ae:	e002      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f9      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027bc:	e040      	b.n	8002840 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_ADC_ConfigChannel+0x7d8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d118      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x75a>
 80027c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d112      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <HAL_ADC_ConfigChannel+0x7c8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x748>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_ADC_ConfigChannel+0x7cc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d12d      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f0:	4619      	mov	r1, r3
 80027f2:	481b      	ldr	r0, [pc, #108]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 80027f4:	f7ff f985 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f8:	e024      	b.n	8002844 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_ADC_ConfigChannel+0x7dc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d120      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11a      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_ADC_ConfigChannel+0x7c8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d115      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800281a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002822:	4619      	mov	r1, r3
 8002824:	480e      	ldr	r0, [pc, #56]	; (8002860 <HAL_ADC_ConfigChannel+0x7c0>)
 8002826:	f7ff f96c 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
 800282a:	e00c      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800283e:	e002      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002840:	bf00      	nop
 8002842:	e000      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002844:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800284e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002852:	4618      	mov	r0, r3
 8002854:	37d8      	adds	r7, #216	; 0xd8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	80080000 	.word	0x80080000
 8002860:	50040300 	.word	0x50040300
 8002864:	c7520000 	.word	0xc7520000
 8002868:	50040000 	.word	0x50040000
 800286c:	50040200 	.word	0x50040200
 8002870:	20000004 	.word	0x20000004
 8002874:	053e2d63 	.word	0x053e2d63
 8002878:	cb840000 	.word	0xcb840000
 800287c:	80000001 	.word	0x80000001

08002880 <LL_ADC_IsEnabled>:
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <LL_ADC_IsEnabled+0x18>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <LL_ADC_IsEnabled+0x1a>
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d101      	bne.n	80028be <LL_ADC_REG_IsConversionOngoing+0x18>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b09f      	sub	sp, #124	; 0x7c
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e093      	b.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80028f2:	2300      	movs	r3, #0
 80028f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80028f6:	2300      	movs	r3, #0
 80028f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d102      	bne.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002904:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	e001      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	f043 0220 	orr.w	r2, r3, #32
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e072      	b.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ffb9 	bl	80028a6 <LL_ADC_REG_IsConversionOngoing>
 8002934:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ffb3 	bl	80028a6 <LL_ADC_REG_IsConversionOngoing>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d154      	bne.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002948:	2b00      	cmp	r3, #0
 800294a:	d151      	bne.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800294c:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800294e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02c      	beq.n	80029b2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800296a:	035b      	lsls	r3, r3, #13
 800296c:	430b      	orrs	r3, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002972:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002974:	4829      	ldr	r0, [pc, #164]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002976:	f7ff ff83 	bl	8002880 <LL_ADC_IsEnabled>
 800297a:	4604      	mov	r4, r0
 800297c:	4828      	ldr	r0, [pc, #160]	; (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800297e:	f7ff ff7f 	bl	8002880 <LL_ADC_IsEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	431c      	orrs	r4, r3
 8002986:	4828      	ldr	r0, [pc, #160]	; (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002988:	f7ff ff7a 	bl	8002880 <LL_ADC_IsEnabled>
 800298c:	4603      	mov	r3, r0
 800298e:	4323      	orrs	r3, r4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d137      	bne.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800299c:	f023 030f 	bic.w	r3, r3, #15
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	6811      	ldr	r1, [r2, #0]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	431a      	orrs	r2, r3
 80029ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b0:	e028      	b.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029be:	4817      	ldr	r0, [pc, #92]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029c0:	f7ff ff5e 	bl	8002880 <LL_ADC_IsEnabled>
 80029c4:	4604      	mov	r4, r0
 80029c6:	4816      	ldr	r0, [pc, #88]	; (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029c8:	f7ff ff5a 	bl	8002880 <LL_ADC_IsEnabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	431c      	orrs	r4, r3
 80029d0:	4815      	ldr	r0, [pc, #84]	; (8002a28 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029d2:	f7ff ff55 	bl	8002880 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4323      	orrs	r3, r4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d112      	bne.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029e6:	f023 030f 	bic.w	r3, r3, #15
 80029ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ee:	e009      	b.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a02:	e000      	b.n	8002a06 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	377c      	adds	r7, #124	; 0x7c
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd90      	pop	{r4, r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	50040000 	.word	0x50040000
 8002a20:	50040100 	.word	0x50040100
 8002a24:	50040300 	.word	0x50040300
 8002a28:	50040200 	.word	0x50040200

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b98:	d301      	bcc.n	8002b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00f      	b.n	8002bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <SysTick_Config+0x40>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f7ff ff8e 	bl	8002acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb8:	2207      	movs	r2, #7
 8002bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff29 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff3e 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff8e 	bl	8002b20 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5d 	bl	8002acc <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff31 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa2 	bl	8002b88 <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e098      	b.n	8002d94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b4d      	ldr	r3, [pc, #308]	; (8002da0 <HAL_DMA_Init+0x150>)
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d80f      	bhi.n	8002c8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b4b      	ldr	r3, [pc, #300]	; (8002da4 <HAL_DMA_Init+0x154>)
 8002c76:	4413      	add	r3, r2
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_DMA_Init+0x158>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	009a      	lsls	r2, r3, #2
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_DMA_Init+0x15c>)
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8c:	e00e      	b.n	8002cac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_DMA_Init+0x160>)
 8002c96:	4413      	add	r3, r2
 8002c98:	4a43      	ldr	r2, [pc, #268]	; (8002da8 <HAL_DMA_Init+0x158>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	009a      	lsls	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a42      	ldr	r2, [pc, #264]	; (8002db4 <HAL_DMA_Init+0x164>)
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d06:	d039      	beq.n	8002d7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_DMA_Init+0x15c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d11a      	bne.n	8002d48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_DMA_Init+0x168>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 031c 	and.w	r3, r3, #28
 8002d1e:	210f      	movs	r1, #15
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	4924      	ldr	r1, [pc, #144]	; (8002db8 <HAL_DMA_Init+0x168>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d2c:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_DMA_Init+0x168>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f003 031c 	and.w	r3, r3, #28
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	491d      	ldr	r1, [pc, #116]	; (8002db8 <HAL_DMA_Init+0x168>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
 8002d46:	e019      	b.n	8002d7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_DMA_Init+0x16c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f003 031c 	and.w	r3, r3, #28
 8002d54:	210f      	movs	r1, #15
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	4917      	ldr	r1, [pc, #92]	; (8002dbc <HAL_DMA_Init+0x16c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_DMA_Init+0x16c>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f003 031c 	and.w	r3, r3, #28
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	4911      	ldr	r1, [pc, #68]	; (8002dbc <HAL_DMA_Init+0x16c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40020407 	.word	0x40020407
 8002da4:	bffdfff8 	.word	0xbffdfff8
 8002da8:	cccccccd 	.word	0xcccccccd
 8002dac:	40020000 	.word	0x40020000
 8002db0:	bffdfbf8 	.word	0xbffdfbf8
 8002db4:	40020400 	.word	0x40020400
 8002db8:	400200a8 	.word	0x400200a8
 8002dbc:	400204a8 	.word	0x400204a8

08002dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Start_IT+0x20>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e04b      	b.n	8002e78 <HAL_DMA_Start_IT+0xb8>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d13a      	bne.n	8002e6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f92f 	bl	800307c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 020e 	orr.w	r2, r2, #14
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e00f      	b.n	8002e58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0204 	bic.w	r2, r2, #4
 8002e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 020a 	orr.w	r2, r2, #10
 8002e56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e005      	b.n	8002e76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
 8002e74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d005      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e029      	b.n	8002ef8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 020e 	bic.w	r2, r2, #14
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f003 021c 	and.w	r2, r3, #28
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
    }
  }
  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f003 031c 	and.w	r3, r3, #28
 8002f22:	2204      	movs	r2, #4
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d026      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x7a>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d021      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0204 	bic.w	r2, r2, #4
 8002f54:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f003 021c 	and.w	r2, r3, #28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2104      	movs	r1, #4
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d071      	beq.n	8003056 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f7a:	e06c      	b.n	8003056 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	f003 031c 	and.w	r3, r3, #28
 8002f84:	2202      	movs	r2, #2
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d02e      	beq.n	8002fee <HAL_DMA_IRQHandler+0xec>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d029      	beq.n	8002fee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 020a 	bic.w	r2, r2, #10
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f003 021c 	and.w	r2, r3, #28
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2102      	movs	r1, #2
 8002fce:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d038      	beq.n	8003056 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fec:	e033      	b.n	8003056 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f003 031c 	and.w	r3, r3, #28
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x156>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d025      	beq.n	8003058 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020e 	bic.w	r2, r2, #14
 800301a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	f003 021c 	and.w	r2, r3, #28
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f202 	lsl.w	r2, r1, r2
 800302e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003056:	bf00      	nop
 8003058:	bf00      	nop
}
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800306e:	b2db      	uxtb	r3, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f003 021c 	and.w	r2, r3, #28
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d108      	bne.n	80030c0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030be:	e007      	b.n	80030d0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ea:	e17f      	b.n	80033ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8171 	beq.w	80033e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d005      	beq.n	800311c <HAL_GPIO_Init+0x40>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d130      	bne.n	800317e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003152:	2201      	movs	r2, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0201 	and.w	r2, r3, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d118      	bne.n	80031bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003190:	2201      	movs	r2, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0201 	and.w	r2, r3, #1
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d017      	beq.n	80031f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d123      	bne.n	800324c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	08da      	lsrs	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3208      	adds	r2, #8
 800320c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	220f      	movs	r2, #15
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	08da      	lsrs	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	6939      	ldr	r1, [r7, #16]
 8003248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80ac 	beq.w	80033e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328e:	4b5f      	ldr	r3, [pc, #380]	; (800340c <HAL_GPIO_Init+0x330>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	4a5e      	ldr	r2, [pc, #376]	; (800340c <HAL_GPIO_Init+0x330>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6613      	str	r3, [r2, #96]	; 0x60
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <HAL_GPIO_Init+0x330>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032a6:	4a5a      	ldr	r2, [pc, #360]	; (8003410 <HAL_GPIO_Init+0x334>)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	3302      	adds	r3, #2
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032d0:	d025      	beq.n	800331e <HAL_GPIO_Init+0x242>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4f      	ldr	r2, [pc, #316]	; (8003414 <HAL_GPIO_Init+0x338>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01f      	beq.n	800331a <HAL_GPIO_Init+0x23e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4e      	ldr	r2, [pc, #312]	; (8003418 <HAL_GPIO_Init+0x33c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0x23a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4d      	ldr	r2, [pc, #308]	; (800341c <HAL_GPIO_Init+0x340>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0x236>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4c      	ldr	r2, [pc, #304]	; (8003420 <HAL_GPIO_Init+0x344>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00d      	beq.n	800330e <HAL_GPIO_Init+0x232>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4b      	ldr	r2, [pc, #300]	; (8003424 <HAL_GPIO_Init+0x348>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x22e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <HAL_GPIO_Init+0x34c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_GPIO_Init+0x22a>
 8003302:	2306      	movs	r3, #6
 8003304:	e00c      	b.n	8003320 <HAL_GPIO_Init+0x244>
 8003306:	2307      	movs	r3, #7
 8003308:	e00a      	b.n	8003320 <HAL_GPIO_Init+0x244>
 800330a:	2305      	movs	r3, #5
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x244>
 800330e:	2304      	movs	r3, #4
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x244>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x244>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x244>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x244>
 800331e:	2300      	movs	r3, #0
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003330:	4937      	ldr	r1, [pc, #220]	; (8003410 <HAL_GPIO_Init+0x334>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_GPIO_Init+0x350>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003362:	4a32      	ldr	r2, [pc, #200]	; (800342c <HAL_GPIO_Init+0x350>)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <HAL_GPIO_Init+0x350>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800338c:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_GPIO_Init+0x350>)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_GPIO_Init+0x350>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_GPIO_Init+0x350>)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_GPIO_Init+0x350>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033e0:	4a12      	ldr	r2, [pc, #72]	; (800342c <HAL_GPIO_Init+0x350>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3301      	adds	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f47f ae78 	bne.w	80030ec <HAL_GPIO_Init+0x10>
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	40010000 	.word	0x40010000
 8003414:	48000400 	.word	0x48000400
 8003418:	48000800 	.word	0x48000800
 800341c:	48000c00 	.word	0x48000c00
 8003420:	48001000 	.word	0x48001000
 8003424:	48001400 	.word	0x48001400
 8003428:	48001800 	.word	0x48001800
 800342c:	40010400 	.word	0x40010400

08003430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003440:	787b      	ldrb	r3, [r7, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800344c:	e002      	b.n	8003454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003476:	4a05      	ldr	r2, [pc, #20]	; (800348c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe f8fa 	bl	8001678 <HAL_GPIO_EXTI_Callback>
  }
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40010400 	.word	0x40010400

08003490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e081      	b.n	80035a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd ff6c 	bl	8001394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	; 0x24
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	e006      	b.n	8003518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d104      	bne.n	800352a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800354c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69d9      	ldr	r1, [r3, #28]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	817b      	strh	r3, [r7, #10]
 80035c2:	460b      	mov	r3, r1
 80035c4:	813b      	strh	r3, [r7, #8]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	f040 80f9 	bne.w	80037ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x34>
 80035de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0ed      	b.n	80037cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_I2C_Mem_Write+0x4e>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e0e6      	b.n	80037cc <HAL_I2C_Mem_Write+0x21c>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003606:	f7fe fa39 	bl	8001a7c <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2319      	movs	r3, #25
 8003612:	2201      	movs	r2, #1
 8003614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f001 fb78 	bl	8004d0e <I2C_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0d1      	b.n	80037cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2221      	movs	r2, #33	; 0x21
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a3a      	ldr	r2, [r7, #32]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003650:	88f8      	ldrh	r0, [r7, #6]
 8003652:	893a      	ldrh	r2, [r7, #8]
 8003654:	8979      	ldrh	r1, [r7, #10]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	4603      	mov	r3, r0
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fe1b 	bl	800429c <I2C_RequestMemoryWrite>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0a9      	b.n	80037cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2bff      	cmp	r3, #255	; 0xff
 8003680:	d90e      	bls.n	80036a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	22ff      	movs	r2, #255	; 0xff
 8003686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	b2da      	uxtb	r2, r3
 800368e:	8979      	ldrh	r1, [r7, #10]
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f001 fce1 	bl	8005060 <I2C_TransferConfig>
 800369e:	e00f      	b.n	80036c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	8979      	ldrh	r1, [r7, #10]
 80036b2:	2300      	movs	r3, #0
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f001 fcd0 	bl	8005060 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f001 fb62 	bl	8004d8e <I2C_WaitOnTXISFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e07b      	b.n	80037cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d034      	beq.n	8003778 <HAL_I2C_Mem_Write+0x1c8>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	d130      	bne.n	8003778 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371c:	2200      	movs	r2, #0
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f001 faf4 	bl	8004d0e <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e04d      	b.n	80037cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2bff      	cmp	r3, #255	; 0xff
 8003738:	d90e      	bls.n	8003758 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	22ff      	movs	r2, #255	; 0xff
 800373e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	b2da      	uxtb	r2, r3
 8003746:	8979      	ldrh	r1, [r7, #10]
 8003748:	2300      	movs	r3, #0
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f001 fc85 	bl	8005060 <I2C_TransferConfig>
 8003756:	e00f      	b.n	8003778 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	b2da      	uxtb	r2, r3
 8003768:	8979      	ldrh	r1, [r7, #10]
 800376a:	2300      	movs	r3, #0
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f001 fc74 	bl	8005060 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d19e      	bne.n	80036c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f001 fb41 	bl	8004e0e <I2C_WaitOnSTOPFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e01a      	b.n	80037cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2220      	movs	r2, #32
 800379c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_I2C_Mem_Write+0x224>)
 80037aa:	400b      	ands	r3, r1
 80037ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	fe00e800 	.word	0xfe00e800

080037d8 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	4608      	mov	r0, r1
 80037e2:	4611      	mov	r1, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	817b      	strh	r3, [r7, #10]
 80037ea:	460b      	mov	r3, r1
 80037ec:	813b      	strh	r3, [r7, #8]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	f040 80c3 	bne.w	8003986 <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_I2C_Mem_Write_DMA+0x34>
 8003806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b7      	b.n	8003988 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003826:	d101      	bne.n	800382c <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
 800382a:	e0ad      	b.n	8003988 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_I2C_Mem_Write_DMA+0x62>
 8003836:	2302      	movs	r3, #2
 8003838:	e0a6      	b.n	8003988 <HAL_I2C_Mem_Write_DMA+0x1b0>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2221      	movs	r2, #33	; 0x21
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a49      	ldr	r2, [pc, #292]	; (8003994 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 800386e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8003870:	897a      	ldrh	r2, [r7, #10]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2bff      	cmp	r3, #255	; 0xff
 800387e:	d903      	bls.n	8003888 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	22ff      	movs	r2, #255	; 0xff
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28
 8003886:	e004      	b.n	8003892 <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d109      	bne.n	80038ac <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003898:	893b      	ldrh	r3, [r7, #8]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	651a      	str	r2, [r3, #80]	; 0x50
 80038aa:	e00b      	b.n	80038c4 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038ac:	893b      	ldrh	r3, [r7, #8]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80038ba:	893b      	ldrh	r3, [r7, #8]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmatx != NULL)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	4a31      	ldr	r2, [pc, #196]	; (8003998 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	4a30      	ldr	r2, [pc, #192]	; (800399c <HAL_I2C_Mem_Write_DMA+0x1c4>)
 80038da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	2200      	movs	r2, #0
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038f0:	6a39      	ldr	r1, [r7, #32]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3328      	adds	r3, #40	; 0x28
 80038f8:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80038fe:	f7ff fa5f 	bl	8002dc0 <HAL_DMA_Start_IT>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d128      	bne.n	800395e <HAL_I2C_Mem_Write_DMA+0x186>
 800390c:	e013      	b.n	8003936 <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e028      	b.n	8003988 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	8979      	ldrh	r1, [r7, #10]
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f001 fb8b 	bl	8005060 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003952:	2101      	movs	r1, #1
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f001 fbb5 	bl	80050c4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e014      	b.n	8003988 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f043 0210 	orr.w	r2, r3, #16
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	ffff0000 	.word	0xffff0000
 8003994:	08003e95 	.word	0x08003e95
 8003998:	08004c0f 	.word	0x08004c0f
 800399c:	08004ca5 	.word	0x08004ca5
 80039a0:	80002000 	.word	0x80002000

080039a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
  }
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
 8003a34:	4613      	mov	r3, r2
 8003a36:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <I2C_Slave_ISR_IT+0x24>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e0ec      	b.n	8003ca6 <I2C_Slave_ISR_IT+0x1fe>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003aec:	6939      	ldr	r1, [r7, #16]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fe12 	bl	8004718 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d04d      	beq.n	8003b9c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d047      	beq.n	8003b9c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d128      	bne.n	8003b68 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b28      	cmp	r3, #40	; 0x28
 8003b20:	d108      	bne.n	8003b34 <I2C_Slave_ISR_IT+0x8c>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b28:	d104      	bne.n	8003b34 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b2a:	6939      	ldr	r1, [r7, #16]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fefd 	bl	800492c <I2C_ITListenCplt>
 8003b32:	e032      	b.n	8003b9a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b29      	cmp	r3, #41	; 0x29
 8003b3e:	d10e      	bne.n	8003b5e <I2C_Slave_ISR_IT+0xb6>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b46:	d00a      	beq.n	8003b5e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f001 f838 	bl	8004bc6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fcb5 	bl	80044c6 <I2C_ITSlaveSeqCplt>
 8003b5c:	e01d      	b.n	8003b9a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2210      	movs	r2, #16
 8003b64:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003b66:	e096      	b.n	8003c96 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f043 0204 	orr.w	r2, r3, #4
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <I2C_Slave_ISR_IT+0xe4>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b88:	f040 8085 	bne.w	8003c96 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	4619      	mov	r1, r3
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 ff20 	bl	80049d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b98:	e07d      	b.n	8003c96 <I2C_Slave_ISR_IT+0x1ee>
 8003b9a:	e07c      	b.n	8003c96 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d030      	beq.n	8003c0a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d02a      	beq.n	8003c0a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d018      	beq.n	8003bf0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d14f      	bne.n	8003c9a <I2C_Slave_ISR_IT+0x1f2>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c00:	d04b      	beq.n	8003c9a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fc5f 	bl	80044c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c08:	e047      	b.n	8003c9a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c22:	6939      	ldr	r1, [r7, #16]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fb8d 	bl	8004344 <I2C_ITAddrCplt>
 8003c2a:	e037      	b.n	8003c9c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d031      	beq.n	8003c9c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02b      	beq.n	8003c9c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d018      	beq.n	8003c80 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c7e:	e00d      	b.n	8003c9c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c86:	d002      	beq.n	8003c8e <I2C_Slave_ISR_IT+0x1e6>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fc19 	bl	80044c6 <I2C_ITSlaveSeqCplt>
 8003c94:	e002      	b.n	8003c9c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003c9a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b088      	sub	sp, #32
 8003cb2:	af02      	add	r7, sp, #8
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <I2C_Master_ISR_DMA+0x1a>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e0e1      	b.n	8003e8c <I2C_Master_ISR_DMA+0x1de>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d017      	beq.n	8003d0c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d011      	beq.n	8003d0c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2210      	movs	r2, #16
 8003cee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	f043 0204 	orr.w	r2, r3, #4
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003cfc:	2120      	movs	r1, #32
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f001 f9e0 	bl	80050c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 ff5e 	bl	8004bc6 <I2C_Flush_TXDR>
 8003d0a:	e0ba      	b.n	8003e82 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	09db      	lsrs	r3, r3, #7
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d072      	beq.n	8003dfe <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	099b      	lsrs	r3, r3, #6
 8003d1c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d06c      	beq.n	8003dfe <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d32:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d04e      	beq.n	8003ddc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2bff      	cmp	r3, #255	; 0xff
 8003d54:	d906      	bls.n	8003d64 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	22ff      	movs	r2, #255	; 0xff
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e010      	b.n	8003d86 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d76:	d003      	beq.n	8003d80 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e002      	b.n	8003d86 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d84:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	8a79      	ldrh	r1, [r7, #18]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f001 f963 	bl	8005060 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b22      	cmp	r3, #34	; 0x22
 8003db6:	d108      	bne.n	8003dca <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003dc8:	e05b      	b.n	8003e82 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003dda:	e052      	b.n	8003e82 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dea:	d003      	beq.n	8003df4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fb2d 	bl	800444c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003df2:	e046      	b.n	8003e82 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fdee 	bl	80049d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003dfc:	e041      	b.n	8003e82 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d029      	beq.n	8003e5e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d023      	beq.n	8003e5e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d119      	bne.n	8003e54 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e2e:	d027      	beq.n	8003e80 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e38:	d108      	bne.n	8003e4c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e48:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003e4a:	e019      	b.n	8003e80 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fafd 	bl	800444c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003e52:	e015      	b.n	8003e80 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fdbe 	bl	80049d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003e5c:	e010      	b.n	8003e80 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fb83 	bl	8004584 <I2C_ITMasterCplt>
 8003e7e:	e000      	b.n	8003e82 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003e80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003ea0:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <I2C_Mem_ISR_DMA+0x240>)
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <I2C_Mem_ISR_DMA+0x1e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e10c      	b.n	80040cc <I2C_Mem_ISR_DMA+0x238>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d017      	beq.n	8003ef6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f043 0204 	orr.w	r2, r3, #4
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003ee6:	2120      	movs	r1, #32
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f001 f8eb 	bl	80050c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fe69 	bl	8004bc6 <I2C_Flush_TXDR>
 8003ef4:	e0e5      	b.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00f      	beq.n	8003f22 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1e:	651a      	str	r2, [r3, #80]	; 0x50
 8003f20:	e0cf      	b.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	09db      	lsrs	r3, r3, #7
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d05c      	beq.n	8003fe8 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d056      	beq.n	8003fe8 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003f3a:	2110      	movs	r1, #16
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f001 f8c1 	bl	80050c4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d048      	beq.n	8003fde <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2bff      	cmp	r3, #255	; 0xff
 8003f54:	d910      	bls.n	8003f78 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	22ff      	movs	r2, #255	; 0xff
 8003f5a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	b299      	uxth	r1, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f001 f875 	bl	8005060 <I2C_TransferConfig>
 8003f76:	e011      	b.n	8003f9c <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	b299      	uxth	r1, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f001 f862 	bl	8005060 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b22      	cmp	r3, #34	; 0x22
 8003fb8:	d108      	bne.n	8003fcc <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003fca:	e07a      	b.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fda:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003fdc:	e071      	b.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003fde:	2140      	movs	r1, #64	; 0x40
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fcf9 	bl	80049d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003fe6:	e06c      	b.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d056      	beq.n	80040a2 <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d050      	beq.n	80040a2 <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b22      	cmp	r3, #34	; 0x22
 800400a:	d101      	bne.n	8004010 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 800400c:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <I2C_Mem_ISR_DMA+0x244>)
 800400e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	2bff      	cmp	r3, #255	; 0xff
 8004018:	d910      	bls.n	800403c <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	b299      	uxth	r1, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	b2da      	uxtb	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f001 f813 	bl	8005060 <I2C_TransferConfig>
 800403a:	e011      	b.n	8004060 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	b299      	uxth	r1, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004050:	b2da      	uxtb	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f001 f800 	bl	8005060 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b22      	cmp	r3, #34	; 0x22
 800407c:	d108      	bne.n	8004090 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800408c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800408e:	e018      	b.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040a0:	e00f      	b.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fa61 	bl	8004584 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	80002000 	.word	0x80002000
 80040d8:	80002400 	.word	0x80002400

080040dc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <I2C_Slave_ISR_DMA+0x24>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0c9      	b.n	8004294 <I2C_Slave_ISR_DMA+0x1b8>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 faf8 	bl	8004718 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 809a 	beq.w	800426a <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8093 	beq.w	800426a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0b9b      	lsrs	r3, r3, #14
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	0bdb      	lsrs	r3, r3, #15
 8004154:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004158:	2b00      	cmp	r3, #0
 800415a:	d07f      	beq.n	800425c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	0bdb      	lsrs	r3, r3, #15
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800417c:	2301      	movs	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00d      	beq.n	80041a4 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0b9b      	lsrs	r3, r3, #14
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80041a0:	2301      	movs	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d128      	bne.n	80041fc <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b28      	cmp	r3, #40	; 0x28
 80041b4:	d108      	bne.n	80041c8 <I2C_Slave_ISR_DMA+0xec>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041bc:	d104      	bne.n	80041c8 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fbb3 	bl	800492c <I2C_ITListenCplt>
 80041c6:	e048      	b.n	800425a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b29      	cmp	r3, #41	; 0x29
 80041d2:	d10e      	bne.n	80041f2 <I2C_Slave_ISR_DMA+0x116>
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041da:	d00a      	beq.n	80041f2 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2210      	movs	r2, #16
 80041e2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fcee 	bl	8004bc6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f96b 	bl	80044c6 <I2C_ITSlaveSeqCplt>
 80041f0:	e033      	b.n	800425a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2210      	movs	r2, #16
 80041f8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80041fa:	e034      	b.n	8004266 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2210      	movs	r2, #16
 8004202:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	f043 0204 	orr.w	r2, r3, #4
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004216:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <I2C_Slave_ISR_DMA+0x14a>
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004224:	d11f      	bne.n	8004266 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	2b21      	cmp	r3, #33	; 0x21
 800422a:	d002      	beq.n	8004232 <I2C_Slave_ISR_DMA+0x156>
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b29      	cmp	r3, #41	; 0x29
 8004230:	d103      	bne.n	800423a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2221      	movs	r2, #33	; 0x21
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
 8004238:	e008      	b.n	800424c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b22      	cmp	r3, #34	; 0x22
 800423e:	d002      	beq.n	8004246 <I2C_Slave_ISR_DMA+0x16a>
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b2a      	cmp	r3, #42	; 0x2a
 8004244:	d102      	bne.n	800424c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2222      	movs	r2, #34	; 0x22
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004250:	4619      	mov	r1, r3
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fbc0 	bl	80049d8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004258:	e005      	b.n	8004266 <I2C_Slave_ISR_DMA+0x18a>
 800425a:	e004      	b.n	8004266 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2210      	movs	r2, #16
 8004262:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004264:	e011      	b.n	800428a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004266:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004268:	e00f      	b.n	800428a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	08db      	lsrs	r3, r3, #3
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f85d 	bl	8004344 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	4608      	mov	r0, r1
 80042a6:	4611      	mov	r1, r2
 80042a8:	461a      	mov	r2, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	817b      	strh	r3, [r7, #10]
 80042ae:	460b      	mov	r3, r1
 80042b0:	813b      	strh	r3, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	4b20      	ldr	r3, [pc, #128]	; (8004340 <I2C_RequestMemoryWrite+0xa4>)
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fecb 	bl	8005060 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fd5d 	bl	8004d8e <I2C_WaitOnTXISFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e02c      	b.n	8004338 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d105      	bne.n	80042f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	629a      	str	r2, [r3, #40]	; 0x28
 80042ee:	e015      	b.n	800431c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042f0:	893b      	ldrh	r3, [r7, #8]
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fd43 	bl	8004d8e <I2C_WaitOnTXISFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e012      	b.n	8004338 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004312:	893b      	ldrh	r3, [r7, #8]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2200      	movs	r2, #0
 8004324:	2180      	movs	r1, #128	; 0x80
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fcf1 	bl	8004d0e <I2C_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	80002000 	.word	0x80002000

08004344 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800435a:	2b28      	cmp	r3, #40	; 0x28
 800435c:	d16a      	bne.n	8004434 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	b29b      	uxth	r3, r3
 8004378:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800437c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800438a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004398:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d138      	bne.n	8004414 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80043a2:	897b      	ldrh	r3, [r7, #10]
 80043a4:	09db      	lsrs	r3, r3, #7
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	89bb      	ldrh	r3, [r7, #12]
 80043aa:	4053      	eors	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f003 0306 	and.w	r3, r3, #6
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11c      	bne.n	80043f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80043b6:	897b      	ldrh	r3, [r7, #10]
 80043b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d13b      	bne.n	8004444 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2208      	movs	r2, #8
 80043d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043e2:	89ba      	ldrh	r2, [r7, #12]
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	4619      	mov	r1, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fb1d 	bl	8003a28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043ee:	e029      	b.n	8004444 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fecd 	bl	8005198 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004406:	89ba      	ldrh	r2, [r7, #12]
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fb0b 	bl	8003a28 <HAL_I2C_AddrCallback>
}
 8004412:	e017      	b.n	8004444 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 febd 	bl	8005198 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004426:	89ba      	ldrh	r2, [r7, #12]
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fafb 	bl	8003a28 <HAL_I2C_AddrCallback>
}
 8004432:	e007      	b.n	8004444 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2208      	movs	r2, #8
 800443a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b21      	cmp	r3, #33	; 0x21
 8004466:	d115      	bne.n	8004494 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2211      	movs	r2, #17
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800447c:	2101      	movs	r1, #1
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fe8a 	bl	8005198 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff faa3 	bl	80039d8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004492:	e014      	b.n	80044be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2212      	movs	r2, #18
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044a8:	2102      	movs	r1, #2
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fe74 	bl	8005198 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff fa97 	bl	80039ec <HAL_I2C_MasterRxCpltCallback>
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	0b9b      	lsrs	r3, r3, #14
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e00d      	b.n	8004518 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	0bdb      	lsrs	r3, r3, #15
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004516:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b29      	cmp	r3, #41	; 0x29
 8004522:	d112      	bne.n	800454a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2228      	movs	r2, #40	; 0x28
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2221      	movs	r2, #33	; 0x21
 8004530:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004532:	2101      	movs	r1, #1
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fe2f 	bl	8005198 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fa5c 	bl	8003a00 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004548:	e017      	b.n	800457a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b2a      	cmp	r3, #42	; 0x2a
 8004554:	d111      	bne.n	800457a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2228      	movs	r2, #40	; 0x28
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2222      	movs	r2, #34	; 0x22
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004564:	2102      	movs	r1, #2
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fe16 	bl	8005198 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fa4d 	bl	8003a14 <HAL_I2C_SlaveRxCpltCallback>
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2220      	movs	r2, #32
 8004598:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b21      	cmp	r3, #33	; 0x21
 80045a4:	d107      	bne.n	80045b6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045a6:	2101      	movs	r1, #1
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fdf5 	bl	8005198 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2211      	movs	r2, #17
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
 80045b4:	e00c      	b.n	80045d0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b22      	cmp	r3, #34	; 0x22
 80045c0:	d106      	bne.n	80045d0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045c2:	2102      	movs	r1, #2
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fde7 	bl	8005198 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2212      	movs	r2, #18
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6859      	ldr	r1, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <I2C_ITMasterCplt+0x18c>)
 80045dc:	400b      	ands	r3, r1
 80045de:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4a      	ldr	r2, [pc, #296]	; (8004714 <I2C_ITMasterCplt+0x190>)
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2210      	movs	r2, #16
 80045fe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f043 0204 	orr.w	r2, r3, #4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b60      	cmp	r3, #96	; 0x60
 8004616:	d10b      	bne.n	8004630 <I2C_ITMasterCplt+0xac>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	b2db      	uxtb	r3, r3
 800462c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800462e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fac8 	bl	8004bc6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b60      	cmp	r3, #96	; 0x60
 8004646:	d002      	beq.n	800464e <I2C_ITMasterCplt+0xca>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f9bf 	bl	80049d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800465a:	e054      	b.n	8004706 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b21      	cmp	r3, #33	; 0x21
 8004666:	d124      	bne.n	80046b2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d10b      	bne.n	800469a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff f9e0 	bl	8003a58 <HAL_I2C_MemTxCpltCallback>
}
 8004698:	e035      	b.n	8004706 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff f994 	bl	80039d8 <HAL_I2C_MasterTxCpltCallback>
}
 80046b0:	e029      	b.n	8004706 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b22      	cmp	r3, #34	; 0x22
 80046bc:	d123      	bne.n	8004706 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b40      	cmp	r3, #64	; 0x40
 80046d6:	d10b      	bne.n	80046f0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff f9bf 	bl	8003a6c <HAL_I2C_MemRxCpltCallback>
}
 80046ee:	e00a      	b.n	8004706 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff f973 	bl	80039ec <HAL_I2C_MasterRxCpltCallback>
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	fe00e800 	.word	0xfe00e800
 8004714:	ffff0000 	.word	0xffff0000

08004718 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004734:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2220      	movs	r2, #32
 800473c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	2b21      	cmp	r3, #33	; 0x21
 8004742:	d002      	beq.n	800474a <I2C_ITSlaveCplt+0x32>
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b29      	cmp	r3, #41	; 0x29
 8004748:	d108      	bne.n	800475c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800474a:	f248 0101 	movw	r1, #32769	; 0x8001
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fd22 	bl	8005198 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2221      	movs	r2, #33	; 0x21
 8004758:	631a      	str	r2, [r3, #48]	; 0x30
 800475a:	e00d      	b.n	8004778 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b22      	cmp	r3, #34	; 0x22
 8004760:	d002      	beq.n	8004768 <I2C_ITSlaveCplt+0x50>
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b2a      	cmp	r3, #42	; 0x2a
 8004766:	d107      	bne.n	8004778 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004768:	f248 0102 	movw	r1, #32770	; 0x8002
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fd13 	bl	8005198 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2222      	movs	r2, #34	; 0x22
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004786:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b64      	ldr	r3, [pc, #400]	; (8004924 <I2C_ITSlaveCplt+0x20c>)
 8004794:	400b      	ands	r3, r1
 8004796:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fa14 	bl	8004bc6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	0b9b      	lsrs	r3, r3, #14
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d013      	beq.n	80047d2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d020      	beq.n	8004804 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047d0:	e018      	b.n	8004804 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	0bdb      	lsrs	r3, r3, #15
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f023 0304 	bic.w	r3, r3, #4
 8004816:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00c      	beq.n	8004852 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	f043 0204 	orr.w	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	2b00      	cmp	r3, #0
 800487c:	d010      	beq.n	80048a0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8a7 	bl	80049d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b28      	cmp	r3, #40	; 0x28
 8004894:	d141      	bne.n	800491a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004896:	6979      	ldr	r1, [r7, #20]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f847 	bl	800492c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800489e:	e03c      	b.n	800491a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048a8:	d014      	beq.n	80048d4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff fe0b 	bl	80044c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <I2C_ITSlaveCplt+0x210>)
 80048b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff f8b9 	bl	8003a44 <HAL_I2C_ListenCpltCallback>
}
 80048d2:	e022      	b.n	800491a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b22      	cmp	r3, #34	; 0x22
 80048de:	d10e      	bne.n	80048fe <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff f88c 	bl	8003a14 <HAL_I2C_SlaveRxCpltCallback>
}
 80048fc:	e00d      	b.n	800491a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff f873 	bl	8003a00 <HAL_I2C_SlaveTxCpltCallback>
}
 800491a:	bf00      	nop
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	fe00e800 	.word	0xfe00e800
 8004928:	ffff0000 	.word	0xffff0000

0800492c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <I2C_ITListenCplt+0xa8>)
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d022      	beq.n	80049aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049aa:	f248 0103 	movw	r1, #32771	; 0x8003
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fbf2 	bl	8005198 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2210      	movs	r2, #16
 80049ba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff f83d 	bl	8003a44 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	ffff0000 	.word	0xffff0000

080049d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a5d      	ldr	r2, [pc, #372]	; (8004b6c <I2C_ITError+0x194>)
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b28      	cmp	r3, #40	; 0x28
 8004a0e:	d005      	beq.n	8004a1c <I2C_ITError+0x44>
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b29      	cmp	r3, #41	; 0x29
 8004a14:	d002      	beq.n	8004a1c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1a:	d10b      	bne.n	8004a34 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a1c:	2103      	movs	r1, #3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fbba 	bl	8005198 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2228      	movs	r2, #40	; 0x28
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a50      	ldr	r2, [pc, #320]	; (8004b70 <I2C_ITError+0x198>)
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34
 8004a32:	e011      	b.n	8004a58 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a34:	f248 0103 	movw	r1, #32771	; 0x8003
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fbad 	bl	8005198 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b60      	cmp	r3, #96	; 0x60
 8004a48:	d003      	beq.n	8004a52 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d039      	beq.n	8004ada <I2C_ITError+0x102>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b11      	cmp	r3, #17
 8004a6a:	d002      	beq.n	8004a72 <I2C_ITError+0x9a>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b21      	cmp	r3, #33	; 0x21
 8004a70:	d133      	bne.n	8004ada <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a80:	d107      	bne.n	8004a92 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a90:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fae2 	bl	8003060 <HAL_DMA_GetState>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d017      	beq.n	8004ad2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	4a33      	ldr	r2, [pc, #204]	; (8004b74 <I2C_ITError+0x19c>)
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe f9e2 	bl	8002e80 <HAL_DMA_Abort_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d04d      	beq.n	8004b5e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004acc:	4610      	mov	r0, r2
 8004ace:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ad0:	e045      	b.n	8004b5e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f850 	bl	8004b78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ad8:	e041      	b.n	8004b5e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d039      	beq.n	8004b56 <I2C_ITError+0x17e>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b12      	cmp	r3, #18
 8004ae6:	d002      	beq.n	8004aee <I2C_ITError+0x116>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b22      	cmp	r3, #34	; 0x22
 8004aec:	d133      	bne.n	8004b56 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afc:	d107      	bne.n	8004b0e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b0c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe faa4 	bl	8003060 <HAL_DMA_GetState>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d017      	beq.n	8004b4e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <I2C_ITError+0x19c>)
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe f9a4 	bl	8002e80 <HAL_DMA_Abort_IT>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b4c:	e009      	b.n	8004b62 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f812 	bl	8004b78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b54:	e005      	b.n	8004b62 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f80e 	bl	8004b78 <I2C_TreatErrorCallback>
  }
}
 8004b5c:	e002      	b.n	8004b64 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b62:	bf00      	nop
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	ffff0000 	.word	0xffff0000
 8004b70:	08003aa9 	.word	0x08003aa9
 8004b74:	08004cd3 	.word	0x08004cd3

08004b78 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d10e      	bne.n	8004baa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fe ff76 	bl	8003a94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ba8:	e009      	b.n	8004bbe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fe ff61 	bl	8003a80 <HAL_I2C_ErrorCallback>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d103      	bne.n	8004be4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d007      	beq.n	8004c02 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	619a      	str	r2, [r3, #24]
  }
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c2a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c36:	2120      	movs	r1, #32
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fa43 	bl	80050c4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004c3e:	e02d      	b.n	8004c9c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004c48:	441a      	add	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2bff      	cmp	r3, #255	; 0xff
 8004c56:	d903      	bls.n	8004c60 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	22ff      	movs	r2, #255	; 0xff
 8004c5c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c5e:	e004      	b.n	8004c6a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	4619      	mov	r1, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3328      	adds	r3, #40	; 0x28
 8004c7a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004c80:	f7fe f89e 	bl	8002dc0 <HAL_DMA_Start_IT>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d004      	beq.n	8004c94 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7ff fea3 	bl	80049d8 <I2C_ITError>
}
 8004c92:	e003      	b.n	8004c9c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004c94:	2140      	movs	r1, #64	; 0x40
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fa14 	bl	80050c4 <I2C_Enable_IRQ>
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004cc2:	2110      	movs	r1, #16
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff fe87 	bl	80049d8 <I2C_ITError>
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	2200      	movs	r2, #0
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff ff39 	bl	8004b78 <I2C_TreatErrorCallback>
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1e:	e022      	b.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d01e      	beq.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d28:	f7fc fea8 	bl	8001a7c <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d113      	bne.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	f043 0220 	orr.w	r2, r3, #32
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e00f      	b.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d0cd      	beq.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d9a:	e02c      	b.n	8004df6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f871 	bl	8004e88 <I2C_IsErrorOccurred>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e02a      	b.n	8004e06 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d01e      	beq.n	8004df6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db8:	f7fc fe60 	bl	8001a7c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d113      	bne.n	8004df6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e007      	b.n	8004e06 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d1cb      	bne.n	8004d9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e1a:	e028      	b.n	8004e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f831 	bl	8004e88 <I2C_IsErrorOccurred>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e026      	b.n	8004e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e30:	f7fc fe24 	bl	8001a7c <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d113      	bne.n	8004e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e007      	b.n	8004e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d1cf      	bne.n	8004e1c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d075      	beq.n	8004fa0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2210      	movs	r2, #16
 8004eba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ebc:	e056      	b.n	8004f6c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d052      	beq.n	8004f6c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fc fdd9 	bl	8001a7c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <I2C_IsErrorOccurred+0x54>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d147      	bne.n	8004f6c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efe:	d12e      	bne.n	8004f5e <I2C_IsErrorOccurred+0xd6>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f06:	d02a      	beq.n	8004f5e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d027      	beq.n	8004f5e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f1e:	f7fc fdad 	bl	8001a7c <HAL_GetTick>
 8004f22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f24:	e01b      	b.n	8004f5e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f26:	f7fc fda9 	bl	8001a7c <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b19      	cmp	r3, #25
 8004f32:	d914      	bls.n	8004f5e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d1dc      	bne.n	8004f26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d003      	beq.n	8004f82 <I2C_IsErrorOccurred+0xfa>
 8004f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d09d      	beq.n	8004ebe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d103      	bne.n	8004f92 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f043 0308 	orr.w	r3, r3, #8
 8004fda:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fe4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	f043 0302 	orr.w	r3, r3, #2
 8004ffc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005006:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800500e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01c      	beq.n	8005050 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff fdd5 	bl	8004bc6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6859      	ldr	r1, [r3, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <I2C_IsErrorOccurred+0x1d4>)
 8005028:	400b      	ands	r3, r1
 800502a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	431a      	orrs	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005054:	4618      	mov	r0, r3
 8005056:	3728      	adds	r7, #40	; 0x28
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	fe00e800 	.word	0xfe00e800

08005060 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	817b      	strh	r3, [r7, #10]
 800506e:	4613      	mov	r3, r2
 8005070:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005072:	897b      	ldrh	r3, [r7, #10]
 8005074:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005078:	7a7b      	ldrb	r3, [r7, #9]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005080:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	4313      	orrs	r3, r2
 800508a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800508e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	0d5b      	lsrs	r3, r3, #21
 800509a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800509e:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <I2C_TransferConfig+0x60>)
 80050a0:	430b      	orrs	r3, r1
 80050a2:	43db      	mvns	r3, r3
 80050a4:	ea02 0103 	and.w	r1, r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	03ff63ff 	.word	0x03ff63ff

080050c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	4a2d      	ldr	r2, [pc, #180]	; (8005190 <I2C_Enable_IRQ+0xcc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80050e2:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <I2C_Enable_IRQ+0xd0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d11d      	bne.n	8005124 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da03      	bge.n	80050f8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80050f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80050f8:	887b      	ldrh	r3, [r7, #2]
 80050fa:	2b10      	cmp	r3, #16
 80050fc:	d103      	bne.n	8005106 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005104:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005106:	887b      	ldrh	r3, [r7, #2]
 8005108:	2b20      	cmp	r3, #32
 800510a:	d103      	bne.n	8005114 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005112:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	2b40      	cmp	r3, #64	; 0x40
 8005118:	d12c      	bne.n	8005174 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005120:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005122:	e027      	b.n	8005174 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005124:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005128:	2b00      	cmp	r3, #0
 800512a:	da03      	bge.n	8005134 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005132:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005144:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005156:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005158:	887b      	ldrh	r3, [r7, #2]
 800515a:	2b10      	cmp	r3, #16
 800515c:	d103      	bne.n	8005166 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005164:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005166:	887b      	ldrh	r3, [r7, #2]
 8005168:	2b20      	cmp	r3, #32
 800516a:	d103      	bne.n	8005174 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f043 0320 	orr.w	r3, r3, #32
 8005172:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	08003caf 	.word	0x08003caf
 8005194:	080040dd 	.word	0x080040dd

08005198 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00f      	beq.n	80051d2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80051b8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051c6:	2b28      	cmp	r3, #40	; 0x28
 80051c8:	d003      	beq.n	80051d2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80051d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051d2:	887b      	ldrh	r3, [r7, #2]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00f      	beq.n	80051fc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80051e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051f0:	2b28      	cmp	r3, #40	; 0x28
 80051f2:	d003      	beq.n	80051fc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80051fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80051fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005200:	2b00      	cmp	r3, #0
 8005202:	da03      	bge.n	800520c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800520a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800520c:	887b      	ldrh	r3, [r7, #2]
 800520e:	2b10      	cmp	r3, #16
 8005210:	d103      	bne.n	800521a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005218:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800521a:	887b      	ldrh	r3, [r7, #2]
 800521c:	2b20      	cmp	r3, #32
 800521e:	d103      	bne.n	8005228 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f043 0320 	orr.w	r3, r3, #32
 8005226:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005228:	887b      	ldrh	r3, [r7, #2]
 800522a:	2b40      	cmp	r3, #64	; 0x40
 800522c:	d103      	bne.n	8005236 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005234:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6819      	ldr	r1, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	43da      	mvns	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	400a      	ands	r2, r1
 8005246:	601a      	str	r2, [r3, #0]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	d138      	bne.n	80052dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005274:	2302      	movs	r3, #2
 8005276:	e032      	b.n	80052de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2224      	movs	r2, #36	; 0x24
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d139      	bne.n	8005374 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800530a:	2302      	movs	r3, #2
 800530c:	e033      	b.n	8005376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2224      	movs	r2, #36	; 0x24
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800533c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <HAL_PWREx_GetVoltageRange+0x18>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005390:	4618      	mov	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40007000 	.word	0x40007000

080053a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ae:	d130      	bne.n	8005412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053bc:	d038      	beq.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053ce:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2232      	movs	r2, #50	; 0x32
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0c9b      	lsrs	r3, r3, #18
 80053e0:	3301      	adds	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053e4:	e002      	b.n	80053ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ec:	4b14      	ldr	r3, [pc, #80]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f8:	d102      	bne.n	8005400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f2      	bne.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d110      	bne.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e00f      	b.n	8005432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800541a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541e:	d007      	beq.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005428:	4a05      	ldr	r2, [pc, #20]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800542e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40007000 	.word	0x40007000
 8005444:	20000004 	.word	0x20000004
 8005448:	431bde83 	.word	0x431bde83

0800544c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e3ca      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545e:	4b97      	ldr	r3, [pc, #604]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 030c 	and.w	r3, r3, #12
 8005466:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005468:	4b94      	ldr	r3, [pc, #592]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80e4 	beq.w	8005648 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <HAL_RCC_OscConfig+0x4a>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b0c      	cmp	r3, #12
 800548a:	f040 808b 	bne.w	80055a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b01      	cmp	r3, #1
 8005492:	f040 8087 	bne.w	80055a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005496:	4b89      	ldr	r3, [pc, #548]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_RCC_OscConfig+0x62>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e3a2      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	4b82      	ldr	r3, [pc, #520]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <HAL_RCC_OscConfig+0x7c>
 80054be:	4b7f      	ldr	r3, [pc, #508]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c6:	e005      	b.n	80054d4 <HAL_RCC_OscConfig+0x88>
 80054c8:	4b7c      	ldr	r3, [pc, #496]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80054ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d223      	bcs.n	8005520 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fd55 	bl	8005f8c <RCC_SetFlashLatencyFromMSIRange>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e383      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ec:	4b73      	ldr	r3, [pc, #460]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a72      	ldr	r2, [pc, #456]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80054f2:	f043 0308 	orr.w	r3, r3, #8
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4b70      	ldr	r3, [pc, #448]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	496d      	ldr	r1, [pc, #436]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800550a:	4b6c      	ldr	r3, [pc, #432]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	4968      	ldr	r1, [pc, #416]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800551a:	4313      	orrs	r3, r2
 800551c:	604b      	str	r3, [r1, #4]
 800551e:	e025      	b.n	800556c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005520:	4b66      	ldr	r3, [pc, #408]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005526:	f043 0308 	orr.w	r3, r3, #8
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	4b63      	ldr	r3, [pc, #396]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	4960      	ldr	r1, [pc, #384]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800553e:	4b5f      	ldr	r3, [pc, #380]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	495b      	ldr	r1, [pc, #364]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800554e:	4313      	orrs	r3, r2
 8005550:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fd15 	bl	8005f8c <RCC_SetFlashLatencyFromMSIRange>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e343      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800556c:	f000 fc4a 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b52      	ldr	r3, [pc, #328]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	4950      	ldr	r1, [pc, #320]	; (80056c0 <HAL_RCC_OscConfig+0x274>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	4a4e      	ldr	r2, [pc, #312]	; (80056c4 <HAL_RCC_OscConfig+0x278>)
 800558a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800558c:	4b4e      	ldr	r3, [pc, #312]	; (80056c8 <HAL_RCC_OscConfig+0x27c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fc fa23 	bl	80019dc <HAL_InitTick>
 8005596:	4603      	mov	r3, r0
 8005598:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d052      	beq.n	8005646 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	e327      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d032      	beq.n	8005612 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055ac:	4b43      	ldr	r3, [pc, #268]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a42      	ldr	r2, [pc, #264]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055b8:	f7fc fa60 	bl	8001a7c <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055c0:	f7fc fa5c 	bl	8001a7c <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e310      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d2:	4b3a      	ldr	r3, [pc, #232]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055de:	4b37      	ldr	r3, [pc, #220]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a36      	ldr	r2, [pc, #216]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80055e4:	f043 0308 	orr.w	r3, r3, #8
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	4b34      	ldr	r3, [pc, #208]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	4931      	ldr	r1, [pc, #196]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055fc:	4b2f      	ldr	r3, [pc, #188]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	492c      	ldr	r1, [pc, #176]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	e01a      	b.n	8005648 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005612:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a29      	ldr	r2, [pc, #164]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800561e:	f7fc fa2d 	bl	8001a7c <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005626:	f7fc fa29 	bl	8001a7c <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e2dd      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005638:	4b20      	ldr	r3, [pc, #128]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f0      	bne.n	8005626 <HAL_RCC_OscConfig+0x1da>
 8005644:	e000      	b.n	8005648 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005646:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d074      	beq.n	800573e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b08      	cmp	r3, #8
 8005658:	d005      	beq.n	8005666 <HAL_RCC_OscConfig+0x21a>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d10e      	bne.n	800567e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d10b      	bne.n	800567e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d064      	beq.n	800573c <HAL_RCC_OscConfig+0x2f0>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d160      	bne.n	800573c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e2ba      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005686:	d106      	bne.n	8005696 <HAL_RCC_OscConfig+0x24a>
 8005688:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0b      	ldr	r2, [pc, #44]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	e026      	b.n	80056e4 <HAL_RCC_OscConfig+0x298>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800569e:	d115      	bne.n	80056cc <HAL_RCC_OscConfig+0x280>
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a05      	ldr	r2, [pc, #20]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80056a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a02      	ldr	r2, [pc, #8]	; (80056bc <HAL_RCC_OscConfig+0x270>)
 80056b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	e014      	b.n	80056e4 <HAL_RCC_OscConfig+0x298>
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	08007a3c 	.word	0x08007a3c
 80056c4:	20000004 	.word	0x20000004
 80056c8:	20000008 	.word	0x20000008
 80056cc:	4ba0      	ldr	r3, [pc, #640]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a9f      	ldr	r2, [pc, #636]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80056d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	4b9d      	ldr	r3, [pc, #628]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a9c      	ldr	r2, [pc, #624]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80056de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d013      	beq.n	8005714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fc f9c6 	bl	8001a7c <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f4:	f7fc f9c2 	bl	8001a7c <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b64      	cmp	r3, #100	; 0x64
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e276      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005706:	4b92      	ldr	r3, [pc, #584]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x2a8>
 8005712:	e014      	b.n	800573e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fc f9b2 	bl	8001a7c <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800571c:	f7fc f9ae 	bl	8001a7c <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b64      	cmp	r3, #100	; 0x64
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e262      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800572e:	4b88      	ldr	r3, [pc, #544]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x2d0>
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800573c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d060      	beq.n	800580c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d005      	beq.n	800575c <HAL_RCC_OscConfig+0x310>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d119      	bne.n	800578a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d116      	bne.n	800578a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800575c:	4b7c      	ldr	r3, [pc, #496]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_OscConfig+0x328>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e23f      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005774:	4b76      	ldr	r3, [pc, #472]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	4973      	ldr	r1, [pc, #460]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005788:	e040      	b.n	800580c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d023      	beq.n	80057da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005792:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6e      	ldr	r2, [pc, #440]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc f96d 	bl	8001a7c <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a6:	f7fc f969 	bl	8001a7c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e21d      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b8:	4b65      	ldr	r3, [pc, #404]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c4:	4b62      	ldr	r3, [pc, #392]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	061b      	lsls	r3, r3, #24
 80057d2:	495f      	ldr	r1, [pc, #380]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	604b      	str	r3, [r1, #4]
 80057d8:	e018      	b.n	800580c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057da:	4b5d      	ldr	r3, [pc, #372]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a5c      	ldr	r2, [pc, #368]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80057e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e6:	f7fc f949 	bl	8001a7c <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ee:	f7fc f945 	bl	8001a7c <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e1f9      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005800:	4b53      	ldr	r3, [pc, #332]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d03c      	beq.n	8005892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01c      	beq.n	800585a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005820:	4b4b      	ldr	r3, [pc, #300]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005826:	4a4a      	ldr	r2, [pc, #296]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005830:	f7fc f924 	bl	8001a7c <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005838:	f7fc f920 	bl	8001a7c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e1d4      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ef      	beq.n	8005838 <HAL_RCC_OscConfig+0x3ec>
 8005858:	e01b      	b.n	8005892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800585a:	4b3d      	ldr	r3, [pc, #244]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 800585c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005860:	4a3b      	ldr	r2, [pc, #236]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fc f907 	bl	8001a7c <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005872:	f7fc f903 	bl	8001a7c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e1b7      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005884:	4b32      	ldr	r3, [pc, #200]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1ef      	bne.n	8005872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a6 	beq.w	80059ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a0:	2300      	movs	r3, #0
 80058a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058a4:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10d      	bne.n	80058cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b0:	4b27      	ldr	r3, [pc, #156]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	6593      	str	r3, [r2, #88]	; 0x58
 80058bc:	4b24      	ldr	r3, [pc, #144]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c8:	2301      	movs	r3, #1
 80058ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058cc:	4b21      	ldr	r3, [pc, #132]	; (8005954 <HAL_RCC_OscConfig+0x508>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d118      	bne.n	800590a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <HAL_RCC_OscConfig+0x508>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <HAL_RCC_OscConfig+0x508>)
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e4:	f7fc f8ca 	bl	8001a7c <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ec:	f7fc f8c6 	bl	8001a7c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e17a      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <HAL_RCC_OscConfig+0x508>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d108      	bne.n	8005924 <HAL_RCC_OscConfig+0x4d8>
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	4a0d      	ldr	r2, [pc, #52]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005922:	e029      	b.n	8005978 <HAL_RCC_OscConfig+0x52c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b05      	cmp	r3, #5
 800592a:	d115      	bne.n	8005958 <HAL_RCC_OscConfig+0x50c>
 800592c:	4b08      	ldr	r3, [pc, #32]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	4a07      	ldr	r2, [pc, #28]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	4a03      	ldr	r2, [pc, #12]	; (8005950 <HAL_RCC_OscConfig+0x504>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800594c:	e014      	b.n	8005978 <HAL_RCC_OscConfig+0x52c>
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	40007000 	.word	0x40007000
 8005958:	4b9c      	ldr	r3, [pc, #624]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	4a9b      	ldr	r2, [pc, #620]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005968:	4b98      	ldr	r3, [pc, #608]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596e:	4a97      	ldr	r2, [pc, #604]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005970:	f023 0304 	bic.w	r3, r3, #4
 8005974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d016      	beq.n	80059ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fc f87c 	bl	8001a7c <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005986:	e00a      	b.n	800599e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005988:	f7fc f878 	bl	8001a7c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e12a      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599e:	4b8b      	ldr	r3, [pc, #556]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ed      	beq.n	8005988 <HAL_RCC_OscConfig+0x53c>
 80059ac:	e015      	b.n	80059da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ae:	f7fc f865 	bl	8001a7c <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059b4:	e00a      	b.n	80059cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b6:	f7fc f861 	bl	8001a7c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e113      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059cc:	4b7f      	ldr	r3, [pc, #508]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1ed      	bne.n	80059b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059da:	7ffb      	ldrb	r3, [r7, #31]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e0:	4b7a      	ldr	r3, [pc, #488]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e4:	4a79      	ldr	r2, [pc, #484]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 80059e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80fe 	beq.w	8005bf2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	f040 80d0 	bne.w	8005ba0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a00:	4b72      	ldr	r3, [pc, #456]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 0203 	and.w	r2, r3, #3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d130      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d127      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d11f      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a40:	2a07      	cmp	r2, #7
 8005a42:	bf14      	ite	ne
 8005a44:	2201      	movne	r2, #1
 8005a46:	2200      	moveq	r2, #0
 8005a48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d113      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d109      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d06e      	beq.n	8005b54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2b0c      	cmp	r3, #12
 8005a7a:	d069      	beq.n	8005b50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a7c:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a88:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0ad      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a98:	4b4c      	ldr	r3, [pc, #304]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a4b      	ldr	r2, [pc, #300]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aa4:	f7fb ffea 	bl	8001a7c <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fb ffe6 	bl	8001a7c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e09a      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005abe:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aca:	4b40      	ldr	r3, [pc, #256]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	4b40      	ldr	r3, [pc, #256]	; (8005bd0 <HAL_RCC_OscConfig+0x784>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ada:	3a01      	subs	r2, #1
 8005adc:	0112      	lsls	r2, r2, #4
 8005ade:	4311      	orrs	r1, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ae4:	0212      	lsls	r2, r2, #8
 8005ae6:	4311      	orrs	r1, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aec:	0852      	lsrs	r2, r2, #1
 8005aee:	3a01      	subs	r2, #1
 8005af0:	0552      	lsls	r2, r2, #21
 8005af2:	4311      	orrs	r1, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005af8:	0852      	lsrs	r2, r2, #1
 8005afa:	3a01      	subs	r2, #1
 8005afc:	0652      	lsls	r2, r2, #25
 8005afe:	4311      	orrs	r1, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b04:	0912      	lsrs	r2, r2, #4
 8005b06:	0452      	lsls	r2, r2, #17
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	4930      	ldr	r1, [pc, #192]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b10:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a2d      	ldr	r2, [pc, #180]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b1c:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a2a      	ldr	r2, [pc, #168]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b28:	f7fb ffa8 	bl	8001a7c <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b30:	f7fb ffa4 	bl	8001a7c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e058      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b42:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b4e:	e050      	b.n	8005bf2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e04f      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b54:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d148      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b60:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b6c:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b78:	f7fb ff80 	bl	8001a7c <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fb ff7c 	bl	8001a7c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e030      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b92:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x734>
 8005b9e:	e028      	b.n	8005bf2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b0c      	cmp	r3, #12
 8005ba4:	d023      	beq.n	8005bee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <HAL_RCC_OscConfig+0x780>)
 8005bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb2:	f7fb ff63 	bl	8001a7c <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb8:	e00c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bba:	f7fb ff5f 	bl	8001a7c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d905      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e013      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <HAL_RCC_OscConfig+0x7b0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ec      	bne.n	8005bba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_RCC_OscConfig+0x7b0>)
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	4905      	ldr	r1, [pc, #20]	; (8005bfc <HAL_RCC_OscConfig+0x7b0>)
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_RCC_OscConfig+0x7b4>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	60cb      	str	r3, [r1, #12]
 8005bec:	e001      	b.n	8005bf2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3720      	adds	r7, #32
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	feeefffc 	.word	0xfeeefffc

08005c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0e7      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c18:	4b75      	ldr	r3, [pc, #468]	; (8005df0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d910      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b72      	ldr	r3, [pc, #456]	; (8005df0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 0207 	bic.w	r2, r3, #7
 8005c2e:	4970      	ldr	r1, [pc, #448]	; (8005df0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c36:	4b6e      	ldr	r3, [pc, #440]	; (8005df0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0cf      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	4b66      	ldr	r3, [pc, #408]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d908      	bls.n	8005c76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c64:	4b63      	ldr	r3, [pc, #396]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4960      	ldr	r1, [pc, #384]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d04c      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d107      	bne.n	8005c9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8a:	4b5a      	ldr	r3, [pc, #360]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d121      	bne.n	8005cda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e0a6      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ca2:	4b54      	ldr	r3, [pc, #336]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d115      	bne.n	8005cda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e09a      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d107      	bne.n	8005cca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cba:	4b4e      	ldr	r3, [pc, #312]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e08e      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cca:	4b4a      	ldr	r3, [pc, #296]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e086      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cda:	4b46      	ldr	r3, [pc, #280]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f023 0203 	bic.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4943      	ldr	r1, [pc, #268]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cec:	f7fb fec6 	bl	8001a7c <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f7fb fec2 	bl	8001a7c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e06e      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	4b3a      	ldr	r3, [pc, #232]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 020c 	and.w	r2, r3, #12
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d1eb      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	4b31      	ldr	r3, [pc, #196]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d208      	bcs.n	8005d4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d38:	4b2e      	ldr	r3, [pc, #184]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	492b      	ldr	r1, [pc, #172]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d4a:	4b29      	ldr	r3, [pc, #164]	; (8005df0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d210      	bcs.n	8005d7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d58:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 0207 	bic.w	r2, r3, #7
 8005d60:	4923      	ldr	r1, [pc, #140]	; (8005df0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d68:	4b21      	ldr	r3, [pc, #132]	; (8005df0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d001      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e036      	b.n	8005de8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d008      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d86:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4918      	ldr	r1, [pc, #96]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da4:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4910      	ldr	r1, [pc, #64]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005db8:	f000 f824 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	091b      	lsrs	r3, r3, #4
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	490b      	ldr	r1, [pc, #44]	; (8005df8 <HAL_RCC_ClockConfig+0x1f4>)
 8005dca:	5ccb      	ldrb	r3, [r1, r3]
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd4:	4a09      	ldr	r2, [pc, #36]	; (8005dfc <HAL_RCC_ClockConfig+0x1f8>)
 8005dd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <HAL_RCC_ClockConfig+0x1fc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fb fdfd 	bl	80019dc <HAL_InitTick>
 8005de2:	4603      	mov	r3, r0
 8005de4:	72fb      	strb	r3, [r7, #11]

  return status;
 8005de6:	7afb      	ldrb	r3, [r7, #11]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40022000 	.word	0x40022000
 8005df4:	40021000 	.word	0x40021000
 8005df8:	08007a3c 	.word	0x08007a3c
 8005dfc:	20000004 	.word	0x20000004
 8005e00:	20000008 	.word	0x20000008

08005e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	; 0x24
 8005e08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e12:	4b3e      	ldr	r3, [pc, #248]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e1c:	4b3b      	ldr	r3, [pc, #236]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0303 	and.w	r3, r3, #3
 8005e24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0x34>
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b0c      	cmp	r3, #12
 8005e30:	d121      	bne.n	8005e76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d11e      	bne.n	8005e76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e38:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e44:	4b31      	ldr	r3, [pc, #196]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4a:	0a1b      	lsrs	r3, r3, #8
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	e005      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e54:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e60:	4a2b      	ldr	r2, [pc, #172]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10d      	bne.n	8005e8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e74:	e00a      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d102      	bne.n	8005e82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e7c:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e004      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e88:	4b23      	ldr	r3, [pc, #140]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	d134      	bne.n	8005efc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e92:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d003      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0xa6>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0xac>
 8005ea8:	e005      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005eaa:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eac:	617b      	str	r3, [r7, #20]
      break;
 8005eae:	e005      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005eb0:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x114>)
 8005eb2:	617b      	str	r3, [r7, #20]
      break;
 8005eb4:	e002      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	617b      	str	r3, [r7, #20]
      break;
 8005eba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ebc:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005eca:	4b10      	ldr	r3, [pc, #64]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	fb03 f202 	mul.w	r2, r3, r2
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	0e5b      	lsrs	r3, r3, #25
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	3301      	adds	r3, #1
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005efc:	69bb      	ldr	r3, [r7, #24]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3724      	adds	r7, #36	; 0x24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	08007a54 	.word	0x08007a54
 8005f14:	00f42400 	.word	0x00f42400
 8005f18:	007a1200 	.word	0x007a1200

08005f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f20:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20000004 	.word	0x20000004

08005f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f38:	f7ff fff0 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	4904      	ldr	r1, [pc, #16]	; (8005f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f4a:	5ccb      	ldrb	r3, [r1, r3]
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	08007a4c 	.word	0x08007a4c

08005f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f64:	f7ff ffda 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	0adb      	lsrs	r3, r3, #11
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	4904      	ldr	r1, [pc, #16]	; (8005f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40021000 	.word	0x40021000
 8005f88:	08007a4c 	.word	0x08007a4c

08005f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f94:	2300      	movs	r3, #0
 8005f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f98:	4b2a      	ldr	r3, [pc, #168]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fa4:	f7ff f9ee 	bl	8005384 <HAL_PWREx_GetVoltageRange>
 8005fa8:	6178      	str	r0, [r7, #20]
 8005faa:	e014      	b.n	8005fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fac:	4b25      	ldr	r3, [pc, #148]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	4a24      	ldr	r2, [pc, #144]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8005fb8:	4b22      	ldr	r3, [pc, #136]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005fc4:	f7ff f9de 	bl	8005384 <HAL_PWREx_GetVoltageRange>
 8005fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005fca:	4b1e      	ldr	r3, [pc, #120]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fce:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fdc:	d10b      	bne.n	8005ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b80      	cmp	r3, #128	; 0x80
 8005fe2:	d919      	bls.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8005fe8:	d902      	bls.n	8005ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fea:	2302      	movs	r3, #2
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	e013      	b.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	e010      	b.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b80      	cmp	r3, #128	; 0x80
 8005ffa:	d902      	bls.n	8006002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	e00a      	b.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b80      	cmp	r3, #128	; 0x80
 8006006:	d102      	bne.n	800600e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006008:	2302      	movs	r3, #2
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	e004      	b.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b70      	cmp	r3, #112	; 0x70
 8006012:	d101      	bne.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006014:	2301      	movs	r3, #1
 8006016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f023 0207 	bic.w	r2, r3, #7
 8006020:	4909      	ldr	r1, [pc, #36]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006028:	4b07      	ldr	r3, [pc, #28]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	429a      	cmp	r2, r3
 8006034:	d001      	beq.n	800603a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40021000 	.word	0x40021000
 8006048:	40022000 	.word	0x40022000

0800604c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006054:	2300      	movs	r3, #0
 8006056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006058:	2300      	movs	r3, #0
 800605a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006064:	2b00      	cmp	r3, #0
 8006066:	d041      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800606c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006070:	d02a      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006072:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006076:	d824      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800607c:	d008      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800607e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006082:	d81e      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800608c:	d010      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800608e:	e018      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006090:	4b86      	ldr	r3, [pc, #536]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4a85      	ldr	r2, [pc, #532]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800609a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800609c:	e015      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	2100      	movs	r1, #0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fabb 	bl	8006620 <RCCEx_PLLSAI1_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060ae:	e00c      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3320      	adds	r3, #32
 80060b4:	2100      	movs	r1, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fba6 	bl	8006808 <RCCEx_PLLSAI2_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060c0:	e003      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	74fb      	strb	r3, [r7, #19]
      break;
 80060c6:	e000      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80060c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ca:	7cfb      	ldrb	r3, [r7, #19]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060d0:	4b76      	ldr	r3, [pc, #472]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060de:	4973      	ldr	r1, [pc, #460]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80060e6:	e001      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	7cfb      	ldrb	r3, [r7, #19]
 80060ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d041      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006100:	d02a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006102:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006106:	d824      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800610c:	d008      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800610e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006112:	d81e      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800611c:	d010      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800611e:	e018      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006120:	4b62      	ldr	r3, [pc, #392]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4a61      	ldr	r2, [pc, #388]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800612c:	e015      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fa73 	bl	8006620 <RCCEx_PLLSAI1_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800613e:	e00c      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3320      	adds	r3, #32
 8006144:	2100      	movs	r1, #0
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fb5e 	bl	8006808 <RCCEx_PLLSAI2_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006150:	e003      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	74fb      	strb	r3, [r7, #19]
      break;
 8006156:	e000      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800615a:	7cfb      	ldrb	r3, [r7, #19]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006160:	4b52      	ldr	r3, [pc, #328]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616e:	494f      	ldr	r1, [pc, #316]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006176:	e001      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80a0 	beq.w	80062ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800618e:	4b47      	ldr	r3, [pc, #284]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00d      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a4:	4b41      	ldr	r3, [pc, #260]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a8:	4a40      	ldr	r2, [pc, #256]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ae:	6593      	str	r3, [r2, #88]	; 0x58
 80061b0:	4b3e      	ldr	r3, [pc, #248]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061bc:	2301      	movs	r3, #1
 80061be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061c0:	4b3b      	ldr	r3, [pc, #236]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a3a      	ldr	r2, [pc, #232]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061cc:	f7fb fc56 	bl	8001a7c <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061d2:	e009      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d4:	f7fb fc52 	bl	8001a7c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d902      	bls.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	74fb      	strb	r3, [r7, #19]
        break;
 80061e6:	e005      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061e8:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0ef      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d15c      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061fa:	4b2c      	ldr	r3, [pc, #176]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006204:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01f      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	429a      	cmp	r2, r3
 8006216:	d019      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006218:	4b24      	ldr	r3, [pc, #144]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006222:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006224:	4b21      	ldr	r3, [pc, #132]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	4a20      	ldr	r2, [pc, #128]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623a:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800623c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006244:	4a19      	ldr	r2, [pc, #100]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d016      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006256:	f7fb fc11 	bl	8001a7c <HAL_GetTick>
 800625a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800625c:	e00b      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800625e:	f7fb fc0d 	bl	8001a7c <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f241 3288 	movw	r2, #5000	; 0x1388
 800626c:	4293      	cmp	r3, r2
 800626e:	d902      	bls.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	74fb      	strb	r3, [r7, #19]
            break;
 8006274:	e006      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0ec      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006284:	7cfb      	ldrb	r3, [r7, #19]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10c      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629a:	4904      	ldr	r1, [pc, #16]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800629c:	4313      	orrs	r3, r2
 800629e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062a2:	e009      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	74bb      	strb	r3, [r7, #18]
 80062a8:	e006      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80062aa:	bf00      	nop
 80062ac:	40021000 	.word	0x40021000
 80062b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	7cfb      	ldrb	r3, [r7, #19]
 80062b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062b8:	7c7b      	ldrb	r3, [r7, #17]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d105      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062be:	4b9e      	ldr	r3, [pc, #632]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c2:	4a9d      	ldr	r2, [pc, #628]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062d6:	4b98      	ldr	r3, [pc, #608]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062dc:	f023 0203 	bic.w	r2, r3, #3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	4994      	ldr	r1, [pc, #592]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062f8:	4b8f      	ldr	r3, [pc, #572]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	f023 020c 	bic.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	498c      	ldr	r1, [pc, #560]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800631a:	4b87      	ldr	r3, [pc, #540]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006320:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	4983      	ldr	r1, [pc, #524]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800633c:	4b7e      	ldr	r3, [pc, #504]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006342:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634a:	497b      	ldr	r1, [pc, #492]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800635e:	4b76      	ldr	r3, [pc, #472]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636c:	4972      	ldr	r1, [pc, #456]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006380:	4b6d      	ldr	r3, [pc, #436]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006386:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638e:	496a      	ldr	r1, [pc, #424]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a2:	4b65      	ldr	r3, [pc, #404]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	4961      	ldr	r1, [pc, #388]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063c4:	4b5c      	ldr	r3, [pc, #368]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d2:	4959      	ldr	r1, [pc, #356]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063e6:	4b54      	ldr	r3, [pc, #336]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f4:	4950      	ldr	r1, [pc, #320]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006408:	4b4b      	ldr	r3, [pc, #300]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	4948      	ldr	r1, [pc, #288]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800642a:	4b43      	ldr	r3, [pc, #268]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006430:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	493f      	ldr	r1, [pc, #252]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d028      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800644c:	4b3a      	ldr	r3, [pc, #232]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006452:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645a:	4937      	ldr	r1, [pc, #220]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800646a:	d106      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800646c:	4b32      	ldr	r3, [pc, #200]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	4a31      	ldr	r2, [pc, #196]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006476:	60d3      	str	r3, [r2, #12]
 8006478:	e011      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006482:	d10c      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	2101      	movs	r1, #1
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f8c8 	bl	8006620 <RCCEx_PLLSAI1_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006494:	7cfb      	ldrb	r3, [r7, #19]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800649a:	7cfb      	ldrb	r3, [r7, #19]
 800649c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d028      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064aa:	4b23      	ldr	r3, [pc, #140]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	491f      	ldr	r1, [pc, #124]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c8:	d106      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ca:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	4a1a      	ldr	r2, [pc, #104]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d4:	60d3      	str	r3, [r2, #12]
 80064d6:	e011      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064e0:	d10c      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3304      	adds	r3, #4
 80064e6:	2101      	movs	r1, #1
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f899 	bl	8006620 <RCCEx_PLLSAI1_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064f2:	7cfb      	ldrb	r3, [r7, #19]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80064f8:	7cfb      	ldrb	r3, [r7, #19]
 80064fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02b      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006516:	4908      	ldr	r1, [pc, #32]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006526:	d109      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a02      	ldr	r2, [pc, #8]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800652e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006532:	60d3      	str	r3, [r2, #12]
 8006534:	e014      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006544:	d10c      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3304      	adds	r3, #4
 800654a:	2101      	movs	r1, #1
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f867 	bl	8006620 <RCCEx_PLLSAI1_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006556:	7cfb      	ldrb	r3, [r7, #19]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d02f      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800656c:	4b2b      	ldr	r3, [pc, #172]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006572:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657a:	4928      	ldr	r1, [pc, #160]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800658a:	d10d      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	2102      	movs	r1, #2
 8006592:	4618      	mov	r0, r3
 8006594:	f000 f844 	bl	8006620 <RCCEx_PLLSAI1_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800659c:	7cfb      	ldrb	r3, [r7, #19]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d014      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80065a2:	7cfb      	ldrb	r3, [r7, #19]
 80065a4:	74bb      	strb	r3, [r7, #18]
 80065a6:	e011      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b0:	d10c      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3320      	adds	r3, #32
 80065b6:	2102      	movs	r1, #2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 f925 	bl	8006808 <RCCEx_PLLSAI2_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065c2:	7cfb      	ldrb	r3, [r7, #19]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065d8:	4b10      	ldr	r3, [pc, #64]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e6:	490d      	ldr	r1, [pc, #52]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006600:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660a:	4904      	ldr	r1, [pc, #16]	; (800661c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006612:	7cbb      	ldrb	r3, [r7, #18]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40021000 	.word	0x40021000

08006620 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800662e:	4b75      	ldr	r3, [pc, #468]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d018      	beq.n	800666c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800663a:	4b72      	ldr	r3, [pc, #456]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f003 0203 	and.w	r2, r3, #3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d10d      	bne.n	8006666 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
       ||
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006652:	4b6c      	ldr	r3, [pc, #432]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
       ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d047      	beq.n	80066f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	73fb      	strb	r3, [r7, #15]
 800666a:	e044      	b.n	80066f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d018      	beq.n	80066a6 <RCCEx_PLLSAI1_Config+0x86>
 8006674:	2b03      	cmp	r3, #3
 8006676:	d825      	bhi.n	80066c4 <RCCEx_PLLSAI1_Config+0xa4>
 8006678:	2b01      	cmp	r3, #1
 800667a:	d002      	beq.n	8006682 <RCCEx_PLLSAI1_Config+0x62>
 800667c:	2b02      	cmp	r3, #2
 800667e:	d009      	beq.n	8006694 <RCCEx_PLLSAI1_Config+0x74>
 8006680:	e020      	b.n	80066c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006682:	4b60      	ldr	r3, [pc, #384]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d11d      	bne.n	80066ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006692:	e01a      	b.n	80066ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006694:	4b5b      	ldr	r3, [pc, #364]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800669c:	2b00      	cmp	r3, #0
 800669e:	d116      	bne.n	80066ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066a4:	e013      	b.n	80066ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066a6:	4b57      	ldr	r3, [pc, #348]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10f      	bne.n	80066d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066b2:	4b54      	ldr	r3, [pc, #336]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066c2:	e006      	b.n	80066d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
      break;
 80066c8:	e004      	b.n	80066d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066ca:	bf00      	nop
 80066cc:	e002      	b.n	80066d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066ce:	bf00      	nop
 80066d0:	e000      	b.n	80066d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10d      	bne.n	80066f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80066da:	4b4a      	ldr	r3, [pc, #296]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	430b      	orrs	r3, r1
 80066f0:	4944      	ldr	r1, [pc, #272]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d17d      	bne.n	80067f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066fc:	4b41      	ldr	r3, [pc, #260]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a40      	ldr	r2, [pc, #256]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006708:	f7fb f9b8 	bl	8001a7c <HAL_GetTick>
 800670c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800670e:	e009      	b.n	8006724 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006710:	f7fb f9b4 	bl	8001a7c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d902      	bls.n	8006724 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	73fb      	strb	r3, [r7, #15]
        break;
 8006722:	e005      	b.n	8006730 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006724:	4b37      	ldr	r3, [pc, #220]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1ef      	bne.n	8006710 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d160      	bne.n	80067f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d111      	bne.n	8006760 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800673c:	4b31      	ldr	r3, [pc, #196]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6892      	ldr	r2, [r2, #8]
 800674c:	0211      	lsls	r1, r2, #8
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68d2      	ldr	r2, [r2, #12]
 8006752:	0912      	lsrs	r2, r2, #4
 8006754:	0452      	lsls	r2, r2, #17
 8006756:	430a      	orrs	r2, r1
 8006758:	492a      	ldr	r1, [pc, #168]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 800675a:	4313      	orrs	r3, r2
 800675c:	610b      	str	r3, [r1, #16]
 800675e:	e027      	b.n	80067b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d112      	bne.n	800678c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800676e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6892      	ldr	r2, [r2, #8]
 8006776:	0211      	lsls	r1, r2, #8
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6912      	ldr	r2, [r2, #16]
 800677c:	0852      	lsrs	r2, r2, #1
 800677e:	3a01      	subs	r2, #1
 8006780:	0552      	lsls	r2, r2, #21
 8006782:	430a      	orrs	r2, r1
 8006784:	491f      	ldr	r1, [pc, #124]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006786:	4313      	orrs	r3, r2
 8006788:	610b      	str	r3, [r1, #16]
 800678a:	e011      	b.n	80067b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800678c:	4b1d      	ldr	r3, [pc, #116]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006794:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6892      	ldr	r2, [r2, #8]
 800679c:	0211      	lsls	r1, r2, #8
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6952      	ldr	r2, [r2, #20]
 80067a2:	0852      	lsrs	r2, r2, #1
 80067a4:	3a01      	subs	r2, #1
 80067a6:	0652      	lsls	r2, r2, #25
 80067a8:	430a      	orrs	r2, r1
 80067aa:	4916      	ldr	r1, [pc, #88]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80067b0:	4b14      	ldr	r3, [pc, #80]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a13      	ldr	r2, [pc, #76]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067bc:	f7fb f95e 	bl	8001a7c <HAL_GetTick>
 80067c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067c2:	e009      	b.n	80067d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067c4:	f7fb f95a 	bl	8001a7c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d902      	bls.n	80067d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	73fb      	strb	r3, [r7, #15]
          break;
 80067d6:	e005      	b.n	80067e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ef      	beq.n	80067c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067ea:	4b06      	ldr	r3, [pc, #24]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	4904      	ldr	r1, [pc, #16]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40021000 	.word	0x40021000

08006808 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006816:	4b6a      	ldr	r3, [pc, #424]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d018      	beq.n	8006854 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006822:	4b67      	ldr	r3, [pc, #412]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f003 0203 	and.w	r2, r3, #3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d10d      	bne.n	800684e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
       ||
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800683a:	4b61      	ldr	r3, [pc, #388]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	091b      	lsrs	r3, r3, #4
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
       ||
 800684a:	429a      	cmp	r2, r3
 800684c:	d047      	beq.n	80068de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
 8006852:	e044      	b.n	80068de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d018      	beq.n	800688e <RCCEx_PLLSAI2_Config+0x86>
 800685c:	2b03      	cmp	r3, #3
 800685e:	d825      	bhi.n	80068ac <RCCEx_PLLSAI2_Config+0xa4>
 8006860:	2b01      	cmp	r3, #1
 8006862:	d002      	beq.n	800686a <RCCEx_PLLSAI2_Config+0x62>
 8006864:	2b02      	cmp	r3, #2
 8006866:	d009      	beq.n	800687c <RCCEx_PLLSAI2_Config+0x74>
 8006868:	e020      	b.n	80068ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800686a:	4b55      	ldr	r3, [pc, #340]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11d      	bne.n	80068b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800687a:	e01a      	b.n	80068b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800687c:	4b50      	ldr	r3, [pc, #320]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006884:	2b00      	cmp	r3, #0
 8006886:	d116      	bne.n	80068b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800688c:	e013      	b.n	80068b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800688e:	4b4c      	ldr	r3, [pc, #304]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10f      	bne.n	80068ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800689a:	4b49      	ldr	r3, [pc, #292]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068aa:	e006      	b.n	80068ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
      break;
 80068b0:	e004      	b.n	80068bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068b2:	bf00      	nop
 80068b4:	e002      	b.n	80068bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068b6:	bf00      	nop
 80068b8:	e000      	b.n	80068bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10d      	bne.n	80068de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068c2:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	430b      	orrs	r3, r1
 80068d8:	4939      	ldr	r1, [pc, #228]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d167      	bne.n	80069b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068e4:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a35      	ldr	r2, [pc, #212]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f0:	f7fb f8c4 	bl	8001a7c <HAL_GetTick>
 80068f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068f6:	e009      	b.n	800690c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068f8:	f7fb f8c0 	bl	8001a7c <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d902      	bls.n	800690c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	73fb      	strb	r3, [r7, #15]
        break;
 800690a:	e005      	b.n	8006918 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800690c:	4b2c      	ldr	r3, [pc, #176]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ef      	bne.n	80068f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d14a      	bne.n	80069b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d111      	bne.n	8006948 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006924:	4b26      	ldr	r3, [pc, #152]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800692c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6892      	ldr	r2, [r2, #8]
 8006934:	0211      	lsls	r1, r2, #8
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	68d2      	ldr	r2, [r2, #12]
 800693a:	0912      	lsrs	r2, r2, #4
 800693c:	0452      	lsls	r2, r2, #17
 800693e:	430a      	orrs	r2, r1
 8006940:	491f      	ldr	r1, [pc, #124]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006942:	4313      	orrs	r3, r2
 8006944:	614b      	str	r3, [r1, #20]
 8006946:	e011      	b.n	800696c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006950:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6892      	ldr	r2, [r2, #8]
 8006958:	0211      	lsls	r1, r2, #8
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6912      	ldr	r2, [r2, #16]
 800695e:	0852      	lsrs	r2, r2, #1
 8006960:	3a01      	subs	r2, #1
 8006962:	0652      	lsls	r2, r2, #25
 8006964:	430a      	orrs	r2, r1
 8006966:	4916      	ldr	r1, [pc, #88]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006968:	4313      	orrs	r3, r2
 800696a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800696c:	4b14      	ldr	r3, [pc, #80]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a13      	ldr	r2, [pc, #76]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006976:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006978:	f7fb f880 	bl	8001a7c <HAL_GetTick>
 800697c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800697e:	e009      	b.n	8006994 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006980:	f7fb f87c 	bl	8001a7c <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d902      	bls.n	8006994 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	73fb      	strb	r3, [r7, #15]
          break;
 8006992:	e005      	b.n	80069a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0ef      	beq.n	8006980 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069a6:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	4904      	ldr	r1, [pc, #16]	; (80069c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40021000 	.word	0x40021000

080069c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e040      	b.n	8006a58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fa ff52 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	; 0x24
 80069f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f82c 	bl	8006a60 <UART_SetConfig>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e022      	b.n	8006a58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fad8 	bl	8006fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fb5f 	bl	8007114 <UART_CheckIdleState>
 8006a56:	4603      	mov	r3, r0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a64:	b08a      	sub	sp, #40	; 0x28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4ba4      	ldr	r3, [pc, #656]	; (8006d20 <UART_SetConfig+0x2c0>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a99      	ldr	r2, [pc, #612]	; (8006d24 <UART_SetConfig+0x2c4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d004      	beq.n	8006acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006adc:	430a      	orrs	r2, r1
 8006ade:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a90      	ldr	r2, [pc, #576]	; (8006d28 <UART_SetConfig+0x2c8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d126      	bne.n	8006b38 <UART_SetConfig+0xd8>
 8006aea:	4b90      	ldr	r3, [pc, #576]	; (8006d2c <UART_SetConfig+0x2cc>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d81b      	bhi.n	8006b30 <UART_SetConfig+0xd0>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <UART_SetConfig+0xa0>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b11 	.word	0x08006b11
 8006b04:	08006b21 	.word	0x08006b21
 8006b08:	08006b19 	.word	0x08006b19
 8006b0c:	08006b29 	.word	0x08006b29
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b16:	e116      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1e:	e112      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006b20:	2304      	movs	r3, #4
 8006b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b26:	e10e      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006b28:	2308      	movs	r3, #8
 8006b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2e:	e10a      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006b30:	2310      	movs	r3, #16
 8006b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b36:	e106      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a7c      	ldr	r2, [pc, #496]	; (8006d30 <UART_SetConfig+0x2d0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d138      	bne.n	8006bb4 <UART_SetConfig+0x154>
 8006b42:	4b7a      	ldr	r3, [pc, #488]	; (8006d2c <UART_SetConfig+0x2cc>)
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b48:	f003 030c 	and.w	r3, r3, #12
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	d82d      	bhi.n	8006bac <UART_SetConfig+0x14c>
 8006b50:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <UART_SetConfig+0xf8>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006bad 	.word	0x08006bad
 8006b60:	08006bad 	.word	0x08006bad
 8006b64:	08006bad 	.word	0x08006bad
 8006b68:	08006b9d 	.word	0x08006b9d
 8006b6c:	08006bad 	.word	0x08006bad
 8006b70:	08006bad 	.word	0x08006bad
 8006b74:	08006bad 	.word	0x08006bad
 8006b78:	08006b95 	.word	0x08006b95
 8006b7c:	08006bad 	.word	0x08006bad
 8006b80:	08006bad 	.word	0x08006bad
 8006b84:	08006bad 	.word	0x08006bad
 8006b88:	08006ba5 	.word	0x08006ba5
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e0d8      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006b94:	2302      	movs	r3, #2
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e0d4      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba2:	e0d0      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006ba4:	2308      	movs	r3, #8
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006baa:	e0cc      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006bac:	2310      	movs	r3, #16
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb2:	e0c8      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a5e      	ldr	r2, [pc, #376]	; (8006d34 <UART_SetConfig+0x2d4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d125      	bne.n	8006c0a <UART_SetConfig+0x1aa>
 8006bbe:	4b5b      	ldr	r3, [pc, #364]	; (8006d2c <UART_SetConfig+0x2cc>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bc8:	2b30      	cmp	r3, #48	; 0x30
 8006bca:	d016      	beq.n	8006bfa <UART_SetConfig+0x19a>
 8006bcc:	2b30      	cmp	r3, #48	; 0x30
 8006bce:	d818      	bhi.n	8006c02 <UART_SetConfig+0x1a2>
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d00a      	beq.n	8006bea <UART_SetConfig+0x18a>
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d814      	bhi.n	8006c02 <UART_SetConfig+0x1a2>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <UART_SetConfig+0x182>
 8006bdc:	2b10      	cmp	r3, #16
 8006bde:	d008      	beq.n	8006bf2 <UART_SetConfig+0x192>
 8006be0:	e00f      	b.n	8006c02 <UART_SetConfig+0x1a2>
 8006be2:	2300      	movs	r3, #0
 8006be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be8:	e0ad      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006bea:	2302      	movs	r3, #2
 8006bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf0:	e0a9      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006bf2:	2304      	movs	r3, #4
 8006bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf8:	e0a5      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c00:	e0a1      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006c02:	2310      	movs	r3, #16
 8006c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c08:	e09d      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a4a      	ldr	r2, [pc, #296]	; (8006d38 <UART_SetConfig+0x2d8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d125      	bne.n	8006c60 <UART_SetConfig+0x200>
 8006c14:	4b45      	ldr	r3, [pc, #276]	; (8006d2c <UART_SetConfig+0x2cc>)
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c20:	d016      	beq.n	8006c50 <UART_SetConfig+0x1f0>
 8006c22:	2bc0      	cmp	r3, #192	; 0xc0
 8006c24:	d818      	bhi.n	8006c58 <UART_SetConfig+0x1f8>
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d00a      	beq.n	8006c40 <UART_SetConfig+0x1e0>
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d814      	bhi.n	8006c58 <UART_SetConfig+0x1f8>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <UART_SetConfig+0x1d8>
 8006c32:	2b40      	cmp	r3, #64	; 0x40
 8006c34:	d008      	beq.n	8006c48 <UART_SetConfig+0x1e8>
 8006c36:	e00f      	b.n	8006c58 <UART_SetConfig+0x1f8>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3e:	e082      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006c40:	2302      	movs	r3, #2
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c46:	e07e      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006c48:	2304      	movs	r3, #4
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4e:	e07a      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006c50:	2308      	movs	r3, #8
 8006c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c56:	e076      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5e:	e072      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a35      	ldr	r2, [pc, #212]	; (8006d3c <UART_SetConfig+0x2dc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d12a      	bne.n	8006cc0 <UART_SetConfig+0x260>
 8006c6a:	4b30      	ldr	r3, [pc, #192]	; (8006d2c <UART_SetConfig+0x2cc>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c78:	d01a      	beq.n	8006cb0 <UART_SetConfig+0x250>
 8006c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c7e:	d81b      	bhi.n	8006cb8 <UART_SetConfig+0x258>
 8006c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c84:	d00c      	beq.n	8006ca0 <UART_SetConfig+0x240>
 8006c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c8a:	d815      	bhi.n	8006cb8 <UART_SetConfig+0x258>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <UART_SetConfig+0x238>
 8006c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c94:	d008      	beq.n	8006ca8 <UART_SetConfig+0x248>
 8006c96:	e00f      	b.n	8006cb8 <UART_SetConfig+0x258>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9e:	e052      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca6:	e04e      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006ca8:	2304      	movs	r3, #4
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cae:	e04a      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006cb0:	2308      	movs	r3, #8
 8006cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cb6:	e046      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006cb8:	2310      	movs	r3, #16
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cbe:	e042      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a17      	ldr	r2, [pc, #92]	; (8006d24 <UART_SetConfig+0x2c4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d13a      	bne.n	8006d40 <UART_SetConfig+0x2e0>
 8006cca:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <UART_SetConfig+0x2cc>)
 8006ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cd8:	d01a      	beq.n	8006d10 <UART_SetConfig+0x2b0>
 8006cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cde:	d81b      	bhi.n	8006d18 <UART_SetConfig+0x2b8>
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce4:	d00c      	beq.n	8006d00 <UART_SetConfig+0x2a0>
 8006ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cea:	d815      	bhi.n	8006d18 <UART_SetConfig+0x2b8>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <UART_SetConfig+0x298>
 8006cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf4:	d008      	beq.n	8006d08 <UART_SetConfig+0x2a8>
 8006cf6:	e00f      	b.n	8006d18 <UART_SetConfig+0x2b8>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfe:	e022      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006d00:	2302      	movs	r3, #2
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d06:	e01e      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d0e:	e01a      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006d10:	2308      	movs	r3, #8
 8006d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d16:	e016      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006d18:	2310      	movs	r3, #16
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d1e:	e012      	b.n	8006d46 <UART_SetConfig+0x2e6>
 8006d20:	efff69f3 	.word	0xefff69f3
 8006d24:	40008000 	.word	0x40008000
 8006d28:	40013800 	.word	0x40013800
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	40004400 	.word	0x40004400
 8006d34:	40004800 	.word	0x40004800
 8006d38:	40004c00 	.word	0x40004c00
 8006d3c:	40005000 	.word	0x40005000
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a9f      	ldr	r2, [pc, #636]	; (8006fc8 <UART_SetConfig+0x568>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d17a      	bne.n	8006e46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d824      	bhi.n	8006da2 <UART_SetConfig+0x342>
 8006d58:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <UART_SetConfig+0x300>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006da3 	.word	0x08006da3
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006da3 	.word	0x08006da3
 8006d70:	08006d93 	.word	0x08006d93
 8006d74:	08006da3 	.word	0x08006da3
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006da3 	.word	0x08006da3
 8006d80:	08006d9b 	.word	0x08006d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d84:	f7ff f8d6 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8006d88:	61f8      	str	r0, [r7, #28]
        break;
 8006d8a:	e010      	b.n	8006dae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d8c:	4b8f      	ldr	r3, [pc, #572]	; (8006fcc <UART_SetConfig+0x56c>)
 8006d8e:	61fb      	str	r3, [r7, #28]
        break;
 8006d90:	e00d      	b.n	8006dae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d92:	f7ff f837 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8006d96:	61f8      	str	r0, [r7, #28]
        break;
 8006d98:	e009      	b.n	8006dae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9e:	61fb      	str	r3, [r7, #28]
        break;
 8006da0:	e005      	b.n	8006dae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80fb 	beq.w	8006fac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d305      	bcc.n	8006dd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d903      	bls.n	8006dda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dd8:	e0e8      	b.n	8006fac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	461c      	mov	r4, r3
 8006de0:	4615      	mov	r5, r2
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	022b      	lsls	r3, r5, #8
 8006dec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006df0:	0222      	lsls	r2, r4, #8
 8006df2:	68f9      	ldr	r1, [r7, #12]
 8006df4:	6849      	ldr	r1, [r1, #4]
 8006df6:	0849      	lsrs	r1, r1, #1
 8006df8:	2000      	movs	r0, #0
 8006dfa:	4688      	mov	r8, r1
 8006dfc:	4681      	mov	r9, r0
 8006dfe:	eb12 0a08 	adds.w	sl, r2, r8
 8006e02:	eb43 0b09 	adc.w	fp, r3, r9
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e14:	4650      	mov	r0, sl
 8006e16:	4659      	mov	r1, fp
 8006e18:	f7f9 f9d6 	bl	80001c8 <__aeabi_uldivmod>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4613      	mov	r3, r2
 8006e22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e2a:	d308      	bcc.n	8006e3e <UART_SetConfig+0x3de>
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e32:	d204      	bcs.n	8006e3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	60da      	str	r2, [r3, #12]
 8006e3c:	e0b6      	b.n	8006fac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e44:	e0b2      	b.n	8006fac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4e:	d15e      	bne.n	8006f0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d828      	bhi.n	8006eaa <UART_SetConfig+0x44a>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <UART_SetConfig+0x400>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	08006e8d 	.word	0x08006e8d
 8006e68:	08006e95 	.word	0x08006e95
 8006e6c:	08006eab 	.word	0x08006eab
 8006e70:	08006e9b 	.word	0x08006e9b
 8006e74:	08006eab 	.word	0x08006eab
 8006e78:	08006eab 	.word	0x08006eab
 8006e7c:	08006eab 	.word	0x08006eab
 8006e80:	08006ea3 	.word	0x08006ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e84:	f7ff f856 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8006e88:	61f8      	str	r0, [r7, #28]
        break;
 8006e8a:	e014      	b.n	8006eb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e8c:	f7ff f868 	bl	8005f60 <HAL_RCC_GetPCLK2Freq>
 8006e90:	61f8      	str	r0, [r7, #28]
        break;
 8006e92:	e010      	b.n	8006eb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e94:	4b4d      	ldr	r3, [pc, #308]	; (8006fcc <UART_SetConfig+0x56c>)
 8006e96:	61fb      	str	r3, [r7, #28]
        break;
 8006e98:	e00d      	b.n	8006eb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e9a:	f7fe ffb3 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8006e9e:	61f8      	str	r0, [r7, #28]
        break;
 8006ea0:	e009      	b.n	8006eb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea6:	61fb      	str	r3, [r7, #28]
        break;
 8006ea8:	e005      	b.n	8006eb6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d077      	beq.n	8006fac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	005a      	lsls	r2, r3, #1
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	441a      	add	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b0f      	cmp	r3, #15
 8006ed6:	d916      	bls.n	8006f06 <UART_SetConfig+0x4a6>
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ede:	d212      	bcs.n	8006f06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f023 030f 	bic.w	r3, r3, #15
 8006ee8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	085b      	lsrs	r3, r3, #1
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	8afb      	ldrh	r3, [r7, #22]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	8afa      	ldrh	r2, [r7, #22]
 8006f02:	60da      	str	r2, [r3, #12]
 8006f04:	e052      	b.n	8006fac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f0c:	e04e      	b.n	8006fac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d827      	bhi.n	8006f66 <UART_SetConfig+0x506>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0x4bc>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08006f49 	.word	0x08006f49
 8006f24:	08006f51 	.word	0x08006f51
 8006f28:	08006f67 	.word	0x08006f67
 8006f2c:	08006f57 	.word	0x08006f57
 8006f30:	08006f67 	.word	0x08006f67
 8006f34:	08006f67 	.word	0x08006f67
 8006f38:	08006f67 	.word	0x08006f67
 8006f3c:	08006f5f 	.word	0x08006f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f40:	f7fe fff8 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8006f44:	61f8      	str	r0, [r7, #28]
        break;
 8006f46:	e014      	b.n	8006f72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f48:	f7ff f80a 	bl	8005f60 <HAL_RCC_GetPCLK2Freq>
 8006f4c:	61f8      	str	r0, [r7, #28]
        break;
 8006f4e:	e010      	b.n	8006f72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f50:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <UART_SetConfig+0x56c>)
 8006f52:	61fb      	str	r3, [r7, #28]
        break;
 8006f54:	e00d      	b.n	8006f72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f56:	f7fe ff55 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8006f5a:	61f8      	str	r0, [r7, #28]
        break;
 8006f5c:	e009      	b.n	8006f72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f62:	61fb      	str	r3, [r7, #28]
        break;
 8006f64:	e005      	b.n	8006f72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f70:	bf00      	nop
    }

    if (pclk != 0U)
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d019      	beq.n	8006fac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	085a      	lsrs	r2, r3, #1
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	441a      	add	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d909      	bls.n	8006fa6 <UART_SetConfig+0x546>
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f98:	d205      	bcs.n	8006fa6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	e002      	b.n	8006fac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3728      	adds	r7, #40	; 0x28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40008000 	.word	0x40008000
 8006fcc:	00f42400 	.word	0x00f42400

08006fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01a      	beq.n	80070e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ce:	d10a      	bne.n	80070e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
  }
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af02      	add	r7, sp, #8
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007124:	f7fa fcaa 	bl	8001a7c <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b08      	cmp	r3, #8
 8007136:	d10e      	bne.n	8007156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f82d 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e023      	b.n	800719e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b04      	cmp	r3, #4
 8007162:	d10e      	bne.n	8007182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f817 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e00d      	b.n	800719e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b09c      	sub	sp, #112	; 0x70
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b6:	e0a5      	b.n	8007304 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	f000 80a1 	beq.w	8007304 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fa fc5b 	bl	8001a7c <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80071d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d13e      	bne.n	8007256 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ec:	667b      	str	r3, [r7, #100]	; 0x64
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e6      	bne.n	80071d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	663b      	str	r3, [r7, #96]	; 0x60
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800722a:	64ba      	str	r2, [r7, #72]	; 0x48
 800722c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e5      	bne.n	800720a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2220      	movs	r2, #32
 8007248:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e067      	b.n	8007326 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d04f      	beq.n	8007304 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800726e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007272:	d147      	bne.n	8007304 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800727c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
 800729e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e6      	bne.n	800727e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3308      	adds	r3, #8
 80072b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	613b      	str	r3, [r7, #16]
   return(result);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f023 0301 	bic.w	r3, r3, #1
 80072c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3308      	adds	r3, #8
 80072ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072d0:	623a      	str	r2, [r7, #32]
 80072d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	69f9      	ldr	r1, [r7, #28]
 80072d6:	6a3a      	ldr	r2, [r7, #32]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e5      	bne.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2220      	movs	r2, #32
 80072ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e010      	b.n	8007326 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69da      	ldr	r2, [r3, #28]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4013      	ands	r3, r2
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	429a      	cmp	r2, r3
 8007312:	bf0c      	ite	eq
 8007314:	2301      	moveq	r3, #1
 8007316:	2300      	movne	r3, #0
 8007318:	b2db      	uxtb	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	79fb      	ldrb	r3, [r7, #7]
 800731e:	429a      	cmp	r2, r3
 8007320:	f43f af4a 	beq.w	80071b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3770      	adds	r7, #112	; 0x70
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <__errno>:
 8007330:	4b01      	ldr	r3, [pc, #4]	; (8007338 <__errno+0x8>)
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000010 	.word	0x20000010

0800733c <__libc_init_array>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4d0d      	ldr	r5, [pc, #52]	; (8007374 <__libc_init_array+0x38>)
 8007340:	4c0d      	ldr	r4, [pc, #52]	; (8007378 <__libc_init_array+0x3c>)
 8007342:	1b64      	subs	r4, r4, r5
 8007344:	10a4      	asrs	r4, r4, #2
 8007346:	2600      	movs	r6, #0
 8007348:	42a6      	cmp	r6, r4
 800734a:	d109      	bne.n	8007360 <__libc_init_array+0x24>
 800734c:	4d0b      	ldr	r5, [pc, #44]	; (800737c <__libc_init_array+0x40>)
 800734e:	4c0c      	ldr	r4, [pc, #48]	; (8007380 <__libc_init_array+0x44>)
 8007350:	f000 f8da 	bl	8007508 <_init>
 8007354:	1b64      	subs	r4, r4, r5
 8007356:	10a4      	asrs	r4, r4, #2
 8007358:	2600      	movs	r6, #0
 800735a:	42a6      	cmp	r6, r4
 800735c:	d105      	bne.n	800736a <__libc_init_array+0x2e>
 800735e:	bd70      	pop	{r4, r5, r6, pc}
 8007360:	f855 3b04 	ldr.w	r3, [r5], #4
 8007364:	4798      	blx	r3
 8007366:	3601      	adds	r6, #1
 8007368:	e7ee      	b.n	8007348 <__libc_init_array+0xc>
 800736a:	f855 3b04 	ldr.w	r3, [r5], #4
 800736e:	4798      	blx	r3
 8007370:	3601      	adds	r6, #1
 8007372:	e7f2      	b.n	800735a <__libc_init_array+0x1e>
 8007374:	08007a8c 	.word	0x08007a8c
 8007378:	08007a8c 	.word	0x08007a8c
 800737c:	08007a8c 	.word	0x08007a8c
 8007380:	08007a90 	.word	0x08007a90

08007384 <malloc>:
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <malloc+0xc>)
 8007386:	4601      	mov	r1, r0
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f000 b82b 	b.w	80073e4 <_malloc_r>
 800738e:	bf00      	nop
 8007390:	20000010 	.word	0x20000010

08007394 <memset>:
 8007394:	4402      	add	r2, r0
 8007396:	4603      	mov	r3, r0
 8007398:	4293      	cmp	r3, r2
 800739a:	d100      	bne.n	800739e <memset+0xa>
 800739c:	4770      	bx	lr
 800739e:	f803 1b01 	strb.w	r1, [r3], #1
 80073a2:	e7f9      	b.n	8007398 <memset+0x4>

080073a4 <sbrk_aligned>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	4e0e      	ldr	r6, [pc, #56]	; (80073e0 <sbrk_aligned+0x3c>)
 80073a8:	460c      	mov	r4, r1
 80073aa:	6831      	ldr	r1, [r6, #0]
 80073ac:	4605      	mov	r5, r0
 80073ae:	b911      	cbnz	r1, 80073b6 <sbrk_aligned+0x12>
 80073b0:	f000 f88c 	bl	80074cc <_sbrk_r>
 80073b4:	6030      	str	r0, [r6, #0]
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 f887 	bl	80074cc <_sbrk_r>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d00a      	beq.n	80073d8 <sbrk_aligned+0x34>
 80073c2:	1cc4      	adds	r4, r0, #3
 80073c4:	f024 0403 	bic.w	r4, r4, #3
 80073c8:	42a0      	cmp	r0, r4
 80073ca:	d007      	beq.n	80073dc <sbrk_aligned+0x38>
 80073cc:	1a21      	subs	r1, r4, r0
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 f87c 	bl	80074cc <_sbrk_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d101      	bne.n	80073dc <sbrk_aligned+0x38>
 80073d8:	f04f 34ff 	mov.w	r4, #4294967295
 80073dc:	4620      	mov	r0, r4
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	20000270 	.word	0x20000270

080073e4 <_malloc_r>:
 80073e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e8:	1ccd      	adds	r5, r1, #3
 80073ea:	f025 0503 	bic.w	r5, r5, #3
 80073ee:	3508      	adds	r5, #8
 80073f0:	2d0c      	cmp	r5, #12
 80073f2:	bf38      	it	cc
 80073f4:	250c      	movcc	r5, #12
 80073f6:	2d00      	cmp	r5, #0
 80073f8:	4607      	mov	r7, r0
 80073fa:	db01      	blt.n	8007400 <_malloc_r+0x1c>
 80073fc:	42a9      	cmp	r1, r5
 80073fe:	d905      	bls.n	800740c <_malloc_r+0x28>
 8007400:	230c      	movs	r3, #12
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	2600      	movs	r6, #0
 8007406:	4630      	mov	r0, r6
 8007408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740c:	4e2e      	ldr	r6, [pc, #184]	; (80074c8 <_malloc_r+0xe4>)
 800740e:	f000 f86d 	bl	80074ec <__malloc_lock>
 8007412:	6833      	ldr	r3, [r6, #0]
 8007414:	461c      	mov	r4, r3
 8007416:	bb34      	cbnz	r4, 8007466 <_malloc_r+0x82>
 8007418:	4629      	mov	r1, r5
 800741a:	4638      	mov	r0, r7
 800741c:	f7ff ffc2 	bl	80073a4 <sbrk_aligned>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	4604      	mov	r4, r0
 8007424:	d14d      	bne.n	80074c2 <_malloc_r+0xde>
 8007426:	6834      	ldr	r4, [r6, #0]
 8007428:	4626      	mov	r6, r4
 800742a:	2e00      	cmp	r6, #0
 800742c:	d140      	bne.n	80074b0 <_malloc_r+0xcc>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	4631      	mov	r1, r6
 8007432:	4638      	mov	r0, r7
 8007434:	eb04 0803 	add.w	r8, r4, r3
 8007438:	f000 f848 	bl	80074cc <_sbrk_r>
 800743c:	4580      	cmp	r8, r0
 800743e:	d13a      	bne.n	80074b6 <_malloc_r+0xd2>
 8007440:	6821      	ldr	r1, [r4, #0]
 8007442:	3503      	adds	r5, #3
 8007444:	1a6d      	subs	r5, r5, r1
 8007446:	f025 0503 	bic.w	r5, r5, #3
 800744a:	3508      	adds	r5, #8
 800744c:	2d0c      	cmp	r5, #12
 800744e:	bf38      	it	cc
 8007450:	250c      	movcc	r5, #12
 8007452:	4629      	mov	r1, r5
 8007454:	4638      	mov	r0, r7
 8007456:	f7ff ffa5 	bl	80073a4 <sbrk_aligned>
 800745a:	3001      	adds	r0, #1
 800745c:	d02b      	beq.n	80074b6 <_malloc_r+0xd2>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	442b      	add	r3, r5
 8007462:	6023      	str	r3, [r4, #0]
 8007464:	e00e      	b.n	8007484 <_malloc_r+0xa0>
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	1b52      	subs	r2, r2, r5
 800746a:	d41e      	bmi.n	80074aa <_malloc_r+0xc6>
 800746c:	2a0b      	cmp	r2, #11
 800746e:	d916      	bls.n	800749e <_malloc_r+0xba>
 8007470:	1961      	adds	r1, r4, r5
 8007472:	42a3      	cmp	r3, r4
 8007474:	6025      	str	r5, [r4, #0]
 8007476:	bf18      	it	ne
 8007478:	6059      	strne	r1, [r3, #4]
 800747a:	6863      	ldr	r3, [r4, #4]
 800747c:	bf08      	it	eq
 800747e:	6031      	streq	r1, [r6, #0]
 8007480:	5162      	str	r2, [r4, r5]
 8007482:	604b      	str	r3, [r1, #4]
 8007484:	4638      	mov	r0, r7
 8007486:	f104 060b 	add.w	r6, r4, #11
 800748a:	f000 f835 	bl	80074f8 <__malloc_unlock>
 800748e:	f026 0607 	bic.w	r6, r6, #7
 8007492:	1d23      	adds	r3, r4, #4
 8007494:	1af2      	subs	r2, r6, r3
 8007496:	d0b6      	beq.n	8007406 <_malloc_r+0x22>
 8007498:	1b9b      	subs	r3, r3, r6
 800749a:	50a3      	str	r3, [r4, r2]
 800749c:	e7b3      	b.n	8007406 <_malloc_r+0x22>
 800749e:	6862      	ldr	r2, [r4, #4]
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	bf0c      	ite	eq
 80074a4:	6032      	streq	r2, [r6, #0]
 80074a6:	605a      	strne	r2, [r3, #4]
 80074a8:	e7ec      	b.n	8007484 <_malloc_r+0xa0>
 80074aa:	4623      	mov	r3, r4
 80074ac:	6864      	ldr	r4, [r4, #4]
 80074ae:	e7b2      	b.n	8007416 <_malloc_r+0x32>
 80074b0:	4634      	mov	r4, r6
 80074b2:	6876      	ldr	r6, [r6, #4]
 80074b4:	e7b9      	b.n	800742a <_malloc_r+0x46>
 80074b6:	230c      	movs	r3, #12
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	4638      	mov	r0, r7
 80074bc:	f000 f81c 	bl	80074f8 <__malloc_unlock>
 80074c0:	e7a1      	b.n	8007406 <_malloc_r+0x22>
 80074c2:	6025      	str	r5, [r4, #0]
 80074c4:	e7de      	b.n	8007484 <_malloc_r+0xa0>
 80074c6:	bf00      	nop
 80074c8:	2000026c 	.word	0x2000026c

080074cc <_sbrk_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4d06      	ldr	r5, [pc, #24]	; (80074e8 <_sbrk_r+0x1c>)
 80074d0:	2300      	movs	r3, #0
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	f7fa f962 	bl	80017a0 <_sbrk>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_sbrk_r+0x1a>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_sbrk_r+0x1a>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	20000274 	.word	0x20000274

080074ec <__malloc_lock>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__malloc_lock+0x8>)
 80074ee:	f000 b809 	b.w	8007504 <__retarget_lock_acquire_recursive>
 80074f2:	bf00      	nop
 80074f4:	20000278 	.word	0x20000278

080074f8 <__malloc_unlock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__malloc_unlock+0x8>)
 80074fa:	f000 b804 	b.w	8007506 <__retarget_lock_release_recursive>
 80074fe:	bf00      	nop
 8007500:	20000278 	.word	0x20000278

08007504 <__retarget_lock_acquire_recursive>:
 8007504:	4770      	bx	lr

08007506 <__retarget_lock_release_recursive>:
 8007506:	4770      	bx	lr

08007508 <_init>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	bf00      	nop
 800750c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750e:	bc08      	pop	{r3}
 8007510:	469e      	mov	lr, r3
 8007512:	4770      	bx	lr

08007514 <_fini>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	bf00      	nop
 8007518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751a:	bc08      	pop	{r3}
 800751c:	469e      	mov	lr, r3
 800751e:	4770      	bx	lr
